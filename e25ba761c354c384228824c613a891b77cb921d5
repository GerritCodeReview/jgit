{
  "comments": [
    {
      "key": {
        "uuid": "bd6098eb_5bb310a7",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/ObjectDirectoryTest.java",
        "patchSetId": 6
      },
      "lineNbr": 206,
      "author": {
        "id": 97483
      },
      "writtenOn": "2021-06-18T23:37:08Z",
      "side": 1,
      "message": "import static Mockito.mock",
      "range": {
        "startLine": 206,
        "startChar": 25,
        "endLine": 206,
        "endChar": 38
      },
      "revId": "e25ba761c354c384228824c613a891b77cb921d5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5177fb51_86c98d80",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ObjectDirectory.java",
        "patchSetId": 6
      },
      "lineNbr": 485,
      "author": {
        "id": 4
      },
      "writtenOn": "2021-06-04T20:54:35Z",
      "side": 1,
      "message": "remove id from unpackedObjectCache before throwing e in case it\u0027s cached when we catch the exception ?",
      "revId": "e25ba761c354c384228824c613a891b77cb921d5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f758ac23_712df1f8",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ObjectDirectory.java",
        "patchSetId": 6
      },
      "lineNbr": 485,
      "author": {
        "id": 97483
      },
      "writtenOn": "2021-06-04T21:05:59Z",
      "side": 1,
      "message": "Should that be done also before L481?",
      "parentUuid": "5177fb51_86c98d80",
      "revId": "e25ba761c354c384228824c613a891b77cb921d5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26d78f7f_a1d055a3",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ObjectDirectory.java",
        "patchSetId": 6
      },
      "lineNbr": 485,
      "author": {
        "id": 244435
      },
      "writtenOn": "2021-06-07T07:53:03Z",
      "side": 1,
      "message": "@Matthias: Looking at the FileNotFoundException behaviour, we remove the id from the cache only when suppressing the exception (i.e we do not update `unpackedObjectCache` when throwing `nofile`).\n\nI thought to keep the \"stale file handle\" behaviour consistent, that\u0027s why I moved the\n\n```\nunpackedObjectCache.remove(id);\n```\n\nAt L489, so that it would be called *only* when we *don\u0027t* re-throw the exception.\n\nI agree with you though, I was thinking that the cache should be updated regardless, since the loose object just does not exist anymore (or it\u0027s not accessible, at least).\n\nPerhaps a follow up change to address boh \"file not found\" and \"stale file handle\" exceptions?",
      "parentUuid": "f758ac23_712df1f8",
      "revId": "e25ba761c354c384228824c613a891b77cb921d5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1e53430_0a01de91",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ObjectDirectory.java",
        "patchSetId": 6
      },
      "lineNbr": 485,
      "author": {
        "id": 97483
      },
      "writtenOn": "2021-06-07T23:27:41Z",
      "side": 1,
      "message": "I believe that removing it from the cache and considering it as non-existent could be dangerous for transient failures though. @Matthias WDYT?",
      "parentUuid": "26d78f7f_a1d055a3",
      "revId": "e25ba761c354c384228824c613a891b77cb921d5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1faf587_eacb54c5",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ObjectDirectory.java",
        "patchSetId": 6
      },
      "lineNbr": 487,
      "author": {
        "id": 4
      },
      "writtenOn": "2021-06-21T21:49:35Z",
      "side": 1,
      "message": "A.10 in the Linux NFS FAQ [1] says:\n\n\"Thus in general, to recover from an ESTALE error, an application must close the file or directory where the error occurred, and reopen it so the NFS client can resolve the pathname again and retrieve the new file handle.\"\n\nHence shouldn\u0027t we follow this recommendation and retry getObjectLoader()?\nSimilar to how RefDirectory.readPackedRefs() retries if the file handle to packed-refs turns out to be stale when trying to read the packed-refs file.\nIf the file was deleted by another NFS client retrying to read the loose object file should fail with FileNotFoundException and openLooseObject() would handle this in line 479 and not throw an exception but try to find the object in a pack or alternate.\n\n[1] http://nfs.sourceforge.net/",
      "revId": "e25ba761c354c384228824c613a891b77cb921d5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e615214_a8d41b0e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ObjectDirectory.java",
        "patchSetId": 6
      },
      "lineNbr": 487,
      "author": {
        "id": 244435
      },
      "writtenOn": "2021-06-22T09:19:01Z",
      "side": 1,
      "message": "\u003e A.10 in the Linux NFS FAQ [1] says:\n\u003e \n\u003e \"Thus in general, to recover from an ESTALE error, an application must close the file or directory where the error occurred, and reopen it so the NFS client can resolve the pathname again and retrieve the new file handle.\"\n\nInteresting, thanks for sharing.\n\n\u003e \n\u003e Hence shouldn\u0027t we follow this recommendation and retry getObjectLoader()?\n\u003e Similar to how RefDirectory.readPackedRefs() retries if the file handle to packed-refs turns out to be stale when trying to read the packed-refs file.\n\u003e If the file was deleted by another NFS client retrying to read the loose object file should fail with FileNotFoundException and openLooseObject() would handle this in line 479 and not throw an exception but try to find the object in a pack or alternate.\n\nI am trying to understand what would be the benefit of retrying to read the loose object.\nCan the second loose object read attempt be ever successful rather than raising a FileNotFoundException?\n\nIf not, then suppressing the stale exception and retrying to read the loose object would both end up triggering a search in the pack or alternate anyway.\n\nWDYT?\n\n\u003e \n\u003e [1] http://nfs.sourceforge.net/",
      "parentUuid": "e1faf587_eacb54c5",
      "revId": "e25ba761c354c384228824c613a891b77cb921d5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    }
  ]
}