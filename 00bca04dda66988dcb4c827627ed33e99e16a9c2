{
  "comments": [
    {
      "key": {
        "uuid": "9cb9248c_0bc1112a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 951
      },
      "writtenOn": "2018-05-18T01:00:39Z",
      "side": 1,
      "message": "Can you explain the threading model here (or even better, in comments in the code)?\n\nCurrently the javadoc comment simply says\n\n This class is thread-safe.\n\nThat suggests I should be able to call scanForRepoChanges() simultaneously in multiple threads. Is that permitted? Should scanForRepoChanges be declared \"synchronized\"? The code\n\n if (snapshot \u003d\u003d null)\n    snapshot \u003d FileSnapshot.save(indexFile);\n  else if (snapshot.isModified(indexFile))\n    notifyIndexChanged();\n\nsuggests a time of check/time of use race to me: couldn\u0027t two threads both observe snapshot to be null, causing notifyIndexChanged() not to be called? What do we want to guarantee --- is that race harmless?",
      "revId": "00bca04dda66988dcb4c827627ed33e99e16a9c2",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cfdf668_301d706e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/FileRepository.java",
        "patchSetId": 1
      },
      "lineNbr": 552,
      "author": {
        "id": 951
      },
      "writtenOn": "2018-05-22T00:55:00Z",
      "side": 1,
      "message": "I think the intention is to ensure that notifyIndexChanged gets called every time we call FileSnapshot.save, except the first.\n\nAny locking overhead would be dwarfed by the I/O that FileSnapshot.save and FileSnapshot.isNotified performs, so I\u0027d recommend protecting snapshot with a lock (either this.monitor or an explicit Lock). For example:\n\n private FileSnapshot snapshot;\n ...\n private void detectIndexChanges() {\n   if (isBare()) {\n    return;\n   }\n\n   boolean notify \u003d false;\n   synchronized (this) {\n      if (snapshot \u003d\u003d null) {\n        snapshot \u003d ...;\n        return;\n      }\n      if (!snapshot.isModified(indexFile)) {\n        return;\n      }\n   }\n   notifyIndexChanged(false);\n }\n\n  publc void notifyIndexChanged(boolean internal) {\n    File indexFile \u003d getIndexFile();\n    synchronized (this) {\n       snapshot \u003d FileSnapshot.save(indexFile);\n    }\n    fireEvent(...);\n  }\n\nEven better would be if the complexity is encapsulated in a helper object with methods matching what we need from it. FileSnapshot appears to be an immutable object; should we add a concurrency-safe mutable variant?",
      "revId": "00bca04dda66988dcb4c827627ed33e99e16a9c2",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91992983_cee0c625",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/FileRepository.java",
        "patchSetId": 1
      },
      "lineNbr": 552,
      "author": {
        "id": 4
      },
      "writtenOn": "2018-06-03T11:34:21Z",
      "side": 1,
      "message": "done in https://git.eclipse.org/r/#/c/123892/ moved to stable-5.0",
      "parentUuid": "0cfdf668_301d706e",
      "revId": "00bca04dda66988dcb4c827627ed33e99e16a9c2",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    }
  ]
}