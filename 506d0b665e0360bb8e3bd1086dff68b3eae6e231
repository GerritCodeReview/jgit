{
  "comments": [
    {
      "key": {
        "uuid": "AABOF3///7U\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/PostReceiveHook.java",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-13T22:06:02Z",
      "side": 1,
      "message": "This change is going to force the JGit project to bump its version to 2.0 in the next release, because its a public API signature change.\n\nI can\u0027t think of a way to avoid this without making too much pain for the project. Making the current ReceiveCommits an abstract base class with no wire protocol information is also a breaking change.\n\nI may prefer to just accept this change and break the API and force us to 2.0 in the next release. Its not that much work for a consumer application to adjust their linking to this one change. In aggregate though it might get to be a lot. :-\\",
      "revId": "506d0b665e0360bb8e3bd1086dff68b3eae6e231",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///68\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/PostReceiveHook.java",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 383
      },
      "writtenOn": "2012-02-13T22:18:27Z",
      "side": 1,
      "message": "I didn\u0027t realize this was going to be such a big deal. I will think a bit harder about whether I can avoid this by making more invasive changes to Gerrit (namely making ReceiveCommits not implement Pre/PostReceiveHook).",
      "parentUuid": "AABOF3///7U\u003d",
      "revId": "506d0b665e0360bb8e3bd1086dff68b3eae6e231",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///60\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/PostReceiveHook.java",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 383
      },
      "writtenOn": "2012-02-13T22:55:59Z",
      "side": 1,
      "message": "Upon further reflection, I think I can avoid changing the *Hook interfaces.\n\nIn my prototype RPC implementation, I only needed to set a hook on the client side (that is, the frontline server speaking the git wire protocol with an end-user), which is where there is a real ReceivePack available. I still needed the interface, and the ability for com.google.gerrit.server.git.ReceiveCommits to accept different types of ReceiveSessions, but ReceiveCommits does *not* have to be a hook for my server-side RPC code to work.\n\nHere\u0027s another way of thinking about it: the whole point of having a pre-receive hook is to make one method call at a very specific point in the implementation of ReceivePack.receive(). Once you\u0027re talking about a ReceiveSession reconsituted from something sent over the wire in an RPC, you no longer have the idea of this specific wire protocol implementation, so there\u0027s no \"natural\" place where the hook belongs. Thus hooks don\u0027t really belong in the interface.",
      "parentUuid": "AABOF3///68\u003d",
      "revId": "506d0b665e0360bb8e3bd1086dff68b3eae6e231",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///6s\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/PostReceiveHook.java",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 383
      },
      "writtenOn": "2012-02-13T23:22:35Z",
      "side": 1,
      "message": "Although I can get away with this, there is a downside, namely that it makes it so RPC server implementors have to modify *every* *Hook implementation to expose two public methods, one taking a ReceiveSession and one taking a ReceivePack to implement the hook interface.\n\nFor a concrete example ReceiveCommits is going to have to change from this:\n\n  @Override\n  public void onPreReceive(final ReceivePack rp,\n      final Collection\u003cReceiveCommand\u003e commands) {\n    \u003cdo work\u003e\n  }\n\nto this:\n\n  @Override\n  public void onPreReceive(final ReceivePack rp,\n      final Collection\u003cReceiveCommand\u003e commands) {\n    processCommands(rp, commands);\n  }\n\n  public void processCommands(final ReceiveSession rs,\n      final Collection\u003cReceiveCommand\u003e commands) {\n    \u003cdo work\u003e\n  }\n\nThis is not so bad for one class, but it requires modifying *every* class that the server implementor wants to expose.",
      "parentUuid": "AABOF3///60\u003d",
      "revId": "506d0b665e0360bb8e3bd1086dff68b3eae6e231",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}