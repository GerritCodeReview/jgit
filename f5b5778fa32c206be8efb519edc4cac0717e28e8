{
  "comments": [
    {
      "key": {
        "uuid": "AABOIn//4Js\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/BaseConnection.java",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-09-11T00:45:33Z",
      "side": 1,
      "message": "indexOf(\u0027/\u0027) would be sufficient here.",
      "revId": "f5b5778fa32c206be8efb519edc4cac0717e28e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOIn//4Jo\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/BaseConnection.java",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-09-11T00:45:33Z",
      "side": 1,
      "message": "So for HEAD (which servers advertise) we check if x/HEAD is valid, and its not right? So this always causes HEAD to fail doesn\u0027t it?\n\nI\u0027m not convinced this is the right place to make this change. This method is about being told what the remote side gave us, and nothing more, nothing less. We should be filtering what is valid before we apply it to the local Repository, not when we are looking at the collection we parsed off the wire.\n\nThe other place to barf would be when parsing the wire format. We only parse the wire data in 2 places, and we abort there if the ObjectId isn\u0027t a valid SHA-1 in hex. We could also abort if the reference name isn\u0027t strictly a valid reference name. But I prefer to be lenient in what we read from the remote peer, and strict on what we apply to the local repository.",
      "revId": "f5b5778fa32c206be8efb519edc4cac0717e28e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOIn//4JY\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/BaseConnection.java",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 8
      },
      "writtenOn": "2012-09-11T01:23:58Z",
      "side": 1,
      "message": "This is a common methods called by all transports, hence I felt it would be convenient to fix all protocols in one place.",
      "parentUuid": "AABOIn//4Jo\u003d",
      "revId": "f5b5778fa32c206be8efb519edc4cac0717e28e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOIn//4HM\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/BaseConnection.java",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-09-11T14:23:33Z",
      "side": 1,
      "message": "Just because its a common method doesn\u0027t mean its always the right place to fix a common bug. :-)\n\nThe risk here is a writing a bad name to a local repository. The local repository name of a ref comes from a lot more sources than just the Map supplied by the remote peer. It could come from a bad reference specification supplied in .git/config or on the command line.\n\nWe should be catching and refusing these inside of the reference writing code path, and not relying on this little setter method to make sure data going to local disk is safe.",
      "parentUuid": "AABOIn//4JY\u003d",
      "revId": "f5b5778fa32c206be8efb519edc4cac0717e28e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOIn//3kU\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/BaseConnection.java",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 8
      },
      "writtenOn": "2012-09-16T08:30:45Z",
      "side": 1,
      "message": "The only reason for doing this here is to protect against remote evil refs, e.g. remote exploits. I think everything should go through a common method and why not this method, even\nif that was not the original purpose.\n\nIf someone hacks your local .git/config or trick the user (e.g. telling him to type \"mvn install\" you are already toast, not much we can do there. What we can do is to prevent bad stuff entering from the outside without the user having an option to inspect the downloaded crap.",
      "parentUuid": "AABOIn//4HM\u003d",
      "revId": "f5b5778fa32c206be8efb519edc4cac0717e28e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOIn//3iM\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/BaseConnection.java",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-09-16T18:15:17Z",
      "side": 1,
      "message": "I agree we should protect against an evil ref. But we should be doing it by protecting the local repository from writing an evil ref, not by blocking the protocol from seeing that the remote sent an evil ref.\n\nThis is the wrong place to be checking if a ref name is valid and throwing if it isn\u0027t.",
      "parentUuid": "AABOIn//3kU\u003d",
      "revId": "f5b5778fa32c206be8efb519edc4cac0717e28e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOIn//4Jk\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/FileUtils.java",
        "patchSetId": 2
      },
      "lineNbr": 261,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-09-11T00:45:33Z",
      "side": 1,
      "message": "s/an exceptions/an exception/",
      "revId": "f5b5778fa32c206be8efb519edc4cac0717e28e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOIn//4Jg\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/FileUtils.java",
        "patchSetId": 2
      },
      "lineNbr": 277,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-09-11T00:45:33Z",
      "side": 1,
      "message": "This isn\u0027t strictly atomic. If to is created between the test and the rename, it gets replaced. :-)\n\nI think the name of this method is too easy to assume we should always use it for renames.",
      "revId": "f5b5778fa32c206be8efb519edc4cac0717e28e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}