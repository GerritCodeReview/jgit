{
  "comments": [
    {
      "key": {
        "uuid": "167e3d22_6b1c1273",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 51
      },
      "writtenOn": "2019-07-04T14:18:16Z",
      "side": 1,
      "message": "An IOError may be returned here on Windows, e.g. when providing an invalid drive letter, like:\n\n    new File(\"Q:\").toPath().\n\nChanging to:\n\n    try {\n        file \u003d file.toAbsolutePath();\n    } catch (IOError ex) {\n        return FALLBACK_TIMESTAMP_RESOLUTION;\n    }\n\nresolves the problem.",
      "revId": "1bfb936fa40af67107b21fe66dffee5bec55290f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "951183ec_0c3b82cc",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 4
      },
      "writtenOn": "2019-07-04T16:09:16Z",
      "side": 1,
      "message": "I don\u0027t get why an invalid path name should not cause an exception to be thrown ? \n\nIn addition IOError\u0027s base class Error says: \n\n\"An {@code Error} is a subclass of {@code Throwable} that indicates serious problems that a reasonable application should not try to catch\"",
      "parentUuid": "167e3d22_6b1c1273",
      "revId": "1bfb936fa40af67107b21fe66dffee5bec55290f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4970e87_50e5efa8",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 51
      },
      "writtenOn": "2019-07-04T16:28:23Z",
      "side": 1,
      "message": "It\u0027s not about invalid file name syntax but e.g. about drives which may be mounted today and may not be mounted tomorrow. To me there is no difference whether I\u0027m providing an invalid file:\n\nnew File(\"d:/foo/bar\")\n\nor an invalid file:\n\nnew File(\"q:\")\n\nBut in the first case getFsTimestampResolution works and in the second it crashes.\n\nI\u0027m not sure why Java is using an Error here -- maybe because Path.toAbsolutePath() doesn\u0027t offer to throw an Exception.\n\nEither way, it\u0027s not really important to me. I just came across this problem when testing. We might wait until one real users encounters this problem (if ever).",
      "parentUuid": "951183ec_0c3b82cc",
      "revId": "1bfb936fa40af67107b21fe66dffee5bec55290f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}