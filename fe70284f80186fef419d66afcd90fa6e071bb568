{
  "comments": [
    {
      "key": {
        "uuid": "a7c23755_4403014c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/FetchCommand.java",
        "patchSetId": 14
      },
      "lineNbr": 164,
      "author": {
        "id": 5
      },
      "writtenOn": "2017-03-01T09:15:32Z",
      "side": 1,
      "message": "Isn\u0027t that too expensive? You are inspecting the whole repository for changed/added files although you know that you are interested in a single path. You just want to know whether /path/to/submodule is marked dirty when asking the parent repository. At least you should set a filter for the indexDiff to concentrate only on a certain path (e.g. indexdiff.setFilter(PathFilterGroup.createFromStrings(...));\n\nAlternatively you could even check manually whether the submodule repo is dirty. If the submodule repo is clean then check whether the submodules repo HEAD has the same ID as what we have stored in the index of the parent repo. If that is also true then the submodule is clean.",
      "range": {
        "startLine": 162,
        "startChar": 5,
        "endLine": 164,
        "endChar": 22
      },
      "revId": "fe70284f80186fef419d66afcd90fa6e071bb568",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7c23755_845fd944",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/FetchCommand.java",
        "patchSetId": 14
      },
      "lineNbr": 164,
      "author": {
        "id": 925
      },
      "writtenOn": "2017-03-01T10:06:04Z",
      "side": 1,
      "message": "Checking if the submodule repo is dirty won\u0027t work, because we haven\u0027t fetched it yet.  Its HEAD will always be the same as the index.\n\nI\u0027ve reworked it to filter the indexDiff.",
      "parentUuid": "a7c23755_4403014c",
      "range": {
        "startLine": 162,
        "startChar": 5,
        "endLine": 164,
        "endChar": 22
      },
      "revId": "fe70284f80186fef419d66afcd90fa6e071bb568",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7c23755_84cb591a",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/FetchCommand.java",
        "patchSetId": 14
      },
      "lineNbr": 164,
      "author": {
        "id": 5
      },
      "writtenOn": "2017-03-01T12:54:20Z",
      "side": 1,
      "message": "You are right, it makes no sense to inspect the submodule repo HEAD already now.\n\nSo I read again the documentation at [1]. When I look at the docs regarding ON_DEMAND it says that submodules repos should be updated \"when when the superproject retrieves a commit that updates the submodule’s reference to a commit that isn’t already in the local submodule clone\". But that is different from what we are doing here. We check that what we have fetched in the parent project regarding the submodule is different from what we have in the (parent projects) index or working tree. E.g. if you create a commit in the submodule and updated the parent projects index to point to that commit then afterwards every fetch will update the submodule.\n\nThe documentation shows to me that we only need to deal with the FETCH_HEAD commit of the parent project and can ignore parent projects index and working tree.\n\nMaybe it would be more aligned to native git behaviour (and much more performant than this solution (IndexDiff with workingTree is expensive!)) if we would do a submodulewalk for the tree behind FETCH_HEAD (and not a submodulewalk for index as we now do) and for every submodule call getObjectID and check if such an object exists in our local submodule repo.\n\n[1] https://git-scm.com/docs/git-fetch#git-fetch---recurse-submodulesyeson-demandno",
      "parentUuid": "a7c23755_845fd944",
      "range": {
        "startLine": 162,
        "startChar": 5,
        "endLine": 164,
        "endChar": 22
      },
      "revId": "fe70284f80186fef419d66afcd90fa6e071bb568",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}