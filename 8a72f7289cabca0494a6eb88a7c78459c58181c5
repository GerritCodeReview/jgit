{
  "comments": [
    {
      "key": {
        "uuid": "2721e7e2_4399b5d0",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/filter/FirstParentRevFilter.java",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-07-23T18:25:25Z",
      "side": 1,
      "message": "What happens if a commit is both a start commit and second parent of another start commit?",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 91,
        "endChar": 48
      },
      "revId": "8a72f7289cabca0494a6eb88a7c78459c58181c5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_c3564555",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/filter/FirstParentRevFilter.java",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 383
      },
      "writtenOn": "2015-07-23T18:37:57Z",
      "side": 1,
      "message": "Yeah :(\n\nI think that point makes this approach impossible. When you markStart, it just adds it to the root set internal to the RevWalk. A consumer of the RevWalk has _no_ way to determine whether a commit was a start commit.\n\nSome alternatives:\n\n* Expose the root set as RevWalk.isStart(). As long as roots is an ArrayList this is O(n) in the number of start nodes (which might be ok).\n* Reserve another flag START and have markStart set this.\n* Make FirstParentRevFilter.newRevWalk that returns a subclassed RevWalk with one of the above behaviors.\n\nI\u0027m leaning towards #2, add a START flag, but this has the potential to break existing code that already uses the max number of flags.",
      "parentUuid": "2721e7e2_4399b5d0",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 91,
        "endChar": 48
      },
      "revId": "8a72f7289cabca0494a6eb88a7c78459c58181c5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_9ebb020d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/filter/FirstParentRevFilter.java",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-07-23T18:39:29Z",
      "side": 1,
      "message": "I don\u0027t think this will work. PendingGenerator (or a similar new generator) needs to be aware of the FirstParentRevFilter and avoid walking parents after the first.",
      "parentUuid": "2721e7e2_4399b5d0",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 91,
        "endChar": 48
      },
      "revId": "8a72f7289cabca0494a6eb88a7c78459c58181c5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_de0c5a4b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/filter/FirstParentRevFilter.java",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 383
      },
      "writtenOn": "2015-07-23T20:47:03Z",
      "side": 1,
      "message": "Assuming we can correctly identify start nodes, why would the coloring approach not work? I think the recursive definition \"reachable traversing only first-parent links from a commit that was previously emitted\" is correct; what am I missing?\n\nThe main downside of hard-coding this into the generator is that it means this RevFilter is not composable with other RevFilters. For MERGE_BASE, we have to explicitly check whether the RevFilter matches that exact instance. If we want to support OrFilter(FirstParentRevFilter, AuthorRevFilter), we can\u0027t do that equality check. This is probably fine for MERGE_BASE, which is extra-special, but not for this.\n\nAvoiding walking second-parent links would, of course, be an optimization.",
      "parentUuid": "2721e7e2_9ebb020d",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 91,
        "endChar": 48
      },
      "revId": "8a72f7289cabca0494a6eb88a7c78459c58181c5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_f74cd599",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/filter/FirstParentRevFilter.java",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-07-28T22:16:26Z",
      "side": 1,
      "message": "Sorry I missed your comments.\n\nWhat happens if a commit is both a first parent of a start commit and second parent of another start commit and it is discovered via a second-parent path before the first-parent one?\n\nThat is, consider a history like this:\n\n\n                  o -- o [start1]\n                      /\n     -----------------\n    /\n   o -- o --- o -- o -- o -- o -- o [start2]",
      "parentUuid": "2721e7e2_de0c5a4b",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 91,
        "endChar": 48
      },
      "revId": "8a72f7289cabca0494a6eb88a7c78459c58181c5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_f77e9589",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/filter/FirstParentRevFilter.java",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 383
      },
      "writtenOn": "2015-07-28T22:25:42Z",
      "side": 1,
      "message": "The \"discovered before\" piece can only happen if there is significant clock skew.\n\nMore precisely, the root will be \"discovered\" via the second parent path from start1, but upon \"discovery\", it is just parsed enough to be pushed into the pqueue and considered later.\n\nAssuming no clock skew, start2 and all its other ancestors, will be popped before the root. When processing the second immediate child of the root, we will color root with FIRST_PARENT, so when it\u0027s popped, it will have the right flag.\n\nThe root can only be popped before its children in the case of significant clock skew. I think the general rule here is we sacrifice correctness for performance in the clock skew case. You can opt for correctness by topo sorting. I wouldn\u0027t be surprised if C git has the same behavior.",
      "parentUuid": "2721e7e2_f74cd599",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 91,
        "endChar": 48
      },
      "revId": "8a72f7289cabca0494a6eb88a7c78459c58181c5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_772585b2",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/filter/FirstParentRevFilter.java",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-07-28T22:32:07Z",
      "side": 1,
      "message": "C git just restricts the walk to the first parent when you pass --first-parent.",
      "parentUuid": "2721e7e2_f77e9589",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 91,
        "endChar": 48
      },
      "revId": "8a72f7289cabca0494a6eb88a7c78459c58181c5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_173409e1",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/filter/FirstParentRevFilter.java",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 383
      },
      "writtenOn": "2015-07-28T22:33:44Z",
      "side": 1,
      "message": "Sure but it has analogous correctness problems in the case of clock skew.",
      "parentUuid": "2721e7e2_772585b2",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 91,
        "endChar": 48
      },
      "revId": "8a72f7289cabca0494a6eb88a7c78459c58181c5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}