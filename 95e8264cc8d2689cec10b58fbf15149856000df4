{
  "comments": [
    {
      "key": {
        "uuid": "cc788170_5b32a3aa",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java",
        "patchSetId": 15
      },
      "lineNbr": 955,
      "author": {
        "id": 44628
      },
      "writtenOn": "2019-09-10T06:10:57Z",
      "side": 1,
      "message": "Shouldn\u0027t this be an else-if here?\n\n    ...\n  } else if (!fileLastModified.equals(cacheLastModified)) {\n    return MetadataDiff.DIFFER_BY_TIMESTAMP;\n  }\n  \n  if (entry.isSmudged()) {\n    return MetadataDiff.SMUDGED;\n  }\n  return MetadataDiff.EQUAL;\n\nI wonder if this may cause https://www.eclipse.org/forums/index.php/t/1100344/ ?",
      "revId": "95e8264cc8d2689cec10b58fbf15149856000df4",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71aaf28a_76307155",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java",
        "patchSetId": 15
      },
      "lineNbr": 955,
      "author": {
        "id": 44628
      },
      "writtenOn": "2019-09-10T09:59:31Z",
      "side": 1,
      "message": "Also: previously the cache contained milliseconds at best. If we now get nanos (or anything sub-milli) from the file but the cache still contains only millisecond resolution I\u0027d expect more DIFFER_BY_TIMESTAMP cases. Which was the guess I voiced in the forum.\n\nDoes this need a migration strategy (compare only millis if cacheLastModified.getNanos() % 1000000 \u003d\u003d 0)? And perhaps compare only microseconds if % 1000 \u003d\u003d 0?",
      "parentUuid": "cc788170_5b32a3aa",
      "revId": "95e8264cc8d2689cec10b58fbf15149856000df4",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9f17332_0a441490",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java",
        "patchSetId": 15
      },
      "lineNbr": 955,
      "author": {
        "id": 4
      },
      "writtenOn": "2019-09-10T13:19:16Z",
      "side": 1,
      "message": "We could implement a custom timestamp compare method which ignores any difference below the measured timestamp resolution.\n\nOn the other hand we should smudge any dircache entry where the difference of cached timestamp and timestamp of the index file is less than FileSnapshot.getEffectiveRacyThreshold().",
      "parentUuid": "71aaf28a_76307155",
      "revId": "95e8264cc8d2689cec10b58fbf15149856000df4",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ce969df_ae3adf77",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java",
        "patchSetId": 15
      },
      "lineNbr": 955,
      "author": {
        "id": 4
      },
      "writtenOn": "2019-09-10T14:20:59Z",
      "side": 1,
      "message": "see https://git.eclipse.org/r/#/c/149266/",
      "parentUuid": "a9f17332_0a441490",
      "revId": "95e8264cc8d2689cec10b58fbf15149856000df4",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2a496c4_048e30ad",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java",
        "patchSetId": 15
      },
      "lineNbr": 955,
      "author": {
        "id": 44628
      },
      "writtenOn": "2019-09-10T14:40:31Z",
      "side": 1,
      "message": "The old code also did a reduced precision comparison if millis \u003d\u003d 0, but only here. The smudge/raciness logic did not have such a special case as far as I remember. That\u0027s why I thought that maybe doing something similar here only for this timestamp comparison would be OK.\n\n(I also wonder with what precision canonical git stores timestamps in the cache, especially on Windows. If JGit gets a different precision from the file system, I think we may see that effect -- if this is the cause -- whenever someone uses not only EGit/JGit but also normal git on the same repo. In which case a special comparison relying on the resolution as measured by Java may not help, and we might indeed need to do special-casing for the % 1_000_000 and % 1000 cases.)\n\nBut let\u0027s wait what Julien reports on the forum. If after having re-created the index he still experiences this slowness the reason could also be something else. After all, it was just a guess.",
      "parentUuid": "a9f17332_0a441490",
      "revId": "95e8264cc8d2689cec10b58fbf15149856000df4",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}