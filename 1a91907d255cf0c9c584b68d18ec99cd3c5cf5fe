{
  "comments": [
    {
      "key": {
        "uuid": "AABOHn//+GA\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 102,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "Just declare GC instances are not thread-safe. Simple. :-)",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+F8\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 125,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "inline this and drop the ?: operator when initializing pm.",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+F4\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 128,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "extra trailing 1 here? this currently is a lot more than 2 weeks.",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+FY\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 133,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "\u003cli\u003epack loose references into packed-refs\u003c/li\u003e",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+Fc\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 139,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "s/created newly/newly created/?",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+Fg\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 141,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "nit: extra blank line",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+EM\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 181,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "new File(oldPack.getPackFile().getPath() + \".keep\").exists()",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+FU\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 433,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "This is why I suggest passing in List\u003cString\u003e to RefDirectory.",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+E4\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 476,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "This could just as well be a List. PackIndex in a set is relying on reference equality.",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+EI\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 478,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "You have this idiom twice in the class. Maybe a helper method somewhere would be good.",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+Ew\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 491,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "If you make excluded a list, put this at the front with add(0, ...) since it contains most of the objects you don\u0027t need to pack in the next writePack attempt for the nonHeads.",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+FM\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 559,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "getIndexFile() checks isBare() and throws NoWorkTreeException. So your comment here isn\u0027t really correct.",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+FI\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 572,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "add revWalk \u003d null after this line to save yourself from calling dispose again in the finally block. You still need that call in finally in case an exception throws during parseTree.",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+FE\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 580,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "Not really. You aren\u0027t skipping dirty submodules correctly. And I don\u0027t like using zeroId for this test when file mode is more accurate:\n\n  while (treeWalk.next()) {\n    switch (treeWalk.getRawMode(0) \u0026 FileMode.TYPE_MASK) {\n      case FileMode.TYPE_MISSING:\n      case FileMode.TYPE_GITLINK:\n        continue;\n\n      case FileMode.TYPE_TREE:\n      case FileMode.TYPE_FILE:\n      case FileMode.TYPE_SYMLINK:\n        ret.add(objectId);\n        continue;\n\n      default:\n        throw new IOException(MessageFormat.format(\n          JGitText.get().corruptObjectInvalidMode3,\n          String.format(\"%o\", Integer.valueOf(treeWalk.getRawMode(0)),\n          treeWalk.getObjectId(0).name(),\n          treeWalk.getPathString(),\n          repo.getIndexFile()));\n    }\n  }",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+EY\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 612,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "I prefer just using two random file names for this like ObjectDirectoryPackParser does:\n\n  File packdir \u003d new File(repo.getObjectsDirectory(), \"pack\");\n  tmpPack \u003d File.createTempFile(\"gc_\", \".pack_tmp\", packdir);\n  tmpIdx \u003d new File(\n    packdir,\n    tmpPack.getName().substring(0, tmpPack.getName().lastIndexOf(\u0027.\u0027))\n    + \".idx_tmp\");",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+Es\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 634,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "this line wrapped badly, name it idxStream instead?",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+EU\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 646,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "This rename will fail on windows if the set of objects didn\u0027t change. The existing pack still exists, and its file handle is still open, so windows won\u0027t permit the pack to be replaced. This means we can\u0027t repack a repository on windows just to tweak the compression settings.\n\nNot sure what you want to do here. Do we just punt and say you can\u0027t use JGit on windows to adjust compression settings of an already packed repository?",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+Eo\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 648,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "The new files should be set read only before the rename, not after.",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+EQ\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 651,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "If this fails but the prior renameTo succeeds to replace an existing pack, we have a corrupt repository. The new index isn\u0027t in position so the offset data is all wrong, but the new pack is already in place so the old index will point to corruption.\n\nWhen finally runs before the return, the tmpIdx still exists, so its deleted. So now the user has a corrupt repository, where the pack and index disagree with each other, and they can\u0027t finish the rename on their own because they don\u0027t have the new index file.\n\nIf there is anytime to panic in this routine, its when this rename fails, but the pack rename was OK, and the realIdx already exists.\n\nIt might be OK to do this, where we ensure we leave the remains behind and warn the caller that things did not go as expected:\n\n  boolean delete \u003d true;\n  try {\n\n    if (!tmpPack.renameTo(realPack))\n      return null;\n    delete \u003d false;\n\n    if (!tmpIdx.renameTo(realIdx)) {\n      File newIdx \u003d new File(realIdx.getParentFile(), realIdx.getName() + \".new\");\n      if (!tmpIdx.renameTo(newIdx))\n        newIdx \u003d tmpIdx;\n      throw new IOException(\"Panic index file \"\n        + newIdx + \" must be renamed to replace \"\n        + realIdx + \"; until then repository is corrupt\");\n    }\n  } finally {\n    if (delete \u0026\u0026 tmpPack !\u003d null \u0026\u0026 tmpPack.exists())\n      tmpPack.delete();\n    if (delete \u0026\u0026 tmpIdx !\u003d null \u0026\u0026 tmpIdx.exists())\n      tmpIdx.delete();\n  }",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+Ec\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 657,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "This has a race condition for two different JGit threads doing a GC of the same repository at the same time. One thread will make the temporary pack/index file with createNewFile. The other will fail, see it exists, and delete it.\n\nNow the first thread that one the creation event will fail when it tries to rename, because the pack doesn\u0027t exist anymore. (Assuming a POSIX filesystem.)",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+Fk\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 663,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "optional nit: rename \"t\" to \"ext\"? its not clear it is supposed to be the extension.",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+Fs\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 702,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "This implementation doesn\u0027t match the documentation of numberOfPackedObjects. By using a HashSet\u003cObjectId\u003e you are removing duplicates. And spending a lot of time to gather this data.\n\nInstead use:\n\n  for (PackFile f : repo.getObjectDatabase().getPacks())\n    ret.numberOfPackedObjects +\u003d f.getIndex().getObjectCount();",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+Fo\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 708,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "unnecessary assignment, the value is already 0 in a new object.",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+Fw\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 733,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "optional: consider returning this from setters to support chaining configuration.",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+F0\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 19
      },
      "lineNbr": 734,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "nit: none of these parens are necessary.",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+Gg\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/RefDirectory.java",
        "patchSetId": 19
      },
      "lineNbr": 597,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "Using a String[] here feels odd. Most places in JGit that are taking a dynamic length as input from the caller use List rather than array as the List is easier to construct dynamically.\n\nInternally we might keep arrays where the length doesn\u0027t change frequently, and we might return those arrays as-is to avoid wrapping overheads if we think we can trust the caller to not muck with the array itself.",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+GY\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/RefDirectory.java",
        "patchSetId": 19
      },
      "lineNbr": 623,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "It isn\u0027t necessary to lock every reference all at once in order to pack. You can rely on the atomic compare-and-swap sort of nature of loose references to avoid needing all of these locks at once.\n\nThe \"correct\" algorithm is:\n\n* Lock the packed-refs file.\n* Read each loose reference: update the new packed-refs in-memory\n* Commit the packed-refs file.\n* Lock each loose reference.\n* Delete the loose reference if it exactly matches the packed-refs file.\n\nThis avoids needing to lock all of them at once. Which could get you into some nasty deadlock conditions if other callers were also trying to do something similar and didn\u0027t lock them in a nice order.",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+GU\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/RefDirectory.java",
        "patchSetId": 19
      },
      "lineNbr": 631,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "nit: curly braces aren\u0027t required here",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+GQ\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/RefDirectory.java",
        "patchSetId": 19
      },
      "lineNbr": 635,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "nit: extra blank line",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOHn//+GM\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/RefDirectory.java",
        "patchSetId": 19
      },
      "lineNbr": 654,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-06-04T17:28:16Z",
      "side": 1,
      "message": "I would have done this do/while.compareAndSet as the outer loop. Chances are no other thread will be competing with the GC thread to update looseRefs, so you can do the entire thing as one list rebuild. If you fail on the compareAndSet it means something in the loose references did change, as a reader observed a different set of content on disk than you did at the start of GC. That means there are probably some loose references you can\u0027t prune away.\n\nI think it is unlikely the GC thread will be starved here, it should be able to make progress.",
      "revId": "1a91907d255cf0c9c584b68d18ec99cd3c5cf5fe",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}