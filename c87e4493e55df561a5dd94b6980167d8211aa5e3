{
  "comments": [
    {
      "key": {
        "uuid": "b826035b_12046eb2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-11-01T20:31:30Z",
      "side": 1,
      "message": "How did you end up with a git repository not having the objects/pack folder ?\n\nInitialising a new git repository creates that folder:\n\n $ mkdir foo\n $ cd foo/\n $ git init\n Initialized empty Git repository in /Users/xxx/tmp/git/foo/.git/\n $ find .git\n .git\n .git/config\n .git/objects\n .git/objects/pack\n .git/objects/info\n .git/HEAD\n .git/info\n .git/info/exclude\n .git/description\n .git/hooks\n .git/hooks/commit-msg.sample\n .git/hooks/pre-rebase.sample\n .git/hooks/pre-commit.sample\n .git/hooks/applypatch-msg.sample\n .git/hooks/fsmonitor-watchman.sample\n .git/hooks/pre-receive.sample\n .git/hooks/prepare-commit-msg.sample\n .git/hooks/post-update.sample\n .git/hooks/pre-merge-commit.sample\n .git/hooks/pre-applypatch.sample\n .git/hooks/pre-push.sample\n .git/hooks/update.sample\n .git/refs\n .git/refs/heads\n .git/refs/tags",
      "revId": "c87e4493e55df561a5dd94b6980167d8211aa5e3",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acc44a92_6f59de44",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 255395
      },
      "writtenOn": "2020-11-02T08:48:58Z",
      "side": 1,
      "message": "1. Someone creates a sample git repository and commits it to other mercurial/git repository.\n2. Because objects/info and objects/pack folders are empty, that folders aren\u0027t committed.\n3. Second user clones that repository with absent pack/info folders, copies sample git repository and starts to use it as a starting point. Successfully creates commits etc.\n4. If that user invokes git.gc() with jgit, it fails. If runs git gc in console, the \"pack\" folder is created.\n\nSometimes we don\u0027t have control how a user creates that repository initially, he/she brings it to us with absent pack folder and jgit fails to gc.",
      "parentUuid": "b826035b_12046eb2",
      "revId": "c87e4493e55df561a5dd94b6980167d8211aa5e3",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "288cbe91_22a40795",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-11-03T22:20:10Z",
      "side": 1,
      "message": "Why don\u0027t you expose the sample repository directly ? This is easier to create and use since it avoids this corruption and reduces the number of steps necessary to use the clone.\n\nWhy should we maintain code and run it on every gc to fix a repository which was corrupted by this funny way of sharing a repository ?",
      "parentUuid": "acc44a92_6f59de44",
      "revId": "c87e4493e55df561a5dd94b6980167d8211aa5e3",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fe23602_887269a6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 255395
      },
      "writtenOn": "2020-11-03T22:43:17Z",
      "side": 1,
      "message": "We don\u0027t control initial repository creation we just work with repository that a user brings to us. I just described a possible explanation why this folder can be absent.\n\nWhy do you say that a repository with absent \"pack\" folder is corrupted? Logically empty pack folder and absent pack folder is same. Is that a requirement in some git specs?\n\nWhy console git written on c++ can create absent folder on each gc execution but jgit can\u0027t create it?",
      "parentUuid": "288cbe91_22a40795",
      "revId": "c87e4493e55df561a5dd94b6980167d8211aa5e3",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b00d9d1_3ee88907",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-11-05T00:31:06Z",
      "side": 1,
      "message": "I stand corrected, if native git repairs this we should do the same",
      "parentUuid": "2fe23602_887269a6",
      "revId": "c87e4493e55df561a5dd94b6980167d8211aa5e3",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9f5b340_bd36d21d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-11-05T00:35:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b00d9d1_3ee88907",
      "revId": "c87e4493e55df561a5dd94b6980167d8211aa5e3",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "473a9133_c7b390b4",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java",
        "patchSetId": 1
      },
      "lineNbr": 1169,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-11-05T00:31:06Z",
      "side": 1,
      "message": "this check is unnecessary since it\u0027s done by mkdirs() already",
      "revId": "c87e4493e55df561a5dd94b6980167d8211aa5e3",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7e55492_cb36cca4",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java",
        "patchSetId": 1
      },
      "lineNbr": 1169,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-11-05T00:35:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "473a9133_c7b390b4",
      "revId": "c87e4493e55df561a5dd94b6980167d8211aa5e3",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}