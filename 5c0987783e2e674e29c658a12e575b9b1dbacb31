{
  "comments": [
    {
      "key": {
        "uuid": "78376d32_3b03bedf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 13
      },
      "lineNbr": 22,
      "author": {
        "id": 5
      },
      "writtenOn": "2019-07-17T15:38:59Z",
      "side": 1,
      "message": "When I inspect this change inside Eclipse where I have set the API Baseline to 5.1.1 I get errors like this:\n\nDescription Resource Path Location Type\nThe minor version should be incremented in version 5.1.9, since new APIs have been added since version 5.1.1 MANIFEST.MF /org.eclipse.jgit/META-INF line 6 Version Numbering Problem\n\nLooks like MANIFEST.MF needs to be updated or we ignore this explicitly\n\nThe same thing happens for project \n/org.eclipse.jgit.lfs.server/",
      "revId": "5c0987783e2e674e29c658a12e575b9b1dbacb31",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aaa654b3_25672320",
        "filename": "org.eclipse.jgit.junit/src/org/eclipse/jgit/junit/time/TimeUtil.java",
        "patchSetId": 13
      },
      "lineNbr": 59,
      "author": {
        "id": 5
      },
      "writtenOn": "2019-07-17T15:38:59Z",
      "side": 1,
      "message": "That sentence sounds strange. Maybe something like \"Adjust the lastModified time of a given File by a given offset\". Or \"Set the lastModified time of a given File by adding a given offset to the current lastModified time\"",
      "range": {
        "startLine": 59,
        "startChar": 4,
        "endLine": 59,
        "endChar": 72
      },
      "revId": "5c0987783e2e674e29c658a12e575b9b1dbacb31",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33715d39_8f076b2e",
        "filename": "org.eclipse.jgit.junit/src/org/eclipse/jgit/junit/time/TimeUtil.java",
        "patchSetId": 13
      },
      "lineNbr": 82,
      "author": {
        "id": 5
      },
      "writtenOn": "2019-07-17T15:38:59Z",
      "side": 1,
      "message": "to be consistent s/timestamp/time/\nAlso the javadocs of nio.Files and io.File don\u0027t typically use \u0027timestamp\u0027",
      "range": {
        "startLine": 82,
        "startChar": 25,
        "endLine": 82,
        "endChar": 34
      },
      "revId": "5c0987783e2e674e29c658a12e575b9b1dbacb31",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b933c1e2_0b405694",
        "filename": "org.eclipse.jgit.junit/src/org/eclipse/jgit/junit/time/TimeUtil.java",
        "patchSetId": 13
      },
      "lineNbr": 85,
      "author": {
        "id": 5
      },
      "writtenOn": "2019-07-17T15:38:59Z",
      "side": 1,
      "message": "see above",
      "range": {
        "startLine": 85,
        "startChar": 40,
        "endLine": 85,
        "endChar": 49
      },
      "revId": "5c0987783e2e674e29c658a12e575b9b1dbacb31",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "639afd0f_a18d97ad",
        "filename": "org.eclipse.jgit.junit/src/org/eclipse/jgit/junit/time/TimeUtil.java",
        "patchSetId": 13
      },
      "lineNbr": 87,
      "author": {
        "id": 5
      },
      "writtenOn": "2019-07-17T15:38:59Z",
      "side": 1,
      "message": "see above",
      "range": {
        "startLine": 87,
        "startChar": 41,
        "endLine": 87,
        "endChar": 50
      },
      "revId": "5c0987783e2e674e29c658a12e575b9b1dbacb31",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a09df08e_35d6b943",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java",
        "patchSetId": 13
      },
      "lineNbr": 500,
      "author": {
        "id": 5
      },
      "writtenOn": "2019-07-17T15:38:59Z",
      "side": 1,
      "message": "Just a reminder: We should in a later change clean up this code which uses different variables/fields for seconds and nanoseconds. Since you introduced the usage of a type which has nanosecond granularity we should get rid of these variables and use Instant everywhere. In mightBeRacilyClean(...) and DirCacheEntry constructors.",
      "revId": "5c0987783e2e674e29c658a12e575b9b1dbacb31",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05c3b8bb_08b876cf",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java",
        "patchSetId": 13
      },
      "lineNbr": 428,
      "author": {
        "id": 5
      },
      "writtenOn": "2019-07-17T15:38:59Z",
      "side": 1,
      "message": "what is if entry.getLastModifiedInstant() returns EPOCH. Isn\u0027t that the same as old \u0027entry.getLastModified() \u003d\u003d 0\u0027 and shouldn\u0027t we also set lastModified in this case?",
      "revId": "5c0987783e2e674e29c658a12e575b9b1dbacb31",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4b76782_e05f6128",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java",
        "patchSetId": 13
      },
      "lineNbr": 150,
      "author": {
        "id": 5
      },
      "writtenOn": "2019-07-17T15:38:59Z",
      "side": 1,
      "message": "A constructor taking a smudge Instant would help",
      "range": {
        "startLine": 149,
        "startChar": 49,
        "endLine": 150,
        "endChar": 23
      },
      "revId": "5c0987783e2e674e29c658a12e575b9b1dbacb31",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5fd9664_12f4ee39",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/FileUtils.java",
        "patchSetId": 13
      },
      "lineNbr": 676,
      "author": {
        "id": 5
      },
      "writtenOn": "2019-07-17T15:38:59Z",
      "side": 1,
      "message": "Isn\u0027t it worth a error level trace statement. We should be able to recognize that on a certain system that basic operation leads to a IOException",
      "revId": "5c0987783e2e674e29c658a12e575b9b1dbacb31",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}