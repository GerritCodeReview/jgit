{
  "comments": [
    {
      "key": {
        "uuid": "47cfbb72_e449d487",
        "filename": "org.eclipse.jgit.pgm/src/org/eclipse/jgit/pgm/Merge.java",
        "patchSetId": 2
      },
      "lineNbr": 155,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-12-01T00:04:57Z",
      "side": 1,
      "message": "The \u0027oldHeadId \u003d\u003d null\u0027 case is when merging into an unborn branch. (In the previous review I had thought that was \u0027oldHead \u003d\u003d null\u0027. Sorry for the confusion. I\u0027ll try introducing a well-documented getHead() method to Repository in a separate patch to simplify.\n\nTurns out that MergeCommand has support for that case. It performs a DirCacheCheckout, then a RefUpdate, then returns status FAST_FORWARD. Which brings us here (thanks for catching it).\n\nIn C git, a normal fast-forward merge prints \"Updating %s..%s\" but a fast-forward merge into an unborn branch is silent. To match that, jgit merge could do something like\n\n  if (oldHeadId !\u003d null) {\n    String oldId \u003d oldHeadId.abbreviate(7).name();\n    String newId \u003d result.getNewHead().abbreviate(7).name();\n    outw.println(format(CLIText.get().updating, oldId, newId));\n  }",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 155,
        "endChar": 15
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_5d2facc4",
        "filename": "org.eclipse.jgit.pgm/src/org/eclipse/jgit/pgm/Merge.java",
        "patchSetId": 2
      },
      "lineNbr": 155,
      "author": {
        "id": 1179
      },
      "writtenOn": "2015-12-05T18:25:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47cfbb72_e449d487",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 155,
        "endChar": 15
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47cfbb72_24a73cc6",
        "filename": "org.eclipse.jgit.pgm/src/org/eclipse/jgit/pgm/RevParse.java",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-12-01T00:49:00Z",
      "side": 1,
      "message": "getRefs skips dangling symrefs, so r.getObjectId() should never be null. This could error out:\n\n  ObjectId id \u003d r.getObjectId();\n  if (id \u003d\u003d null) {\n    throw new AssertionError(\n       String.format(\"getRefs returned unresolved ref %s\", r));\n  }\n  outw.println(id.name());",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 78,
        "endChar": 67
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_7d2470e6",
        "filename": "org.eclipse.jgit.pgm/src/org/eclipse/jgit/pgm/RevParse.java",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1179
      },
      "writtenOn": "2015-12-05T18:25:20Z",
      "side": 1,
      "message": "I haven\u0027t used AssertionError, this seem to be uncommon in jgit. Instead, in the next patch I\u0027ve added assert statements here and in similar code later.",
      "parentUuid": "47cfbb72_24a73cc6",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 78,
        "endChar": 67
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_92e03a44",
        "filename": "org.eclipse.jgit.pgm/src/org/eclipse/jgit/pgm/RevParse.java",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-12-08T00:21:09Z",
      "side": 1,
      "message": "This is an interesting use of assert --- it essentially functions as a comment. It would be helpful to also include a comment explaining why the assertion holds:\n\n // getRefs skips dangling symrefs, so objectId should never be null.\n assert objectId !\u003d null;\n\nThe more general issue with assert is that runtime checking of assertions can be (and often is) disabled. Here we luck out because if a future code change ends up allowing objectId to be null, the objectId.name() call will catch that and throw NPE (good).\n\nBut that general issue with assert makes it tempting to avoid as a pattern anyway (except in code e.g. guarded by an \u0027if\u0027 where a runtime check would definitely not be useful). I suspect that\u0027s part of why jgit uses assert sparingly:\n\n $ git grep --cached -e \u0027assert[ (]\u0027 |wc -l\n 36\n\nIf we want a runtime impossible-condition check, explicitly throwing AssertionError or NPE would be a way to do it (and I suppose that since it\u0027s an impossible condition it wouldn\u0027t need a message):\n\n // getRefs skips dangling symrefs, so objectId should never be null.\n if (objectId \u003d\u003d null) {\n   throw new AssertionError();\n }\n\nOn second thought, since getRefs is a method callers often reimplement, the paranoid check seems worthwhile --- this is what e.g. http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Verify.html is for. It\u0027s redundant but good protection in case the code changes later. We can use NPE instead of VerifyException.\n\n // getRefs skips dangling symrefs, so objectId should never be null.\n if (objectId \u003d\u003d null) {\n   throw new NullPointerException();\n }",
      "parentUuid": "27d6470d_7d2470e6",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 78,
        "endChar": 67
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_2350ed28",
        "filename": "org.eclipse.jgit.pgm/src/org/eclipse/jgit/pgm/RevParse.java",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-12-15T00:00:43Z",
      "side": 1,
      "message": "ping",
      "parentUuid": "27d6470d_92e03a44",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 78,
        "endChar": 67
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_438fb1b4",
        "filename": "org.eclipse.jgit.pgm/src/org/eclipse/jgit/pgm/RevParse.java",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1179
      },
      "writtenOn": "2015-12-15T07:58:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "27d6470d_92e03a44",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 78,
        "endChar": 67
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47cfbb72_64b144fb",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutCommand.java",
        "patchSetId": 2
      },
      "lineNbr": 341,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-12-01T00:49:00Z",
      "side": 1,
      "message": "The objectId \u003d\u003d null case should not be possible. Could simplify by making the code match the intent more directly:\n\n  if (headRef.isSymbolic()) {\n    return Repository.shortenRefName(headRef.getTarget().getName());\n  }\n\n  // detached HEAD\n  ObjectId id \u003d headRef.getObjectId();\n  if (id \u003d\u003d null) {\n    throw new AssertionError(\n      String.format(\"HEAD is neither a symref nor an ObjectIdRef: %s\", headRef));\n  }\n  return id.getName();",
      "range": {
        "startLine": 334,
        "startChar": 0,
        "endLine": 341,
        "endChar": 53
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_9d2934c0",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutCommand.java",
        "patchSetId": 2
      },
      "lineNbr": 341,
      "author": {
        "id": 1179
      },
      "writtenOn": "2015-12-05T18:25:20Z",
      "side": 1,
      "message": "Similar to the previous case, I\u0027ve added an assert here.",
      "parentUuid": "47cfbb72_64b144fb",
      "range": {
        "startLine": 334,
        "startChar": 0,
        "endLine": 341,
        "endChar": 53
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_d2eac221",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutCommand.java",
        "patchSetId": 2
      },
      "lineNbr": 341,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-12-08T00:21:09Z",
      "side": 1,
      "message": "Nice --- this is a lot clearer than the code in the base version.\n\nSame thought re defensive programming:\n\n // Detached HEAD. Every non-symbolic ref in the ref database has an\n // object id, so this cannot be null.\n ObjectId id \u003d headRef.getObject();\n if (id \u003d\u003d null) {\n   throw new NullPointerException();\n }\n return id.getName();",
      "parentUuid": "27d6470d_9d2934c0",
      "range": {
        "startLine": 334,
        "startChar": 0,
        "endLine": 341,
        "endChar": 53
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_033cc9ea",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutCommand.java",
        "patchSetId": 2
      },
      "lineNbr": 341,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-12-15T00:00:43Z",
      "side": 1,
      "message": "ping",
      "parentUuid": "27d6470d_d2eac221",
      "range": {
        "startLine": 334,
        "startChar": 0,
        "endLine": 341,
        "endChar": 53
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_8389b9af",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutCommand.java",
        "patchSetId": 2
      },
      "lineNbr": 341,
      "author": {
        "id": 1179
      },
      "writtenOn": "2015-12-15T07:58:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "27d6470d_d2eac221",
      "range": {
        "startLine": 334,
        "startChar": 0,
        "endLine": 341,
        "endChar": 53
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47cfbb72_04a238ad",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseCommand.java",
        "patchSetId": 2
      },
      "lineNbr": 564,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-12-01T00:49:00Z",
      "side": 1,
      "message": "unnecessary parens.\n\nI wonder if a getHeadId(Ref) helper would make sense (e.g. tryFastForward also does the same call-getHead().getObjectId()-and-examine-the-result thing).",
      "range": {
        "startLine": 564,
        "startChar": 0,
        "endLine": 564,
        "endChar": 27
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_bd1d189d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseCommand.java",
        "patchSetId": 2
      },
      "lineNbr": 564,
      "author": {
        "id": 1179
      },
      "writtenOn": "2015-12-05T18:25:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47cfbb72_04a238ad",
      "range": {
        "startLine": 564,
        "startChar": 0,
        "endLine": 564,
        "endChar": 27
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_f2cee6d8",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseCommand.java",
        "patchSetId": 2
      },
      "lineNbr": 564,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-12-08T00:21:09Z",
      "side": 1,
      "message": "Thanks.\n\nUnlike the other examples, this is safe since the code that guarantees the assertion is our own code (so use of assert here is uncontroversial).",
      "parentUuid": "27d6470d_bd1d189d",
      "range": {
        "startLine": 564,
        "startChar": 0,
        "endLine": 564,
        "endChar": 27
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47cfbb72_248e5c3e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseCommand.java",
        "patchSetId": 2
      },
      "lineNbr": 680,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-12-01T00:49:00Z",
      "side": 1,
      "message": "likewise",
      "range": {
        "startLine": 680,
        "startChar": 0,
        "endLine": 680,
        "endChar": 26
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_dd1adca1",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseCommand.java",
        "patchSetId": 2
      },
      "lineNbr": 680,
      "author": {
        "id": 1179
      },
      "writtenOn": "2015-12-05T18:25:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47cfbb72_248e5c3e",
      "range": {
        "startLine": 680,
        "startChar": 0,
        "endLine": 680,
        "endChar": 26
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47cfbb72_848d6840",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseCommand.java",
        "patchSetId": 2
      },
      "lineNbr": 1201,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-12-01T00:49:00Z",
      "side": 1,
      "message": "likewise",
      "range": {
        "startLine": 1201,
        "startChar": 0,
        "endLine": 1201,
        "endChar": 27
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_fd17a076",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseCommand.java",
        "patchSetId": 2
      },
      "lineNbr": 1201,
      "author": {
        "id": 1179
      },
      "writtenOn": "2015-12-05T18:25:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47cfbb72_848d6840",
      "range": {
        "startLine": 1201,
        "startChar": 0,
        "endLine": 1201,
        "endChar": 27
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47cfbb72_24f9fc8e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java",
        "patchSetId": 2
      },
      "lineNbr": 492,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-12-01T00:49:00Z",
      "side": 1,
      "message": "Objects.equals? (e.g.\n\n  return Objects.equals(r1.getObjectId(), r2.getObjectId());\n\n) FWIW neither object id should be null here because these are non-symbolic refs from the ref database.",
      "range": {
        "startLine": 488,
        "startChar": 0,
        "endLine": 492,
        "endChar": 16
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_1d15246f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java",
        "patchSetId": 2
      },
      "lineNbr": 492,
      "author": {
        "id": 1179
      },
      "writtenOn": "2015-12-05T18:25:20Z",
      "side": 1,
      "message": "sure.",
      "parentUuid": "47cfbb72_24f9fc8e",
      "range": {
        "startLine": 488,
        "startChar": 0,
        "endLine": 492,
        "endChar": 16
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47cfbb72_84080837",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 2
      },
      "lineNbr": 1132,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-12-01T00:49:00Z",
      "side": 1,
      "message": "The only caller is LooseUnpeeled, which uses a non-null id",
      "range": {
        "startLine": 1132,
        "startChar": 0,
        "endLine": 1132,
        "endChar": 28
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_3d558826",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 2
      },
      "lineNbr": 1132,
      "author": {
        "id": 1179
      },
      "writtenOn": "2015-12-05T18:25:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47cfbb72_84080837",
      "range": {
        "startLine": 1132,
        "startChar": 0,
        "endLine": 1132,
        "endChar": 28
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47cfbb72_6403041b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 2
      },
      "lineNbr": 1151,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-12-01T00:49:00Z",
      "side": 1,
      "message": "All callers use a non-null id",
      "range": {
        "startLine": 1151,
        "startChar": 0,
        "endLine": 1151,
        "endChar": 28
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_5d5a4c57",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 2
      },
      "lineNbr": 1151,
      "author": {
        "id": 1179
      },
      "writtenOn": "2015-12-05T18:25:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47cfbb72_6403041b",
      "range": {
        "startLine": 1151,
        "startChar": 0,
        "endLine": 1151,
        "endChar": 28
      },
      "revId": "114eb502530155fb2e98544c8baf0961174351de",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}