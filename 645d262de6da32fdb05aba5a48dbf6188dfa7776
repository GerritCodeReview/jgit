{
  "comments": [
    {
      "key": {
        "uuid": "AAAL13///0w\u003d",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CheckoutCommandTest.java",
        "patchSetId": 3
      },
      "lineNbr": 136,
      "author": {
        "id": 4
      },
      "writtenOn": "2010-12-20T15:28:07Z",
      "side": 1,
      "message": "this assertion fails on Mac OS X using HFS",
      "revId": "645d262de6da32fdb05aba5a48dbf6188dfa7776",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAL2H////4\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutResult.java",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-12-20T17:51:41Z",
      "side": 1,
      "message": "I really don\u0027t think File was the right type to use here.  The list of paths that conflict should be relative to the root of the working tree, because that is what the UI will want to show the user.\n\nIf the UI needs the java.io.File, that\u0027s a simple matter of joining the String with the root of the working tree.\n\nHere by returning java.io.File we can now technically return any path object, one that might not even be prefixed by the working tree root, but is still within it.  Consider if the working tree root is actually resolved via a symlink... here we might return the canonical path and not the logical path.\n\n*sigh*\n\nWe sort-of need the NIO2 Path object.  Maybe we should be implementing something like it for these working tree paths instead of relying on String or File.",
      "revId": "645d262de6da32fdb05aba5a48dbf6188dfa7776",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAL2H////w\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutResult.java",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 46
      },
      "writtenOn": "2010-12-20T18:13:51Z",
      "side": 1,
      "message": "Actually, it was just forwarding the paths (as String) from DirCacheCheckout in my first iteration of this... Matthias Sohn then suggested to change it to File instead. Your comments make a lot of sense, so I guess we should change it back, right?",
      "parentUuid": "AAAL2H////4\u003d",
      "revId": "645d262de6da32fdb05aba5a48dbf6188dfa7776",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAL2H////o\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutResult.java",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-12-20T19:25:23Z",
      "side": 1,
      "message": "Probably.  I don\u0027t think File is the right type for our working tree paths.  Its too easily cast into an absolute or canonical path that then might no longer be part of the working tree.\n\nWe\u0027ve had trouble with that in EGit, and its why we have funny methods to convert a File into a String for a given RepositoryMapping.  (Its been a while since I looked at that code, so I might not be remembering it exactly.)\n\nIf we want the getParentFile() sort of support here, we probably should just introduce a JGit Path type that we can use for these working tree paths.  If we can get by without it, String is probably fine then.",
      "parentUuid": "AAAL2H////w\u003d",
      "revId": "645d262de6da32fdb05aba5a48dbf6188dfa7776",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}