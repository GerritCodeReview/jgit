{
  "comments": [
    {
      "key": {
        "uuid": "07b223f6_fc93fcac",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/GarbageCollectCommand.java",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 5
      },
      "writtenOn": "2016-09-20T15:46:12Z",
      "side": 1,
      "message": "we should mention this method is not supported on all repo types. Only FileRepositories support this, or?",
      "revId": "34c92bedb9e927b5ba6454421bc909344bc9b4f2",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07b223f6_3cf9f441",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 5
      },
      "writtenOn": "2016-09-20T15:46:12Z",
      "side": 1,
      "message": "This method has changed behaviour and we should document that. Before it was nearly always creating new packfiles and returning them. But now this method is more lazy and  will not create new packs whenever there are loose objects. We should mention the effect of \"automatic\" on this method, especially because the the default for \"automatic\" is \"true\"",
      "revId": "34c92bedb9e927b5ba6454421bc909344bc9b4f2",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07b223f6_dc6f1872",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java",
        "patchSetId": 2
      },
      "lineNbr": 1104,
      "author": {
        "id": 5
      },
      "writtenOn": "2016-09-20T15:46:12Z",
      "side": 1,
      "message": "we should explain what happens if setAuto(false) is called.",
      "revId": "34c92bedb9e927b5ba6454421bc909344bc9b4f2",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07b223f6_1c2ef045",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java",
        "patchSetId": 2
      },
      "lineNbr": 1107,
      "author": {
        "id": 5
      },
      "writtenOn": "2016-09-20T15:46:12Z",
      "side": 1,
      "message": "or too many refs. As a side effect of packing loose objects also the refs pointing to them will be persisted in a  packed-refs file. That can have nice effect on performance on servers with a lot of refs (like gerrit)",
      "revId": "34c92bedb9e927b5ba6454421bc909344bc9b4f2",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07b223f6_3c5d74c2",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java",
        "patchSetId": 2
      },
      "lineNbr": 1138,
      "author": {
        "id": 5
      },
      "writtenOn": "2016-09-20T15:46:12Z",
      "side": 1,
      "message": "I think JGit does -d always. We delete old packs and prune loose objects after creating the new pack.\n\n-l is an option which we indeed don\u0027t support although we support alternate objects stores.",
      "revId": "34c92bedb9e927b5ba6454421bc909344bc9b4f2",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07b223f6_9cb76072",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java",
        "patchSetId": 2
      },
      "lineNbr": 1147,
      "author": {
        "id": 5
      },
      "writtenOn": "2016-09-20T15:46:12Z",
      "side": 1,
      "message": "shouldn\u0027t 50 be a constant?",
      "range": {
        "startLine": 1147,
        "startChar": 46,
        "endLine": 1147,
        "endChar": 48
      },
      "revId": "34c92bedb9e927b5ba6454421bc909344bc9b4f2",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07b223f6_7cb28c7c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java",
        "patchSetId": 2
      },
      "lineNbr": 1150,
      "author": {
        "id": 5
      },
      "writtenOn": "2016-09-20T15:46:12Z",
      "side": 1,
      "message": "maybe we need a special case here. Imagine somebody with native git experience configures autopacklimit\u003d\u003d1 do have always one single pack. But JGit behaves differently when doing GC by producing more than one packfile by default. One for the objects reachable from branches and the other for the rest. Maybe for JGit it doesn\u0027t make sense to configure autopacklimit\u003d\u003d1.",
      "revId": "34c92bedb9e927b5ba6454421bc909344bc9b4f2",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07b223f6_9c9e80ea",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java",
        "patchSetId": 2
      },
      "lineNbr": 1162,
      "author": {
        "id": 5
      },
      "writtenOn": "2016-09-20T15:46:12Z",
      "side": 1,
      "message": "a constant?",
      "range": {
        "startLine": 1162,
        "startChar": 37,
        "endLine": 1162,
        "endChar": 41
      },
      "revId": "34c92bedb9e927b5ba6454421bc909344bc9b4f2",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07b223f6_5cd9489b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceivePack.java",
        "patchSetId": 2
      },
      "lineNbr": 282,
      "author": {
        "id": 5
      },
      "writtenOn": "2016-09-20T15:46:12Z",
      "side": 1,
      "message": "should we really start import org.eclipse.jgit.api.* and wrapping repositories just to call gc? The api command will additionally deal with returning statistics which is unneeded here. The only thing where we benefit is that the api GarbageCollectCommand does the instanceof magic to instantiate the right gc class. We should have a single factory method producing the right GC class for a repository and then we can skip the need to wrap repository classes",
      "revId": "34c92bedb9e927b5ba6454421bc909344bc9b4f2",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07b223f6_dcb7183f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/Transport.java",
        "patchSetId": 2
      },
      "lineNbr": 1219,
      "author": {
        "id": 5
      },
      "writtenOn": "2016-09-20T15:46:12Z",
      "side": 1,
      "message": "same as in previous class. Why wrap Repository instances if you only want to call gc.",
      "revId": "34c92bedb9e927b5ba6454421bc909344bc9b4f2",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}