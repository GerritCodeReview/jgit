{
  "comments": [
    {
      "key": {
        "uuid": "AABOGH///kQ\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceivePack.java",
        "patchSetId": 3
      },
      "lineNbr": 593,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-03-01T00:50:30Z",
      "side": 1,
      "message": "Maybe what we should do is export an OutputStream the caller can ask for:\n\n  OutputStream getSidebandOutputStream() {\n    if (msgOut \u003d\u003d null)\n      return NullOutputStream.INSTANCE;\n    return new FilterOutputStream(msgOut) {  \n      public void close() {}\n    };\n  }\n\nThis way they can also control flush behavior and force the underlying side band to flush. Right now I think the messages get stuck in the side band buffer and don\u0027t head out to the client until its either full, or \"later\" when ReceivePack forces a flush at the end.",
      "revId": "ea08db5e1daa8e8d017ba9182f2a15b5ef6582d3",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOGH///jw\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceivePack.java",
        "patchSetId": 3
      },
      "lineNbr": 593,
      "author": {
        "id": 383
      },
      "writtenOn": "2012-03-01T00:57:53Z",
      "side": 1,
      "message": "I agree that this will probably get buffered and should be fixed.\n\nThis interacts weirdly with the way msgOut changes over ReceivePack\u0027s lifetime. msgOut starts out as null, then gets set at the beginning of receive(), and gets reset as soon as it determines the client wants a sideband.\n\nWhich is not to say it\u0027s impossible. It\u0027s just that if a caller calls getSidebandOutputStream() followed by receive(), they might reasonably expect there to be a relationship between the stream returned by the former and the stream actually used by the latter.",
      "parentUuid": "AABOGH///kQ\u003d",
      "revId": "ea08db5e1daa8e8d017ba9182f2a15b5ef6582d3",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOGH///jY\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceivePack.java",
        "patchSetId": 3
      },
      "lineNbr": 593,
      "author": {
        "id": 383
      },
      "writtenOn": "2012-03-01T01:07:45Z",
      "side": 1,
      "message": "That said, note that this buffering behavior is already present and not changing due to this change.\n\nIn my downstream work I\u0027m not using sendBytes (except where sendMessage was already being used), so I don\u0027t think this is an issue. If you think otherwise after seeing my downstream code, let me know.",
      "parentUuid": "AABOGH///jw\u003d",
      "revId": "ea08db5e1daa8e8d017ba9182f2a15b5ef6582d3",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOGH///ig\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceivePack.java",
        "patchSetId": 3
      },
      "lineNbr": 593,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-03-01T01:22:41Z",
      "side": 1,
      "message": "I didn\u0027t say get rid of the buffering entirely. I just suggested making flush available so the caller could get to flush and force output of the buffer if they wanted to.",
      "parentUuid": "AABOGH///jY\u003d",
      "revId": "ea08db5e1daa8e8d017ba9182f2a15b5ef6582d3",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOGH///ik\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceivePack.java",
        "patchSetId": 3
      },
      "lineNbr": 593,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-03-01T01:22:41Z",
      "side": 1,
      "message": "Don\u0027t use a FilterOutputStream. Implement the output yourself:\n\n  public OutputStream getSidebandOutputStream() {\n    return new OutputStream() {\n      public void write(int ch) {\n        if (msgOut !\u003d null)\n          msgOut.write(ch);\n      }\n      public void write(byte[] buf, int pos, int len) {\n        if (msgOut !\u003d null)\n          msgOut.write(buf, pos, len);\n      }\n      public void flush() {\n        if (msgOut !\u003d null)\n          msgOut.flush();\n      }\n    };\n  }\n\nDone.",
      "parentUuid": "AABOGH///jw\u003d",
      "revId": "ea08db5e1daa8e8d017ba9182f2a15b5ef6582d3",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOGH///hQ\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceivePack.java",
        "patchSetId": 3
      },
      "lineNbr": 593,
      "author": {
        "id": 383
      },
      "writtenOn": "2012-03-01T01:55:46Z",
      "side": 1,
      "message": "I\u0027ll try that. Should those methods be synchronized, or is that too paranoid? Paranoid because e.g. if the caller is a PreReceiveHook, obviously they won\u0027t be calling methods on the returned output stream until msgOut has settled into its final state.",
      "parentUuid": "AABOGH///ik\u003d",
      "revId": "ea08db5e1daa8e8d017ba9182f2a15b5ef6582d3",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOGH///hI\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceivePack.java",
        "patchSetId": 3
      },
      "lineNbr": 593,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-03-01T02:06:15Z",
      "side": 1,
      "message": "Too parnaoid. Don\u0027t synchronize. The caller is responsible for using synchronization here if they are swapping stuff back and forth across threads. Most of JGit is not thread safe. There are a few special places that are (e.g. Repository, ObjDatabase, RefDatabase) that makes the rest not being thread safe actually OK for any common usage. Fancier things that are starting their own threads are on their own.",
      "revId": "ea08db5e1daa8e8d017ba9182f2a15b5ef6582d3",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}