{
  "comments": [
    {
      "key": {
        "uuid": "AAAL33///7o\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1
      },
      "writtenOn": "2011-03-28T14:15:42Z",
      "side": 1,
      "message": "Is the .git folder always the easiest path to give here? I would expect applications to want to pass something like new File(\".\") and have us automatically get the repository for the current working directory. Which starts to imply using a FileRepositoryBuilder here rather than assuming the argument is exactly the $GIT_DIR.",
      "revId": "b0ea47b4d1f12edbfde7a90ab329bc1877bbcf2c",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAL33///zo\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 5
      },
      "writtenOn": "2011-03-29T10:59:17Z",
      "side": 1,
      "message": "Hmmm, you are right. The logic which you miss is already there in Git.init().setDirectory(...).call().\nBut then: why do I need this constructor if InitCommand does everything? I will abandon this one.",
      "parentUuid": "AAAL33///7o\u003d",
      "revId": "b0ea47b4d1f12edbfde7a90ab329bc1877bbcf2c",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAL33///yw\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1
      },
      "writtenOn": "2011-03-29T14:04:40Z",
      "side": 1,
      "message": "Using Git.init().setDirectory().call() to obtain a Git instance from a File is awkward at best.\n\nI think we should do:\n\n  public static Git open(File path) {\n    return Git.init().setDirectory(path).call();\n  }\n\n  public static Git wrap(Repository repo) {\n    return new Git(repo);\n  }\n\nin this class.",
      "parentUuid": "AAAL33///zo\u003d",
      "revId": "b0ea47b4d1f12edbfde7a90ab329bc1877bbcf2c",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAL33///yo\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 5
      },
      "writtenOn": "2011-03-29T14:35:48Z",
      "side": 1,
      "message": "I also like open() and wrap() because they express nicely the side-effects (you would not expect any git repo creation in this case). I like them as static methods (and not as commands) because there is no real equivalent for such op\u0027s in native git command line.\n\nBut when you really want to create a new git repo in an empty dir on the filesystem I think going through git.init()... is quite consistent - that\u0027s what I would do with native git. Therefore I personally would like to add a check to open() to make sure the repo does not yet exist.\n\nI\u0027ll suggest something like that in a new change",
      "parentUuid": "AAAL33///yw\u003d",
      "revId": "b0ea47b4d1f12edbfde7a90ab329bc1877bbcf2c",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}