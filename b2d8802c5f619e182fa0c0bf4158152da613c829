{
  "comments": [
    {
      "key": {
        "uuid": "AAALuX///+A\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java",
        "patchSetId": 5
      },
      "lineNbr": 150,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-04-28T16:55:56Z",
      "side": 1,
      "message": "I like the idea of not marking it executed until its successful.",
      "revId": "b2d8802c5f619e182fa0c0bf4158152da613c829",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALuX///9w\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java",
        "patchSetId": 5
      },
      "lineNbr": 150,
      "author": {
        "id": 5
      },
      "writtenOn": "2010-04-28T20:50:30Z",
      "side": 1,
      "message": "yes, I also. That\u0027s what I am trying to do here - mark it just before the return.",
      "parentUuid": "AAALuX///+A\u003d",
      "revId": "b2d8802c5f619e182fa0c0bf4158152da613c829",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALuX///+I\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java",
        "patchSetId": 5
      },
      "lineNbr": 152,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-04-28T16:55:56Z",
      "side": 1,
      "message": "Its not just LOCK_FAILURE.  There\u0027s also REJECTED, which means someone else committed to the branch between when we read it above, and now when we try to update it.\n\nBut I think that\u0027s it, all of the other states are internal exceptions.",
      "revId": "b2d8802c5f619e182fa0c0bf4158152da613c829",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALuX///+E\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java",
        "patchSetId": 5
      },
      "lineNbr": 158,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-04-28T16:55:56Z",
      "side": 1,
      "message": "We probably should include the status here.  Its nice to know NO_CHANGE (should be nearly impossible) from IO_EXCEPTION when a user reports a problem.  These are different errors that we\u0027d suggest looking at different things for.",
      "revId": "b2d8802c5f619e182fa0c0bf4158152da613c829",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALuX///9o\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java",
        "patchSetId": 5
      },
      "lineNbr": 158,
      "author": {
        "id": 5
      },
      "writtenOn": "2010-04-28T20:50:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAALuX///+E\u003d",
      "revId": "b2d8802c5f619e182fa0c0bf4158152da613c829",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALuX///+o\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/ConcurrentRefUpdateException.java",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-04-28T16:55:56Z",
      "side": 1,
      "message": "Since we know exactly what reference was the problem, and what the underlying RefUpdate.Result was at the time we create this exception, should we expose those as fields so the caller can inspect the failure if they care to know?  And if they don\u0027t then they can just rely on the message string.\n\nOr maybe exposing that is too much information.  I don\u0027t really know.",
      "revId": "b2d8802c5f619e182fa0c0bf4158152da613c829",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALuX///94\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java",
        "patchSetId": 5
      },
      "lineNbr": 90,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-04-28T16:55:56Z",
      "side": 1,
      "message": "If our setters in commands are going to fail-fast about single-execution, we should fail-fast here too about a null pointer being passed in for Repository.  NPE right away in the constructor rather than deferred:\n\n  Git git \u003d new Git(null);\n  git.commit().setMessage(\"Test\").call()\n\nWe should NPE on the first line of that, not the second.",
      "revId": "b2d8802c5f619e182fa0c0bf4158152da613c829",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALuX///+k\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/GitCommand.java",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-04-28T16:55:56Z",
      "side": 1,
      "message": "Shouldn\u0027t this be final?",
      "revId": "b2d8802c5f619e182fa0c0bf4158152da613c829",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALuX///+Y\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/GitCommand.java",
        "patchSetId": 5
      },
      "lineNbr": 71,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-04-28T16:55:56Z",
      "side": 1,
      "message": "Are we ever going to use this for something other than \"already executed\"?  I can\u0027t see how we would want to.  So I wonder if this shouldn\u0027t be named more explicitly than just \"state\".  Perhaps call it \"called\", but invert the value, so it defaults to false, and checkState() requires it to be false, and setCalled() can be called to set it to true?",
      "revId": "b2d8802c5f619e182fa0c0bf4158152da613c829",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALuX///9Y\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/GitCommand.java",
        "patchSetId": 5
      },
      "lineNbr": 71,
      "author": {
        "id": 5
      },
      "writtenOn": "2010-04-28T20:50:30Z",
      "side": 1,
      "message": "This property had in his small history half a dozen names (always a bad sign, right?). \"invoked\", \"invocationAllowed\" .... But finally I decided to be very generic and don\u0027t tie myself here to invocation counting. Two reasons: With this naming I can describe the functionality of this class without making assumptions about the subclasses. I know that every subclass must have a call method but I don\u0027t know how many other methods exists. Some of them may call checkState(), some not (e.g. getter methods in the subclasses).\n\nAnother reason: maybe, someday, we\u0027ll have other situations detected in subclasses which make the command \"uncallable\". I would like to be open to this.",
      "parentUuid": "AAALuX///+Y\u003d",
      "revId": "b2d8802c5f619e182fa0c0bf4158152da613c829",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}