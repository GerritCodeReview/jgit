{
  "comments": [
    {
      "key": {
        "uuid": "34e57b85_5d1b2f7c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java",
        "patchSetId": 2
      },
      "lineNbr": 542,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-08-16T12:38:51Z",
      "side": 1,
      "message": "Can we extract this logic working around bug 565707 which seems to be caused by bugs in z/OS and NonStop JVM ports to a helper method which is only used on these platforms ?",
      "revId": "2ad20347bcef0860fda817900f1db6e631c660d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d99d2c40_21e04f63",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java",
        "patchSetId": 2
      },
      "lineNbr": 542,
      "author": {
        "id": 44628
      },
      "writtenOn": "2020-08-16T15:52:46Z",
      "side": 1,
      "message": "1. I don\u0027t know how to detect these platforms.\n2. The code here is correct in general on all platforms. I don\u0027t see a problem with using it on all platforms.\n3. The other critical place would be LockFile.waitForStatChange(). That uses Files.setLastModifiedTime(Instant.now()), which _may_ have sub-milli resolution, but probably doesn\u0027t on these platforms.\n4. FileUtils.setLastModifiedTime() is specified to modify the time of the link if the path is a symlink. I don\u0027t know for sure, but I suspect File.setLastModified() might change the timestamp of the link target?",
      "parentUuid": "34e57b85_5d1b2f7c",
      "revId": "2ad20347bcef0860fda817900f1db6e631c660d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2b92539_381eba41",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java",
        "patchSetId": 2
      },
      "lineNbr": 542,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-08-16T22:05:53Z",
      "side": 1,
      "message": "1. yep, also don\u0027t know, I have no access to these platforms\n2. ok\n3. I think that\u0027s used in RefDirectory.commitPackedRefs to ensure a newly written packed-refs file doesn\u0027t look racily clean compared to its former state\n4. FileUtils doesn\u0027t have a method setLastModifiedTime(), it has setLastModified(Instant) which delegates to Files.setLastModifiedTime(). I tried and found that both Files.setLastModifiedTime() and File.setLastModified() when called on a symlink set the timestamp of the link target:\n\npackage test;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.attribute.FileTime;\nimport java.time.Instant;\n\npublic class FileTimestamps {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tPath testdir \u003d Files.createTempDirectory(\"test\");\n\n\t\tPath f1 \u003d Files.createTempFile(testdir, \"file1_\", \"test\");\n\t\tPath linkPath1 \u003d testdir.resolve(\"link1\");\n\t\tPath l1 \u003d Files.createSymbolicLink(linkPath1, f1);\n\t\tl1.toFile().setLastModified(0);\n\n\t\tPath f2 \u003d Files.createTempFile(testdir, \"file2_\", \"test\");\n\t\tPath linkPath2 \u003d testdir.resolve(\"link2\");\n\t\tPath l2 \u003d Files.createSymbolicLink(linkPath2, f2);\n\t\tFiles.setLastModifiedTime(l2, FileTime.from(Instant.EPOCH));\n\t\tSystem.out.println(\"done\");\n\t}\n\n}\n\nI debugged this on Mac, stopped on a breakpoint in the last line and checked in the file system:\n\ntest779924900212705200]$ ls -al\ntotal 0\ndrwx------   6 user staff  192 Aug 16 23:57 .\ndrwx------ 142 user staff 4544 Aug 16 23:57 ..\n-rw-------   1 user staff    0 Jan  1  1970 file1_97777409364211114test\n-rw-------   1 user staff    0 Jan  1  1970 file2_2274823892018540160test\nlrwxr-xr-x   1 user staff   99 Aug 16 23:57 link1 -\u003e /var/folders/16/nqvdxf5s45309nxkv4k4r20r0000gq/T/test779924900212705200/file1_97777409364211114test\nlrwxr-xr-x   1 user staff  101 Aug 16 23:57 link2 -\u003e /var/folders/16/nqvdxf5s45309nxkv4k4r20r0000gq/T/test779924900212705200/file2_2274823892018540160test",
      "parentUuid": "d99d2c40_21e04f63",
      "revId": "2ad20347bcef0860fda817900f1db6e631c660d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc8ec618_bce8680c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java",
        "patchSetId": 2
      },
      "lineNbr": 542,
      "author": {
        "id": 44628
      },
      "writtenOn": "2020-08-16T22:22:40Z",
      "side": 1,
      "message": "\u003e 4. FileUtils doesn\u0027t have a method setLastModifiedTime(), it has setLastModified(Instant) which delegates to Files.setLastModifiedTime(). I tried and found that both Files.setLastModifiedTime() and File.setLastModified() when called on a symlink set the timestamp of the link target:\n\nRight; typo of mine. But that means that FS.setLastModified() doesn\u0027t do what its javadoc says: \"If the OS/JRE support symbolic links, the link is modified, not the target,\".",
      "parentUuid": "e2b92539_381eba41",
      "revId": "2ad20347bcef0860fda817900f1db6e631c660d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f50fa62_6d4b3fea",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java",
        "patchSetId": 2
      },
      "lineNbr": 542,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-08-17T07:51:45Z",
      "side": 1,
      "message": "I tried this\n\n Path f3 \u003d Files.createTempFile(testdir, \"file3_\", \"test\");\n Path linkPath3 \u003d testdir.resolve(\"link3\");\n Path l3 \u003d Files.createSymbolicLink(linkPath3, f3);\n BasicFileAttributeView basicView \u003d \n\t\t\t\t  Files.getFileAttributeView(l3, BasicFileAttributeView.class, LinkOption.NOFOLLOW_LINKS);\n basicView.setTimes(FileTime.from(Instant.EPOCH), null, null);\n\nbut this fails with an exception:\n\nException in thread \"main\" java.nio.file.FileSystemException: /var/folders/16/nqvdxf5s45309nxkv4k4r20r0000gq/T/test2509394913659798827/link3: Too many levels of symbolic links or unable to access attributes of symbolic link\n\tat sun.nio.fs.UnixPath.openForAttributeAccess(UnixPath.java:785)\n\tat sun.nio.fs.UnixFileAttributeViews$Basic.setTimes(UnixFileAttributeViews.java:74)\n\tat test.FileTimestamps.main(FileTimestamps.java:31)",
      "parentUuid": "dc8ec618_bce8680c",
      "revId": "2ad20347bcef0860fda817900f1db6e631c660d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    }
  ]
}