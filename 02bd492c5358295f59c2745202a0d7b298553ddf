{
  "comments": [
    {
      "key": {
        "uuid": "c39ab64a_bc8b544c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ObjectDirectory.java",
        "patchSetId": 2
      },
      "lineNbr": 918,
      "author": {
        "id": 5
      },
      "writtenOn": "2019-03-06T08:02:45Z",
      "side": 1,
      "message": "I so often had to fight with racy git problems where two threads managed to update the same file within the same tick of the filesystem clock that I vote against a simple lastmodified check. You mentioned using FileSnapshot which helps a little bit. In this case where we look at Packfiles it is very unlikely that you produce a Packfile with same name (means: same objects included), with different checksum (e.g. compression rate was modified) but with the same file length. So checking that the length has changed could be added as a check.",
      "revId": "02bd492c5358295f59c2745202a0d7b298553ddf",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b45667d1_5fb5a6d0",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ObjectDirectory.java",
        "patchSetId": 2
      },
      "lineNbr": 918,
      "author": {
        "id": 97483
      },
      "writtenOn": "2019-03-06T08:05:51Z",
      "side": 1,
      "message": "Actually, we can directly verify the checksum (last 20 bytes of the file) to be 100% sure.",
      "parentUuid": "c39ab64a_bc8b544c",
      "revId": "02bd492c5358295f59c2745202a0d7b298553ddf",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "111ccbd0_51f1450b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ObjectDirectory.java",
        "patchSetId": 2
      },
      "lineNbr": 918,
      "author": {
        "id": 97483
      },
      "writtenOn": "2019-03-06T08:08:30Z",
      "side": 1,
      "message": "My only doubt is the performance penalty of the check IF the packlist is huge?",
      "parentUuid": "b45667d1_5fb5a6d0",
      "revId": "02bd492c5358295f59c2745202a0d7b298553ddf",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "999caf22_b0297104",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ObjectDirectory.java",
        "patchSetId": 2
      },
      "lineNbr": 918,
      "author": {
        "id": 5
      },
      "writtenOn": "2019-03-06T08:45:49Z",
      "side": 1,
      "message": "Yes, opening the file, seeking to the end and reading the checksum is reliable but maybe too expensive. We can combine the checks to get a fast decision that a packfile is modified\n\n\tfinal String packName \u003d base + PACK.getExtension();\n\tfinal PackFile oldPack \u003d forReuse.remove(packName);\n\tPath packFilePath \u003d packDirectory.toPath().resolve(packName);\n\tBasicFileAttributes attr \u003d Files.readAttributes(packFilePath,\n\t\t\tBasicFileAttributes.class);\n\tif (oldPack !\u003d null\n\t\t\u0026\u0026 oldPack.packLastModified \u003d\u003d attr.lastModifiedTime().toMillis()\n\t\t\u0026\u0026 oldPack.length \u003d\u003d attr.size()\n\t\t\u0026\u0026 compareChecksum(oldPack, packFilePath))\n\t{\n\t\tlist.add(oldPack);\n\t\tcontinue;\n\t}\n\n... but still the decision that the Packfile has not changed would be (too?) slow. Maybe we skip the compareChecksum() test",
      "parentUuid": "111ccbd0_51f1450b",
      "revId": "02bd492c5358295f59c2745202a0d7b298553ddf",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}