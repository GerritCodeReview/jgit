{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d520f7de_518cad65",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 14,
      "author": {
        "id": 5082
      },
      "writtenOn": "2023-03-07T23:34:02Z",
      "side": 1,
      "message": "I believe this paragraph, and its related fix is incorrect since the packerefs file lock is no longer actually held at the time of the packedRefList update. :(",
      "revId": "9c33f7364d41956240818ba12d8b79d5ea846162",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0396903a_99e36608",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 97483
      },
      "writtenOn": "2023-02-16T16:34:17Z",
      "side": 1,
      "message": "I am experiencing packed-refs concurrency issues and looking at the test it doesn\u0027t really test what that only one should pass.",
      "revId": "9c33f7364d41956240818ba12d8b79d5ea846162",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78c312b4_4161dbab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 301453
      },
      "writtenOn": "2023-03-08T01:30:53Z",
      "side": 1,
      "message": "These changes might help with some of the packed-refs concurrency issues:\n\n200220: PackedBatchRefUpdate: Ensure updates are applied on latest packed refs | https://git.eclipse.org/r/c/jgit/jgit/+/200220\n200221: RefDirectory.pack: Only rely on packed refs from disk | https://git.eclipse.org/r/c/jgit/jgit/+/200221",
      "parentUuid": "0396903a_99e36608",
      "revId": "9c33f7364d41956240818ba12d8b79d5ea846162",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "124d36dc_9df77418",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/GcPackRefsTest.java",
        "patchSetId": 7
      },
      "lineNbr": 121,
      "author": {
        "id": 97483
      },
      "writtenOn": "2023-02-16T16:34:17Z",
      "side": 1,
      "message": "This assertion doesn\u0027t do what the code is testing.\n\nIf we want to make sure that *ONLY ONE* succeeds, we should return 1 at L112 and return 0 at L114.\n\nIf both succeed \u003d\u003e the sum is 2 and therefore this assertion fails\nIf only one (or none) succeed \u003d\u003e the sum is 1 or 0",
      "range": {
        "startLine": 121,
        "startChar": 35,
        "endLine": 121,
        "endChar": 52
      },
      "revId": "9c33f7364d41956240818ba12d8b79d5ea846162",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffc54c1c_27eb9eef",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/GcPackRefsTest.java",
        "patchSetId": 7
      },
      "lineNbr": 121,
      "author": {
        "id": 5082
      },
      "writtenOn": "2023-03-08T15:29:05Z",
      "side": 1,
      "message": "The test is fundamentally flawed because GC.packRefs() makes no guarantees of throwing an Exception if it does not pack any refs (see #1). I don\u0027t think there is a good way without modifying GC.packRefs() itself and potentially more jgit internals to report whether it actually packed any refs to make this test reasonably test what it is intending to test. I think as you are pointing out, since the return values in the test are wrong anyway, this test currently only insures that both don\u0027t fail (instead of ensuring that both don\u0027t run)! We could rename it to concurrentOnlyOneFailsPackedRefs() or something like that? Or we could to the aforementioned jgit internal modifications? What would be better?\n\n\n# 1 GC.packRefs() as a for() loop which gathers the loose refs which need to be packed, and then passes them to the RefDirectory.pack() method, however the RefDirectory.pack() methods simply returns if (refs.isEmpty()), and thus will not throw an Exception if the other thread has already packed the loose refs! I believe there are other ways beyond that in which it can avoid throwing an exception also, but that one is the most obvious.",
      "parentUuid": "124d36dc_9df77418",
      "range": {
        "startLine": 121,
        "startChar": 35,
        "endLine": 121,
        "endChar": 52
      },
      "revId": "9c33f7364d41956240818ba12d8b79d5ea846162",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f89aefee_6b055074",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 7
      },
      "lineNbr": 922,
      "author": {
        "id": 5082
      },
      "writtenOn": "2023-03-07T23:34:02Z",
      "side": 1,
      "message": "I believe this paragraph is wrong since despite the comment assertion that the file lock is held, the packerefs file lock is no longer actually held at the time of the packedRefList update, the lck.commit(), which releases the file lock, is done on line 913. This means that the on disk packedrefs file could already have changed by an external actor in another process, and another thread could have re-read that update and updated the in memory copy of packedRefList before the update on line 929 happens, and thus the if() on 931 could fail erroneously.",
      "revId": "9c33f7364d41956240818ba12d8b79d5ea846162",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}