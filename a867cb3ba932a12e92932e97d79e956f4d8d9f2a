{
  "comments": [
    {
      "key": {
        "uuid": "dd34e8d6_53d5cc17",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 4
      },
      "writtenOn": "2018-08-27T23:33:00Z",
      "side": 1,
      "message": "it",
      "range": {
        "startLine": 29,
        "startChar": 32,
        "endLine": 29,
        "endChar": 34
      },
      "revId": "a867cb3ba932a12e92932e97d79e956f4d8d9f2a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "132bc53c_482fb2d1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-09-02T16:28:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dd34e8d6_53d5cc17",
      "range": {
        "startLine": 29,
        "startChar": 32,
        "endLine": 29,
        "endChar": 34
      },
      "revId": "a867cb3ba932a12e92932e97d79e956f4d8d9f2a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b067520e_1e86833b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 4
      },
      "writtenOn": "2018-08-27T23:33:00Z",
      "side": 1,
      "message": "see\nhttps://github.com/git/git/search?q\u003dDIR_NO_GITLINKS\u0026unscoped_q\u003dDIR_NO_GITLINKS\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d436200\nhttps://git.eclipse.org/r/#/c/69882/",
      "revId": "a867cb3ba932a12e92932e97d79e956f4d8d9f2a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4874713_e87f59d7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-09-02T15:15:50Z",
      "side": 1,
      "message": "Yes, I had found the flag, too. I have _not_ found a config key for it, though.",
      "parentUuid": "b067520e_1e86833b",
      "revId": "a867cb3ba932a12e92932e97d79e956f4d8d9f2a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4fc58614_ac7b8353",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/lib/IndexDiffSubmoduleTest.java",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 5
      },
      "writtenOn": "2018-08-27T13:06:47Z",
      "side": 1,
      "message": "Is this correct? Native git does\u0027t report a diff when you have replaced a submodule with a file and specify --ignore-submodules\u003dall . I think you need a if clause similar to the one in line 142.",
      "range": {
        "startLine": 158,
        "startChar": 0,
        "endLine": 162,
        "endChar": 74
      },
      "revId": "a867cb3ba932a12e92932e97d79e956f4d8d9f2a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f0242eb_cfb64653",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/lib/IndexDiffSubmoduleTest.java",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-09-02T15:15:50Z",
      "side": 1,
      "message": "Good question. I don\u0027t know. This test actually succeeds without this change, so it just shows what JGit did before and after the change. Whether that behavior is correct is a different thing...\n\nIf it should indeed not report the modules/submodule path as modified then some logic in IndexDiff would need to be changed.",
      "parentUuid": "4fc58614_ac7b8353",
      "range": {
        "startLine": 158,
        "startChar": 0,
        "endLine": 162,
        "endChar": 74
      },
      "revId": "a867cb3ba932a12e92932e97d79e956f4d8d9f2a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5b83e34_20ad6542",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/lib/IndexDiffSubmoduleTest.java",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-09-02T20:44:34Z",
      "side": 1,
      "message": "BTW, if I do this (replace the submodule directory with a file) and then run \"git status --ignore-submodules\u003dall\", git still reports \"typechange:path\" for the path. (Tried with git 2.13.1.)\n\nSo I think this is actually correct.",
      "parentUuid": "5f0242eb_cfb64653",
      "range": {
        "startLine": 158,
        "startChar": 0,
        "endLine": 162,
        "endChar": 74
      },
      "revId": "a867cb3ba932a12e92932e97d79e956f4d8d9f2a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcfd6110_232351ed",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/lib/IndexDiffSubmoduleTest.java",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 5
      },
      "writtenOn": "2018-09-03T06:51:46Z",
      "side": 1,
      "message": "Really? That\u0027s interesting. That may be a change in native git. My very new version of native git (2.18.0) is behaving like this. Could you try\nthis on your version?\n\n  \u003e git --version\n  git version 2.18.0\n  \u003e git init submodule\n  Initialized empty Git repository in /private/tmp/x/submodule/.git/\n  \u003e cd submodule/\n  \u003e touch fileInSubmodule\n  \u003e git add fileInSubmodule\n  \u003e git commit -m \"add file to submodule\"\n  [master (root-commit) 8a9e189] add file to submodule\n  1 file changed, 0 insertions(+), 0 deletions(-)\n  create mode 100644 fileInSubmodule\n  \u003e cd ..\n  \u003e git init toplevel\n  Initialized empty Git repository in /private/tmp/x/toplevel/.git/\n  \u003e cd toplevel/\n  \u003e git submodule add ../submodule modules/submodule\n  Cloning into \u0027/private/tmp/x/toplevel/modules/submodule\u0027...\n  done.\n  \u003e touch fileInRoot\n  \u003e git add fileInRoot\n  \u003e git commit -m \"add submodule and root file\"\n  [master (root-commit) 5562fab] add submodule and root file\n  3 files changed, 4 insertions(+)\n  create mode 100644 .gitmodules\n  create mode 100644 fileInRoot\n  create mode 160000 modules/submodule\n  \u003e rm -fr modules/submodule\n  \u003e echo \"nonsense\" \u003emodules/submodule\n  \u003e git status\n  On branch master\n  Changes not staged for commit:\n  (use \"git add \u003cfile\u003e...\" to update what will be committed)\n  (use \"git checkout -- \u003cfile\u003e...\" to discard changes in working directory)\n  \n  typechange: modules/submodule\n  \n  no changes added to commit (use \"git add\" and/or \"git commit -a\")\n  \u003e git status --ignore-submodules\u003dall\n  On branch master\n  nothing to commit, working tree clean\n  \u003e",
      "parentUuid": "e5b83e34_20ad6542",
      "range": {
        "startLine": 158,
        "startChar": 0,
        "endLine": 162,
        "endChar": 74
      },
      "revId": "a867cb3ba932a12e92932e97d79e956f4d8d9f2a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20ffa393_a45f8886",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/lib/IndexDiffSubmoduleTest.java",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-09-03T19:45:02Z",
      "side": 1,
      "message": "You\u0027re right. Also with git 2.13.1. I forgot to init the submodule. And without the init, it\u0027s a normal TREE-FILE mode conflict, which of course is always reported.\n\nAnyway: this behavior of JGit is _unchanged_ by this change. The fix would need to be in IndexDiff, line 512ff.[1]\n\n[1] https://git.eclipse.org/r/plugins/gitiles/jgit/jgit/+/master/org.eclipse.jgit/src/org/eclipse/jgit/lib/IndexDiff.java#512\n\nThe condition there triggers when either of index or working tree is not a GITLINK. I guess that should be instead (pseudo-code)\n\n  (index !\u003d GITLINK \u0026\u0026 workingtree !\u003d GITLINK)\n  || (ignoreSubmodules !\u003d ALL \u0026\u0026 ignoreSubmodules !\u003d DIRTY)\n\nBut that would be a fix unrelated to this change, and would need more testing anyway. (For instance, before fixing this, I\u0027d also like to verify what git reports when I replace a FILE by a GITLINK.)\n\nI\u0027ve filed follow-up bug 538563 for this.",
      "parentUuid": "bcfd6110_232351ed",
      "range": {
        "startLine": 158,
        "startChar": 0,
        "endLine": 162,
        "endChar": 74
      },
      "revId": "a867cb3ba932a12e92932e97d79e956f4d8d9f2a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc5b810f_a8bb674e",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/lib/IndexDiffSubmoduleTest.java",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-09-10T11:03:56Z",
      "side": 1,
      "message": "\u003e I\u0027ve filed follow-up bug 538563 for this.\n\nSee follow-up in https://git.eclipse.org/r/#/c/128953/ .",
      "parentUuid": "20ffa393_a45f8886",
      "range": {
        "startLine": 158,
        "startChar": 0,
        "endLine": 162,
        "endChar": 74
      },
      "revId": "a867cb3ba932a12e92932e97d79e956f4d8d9f2a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6e46f1b_32035922",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/util/PathsTest.java",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 5
      },
      "writtenOn": "2018-08-27T13:50:32Z",
      "side": 1,
      "message": "Should a GITLINK path be equal to a FILE path? Although a TREE path is reported to be different from a FILE path?",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 108,
        "endChar": 49
      },
      "revId": "a867cb3ba932a12e92932e97d79e956f4d8d9f2a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8583b28d_b5bff75c",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/util/PathsTest.java",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-09-02T15:15:50Z",
      "side": 1,
      "message": "Well, it\u0027s what the code before this change did. I kept that behavior.",
      "parentUuid": "f6e46f1b_32035922",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 108,
        "endChar": 49
      },
      "revId": "a867cb3ba932a12e92932e97d79e956f4d8d9f2a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36a727b9_d388fac3",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/util/PathsTest.java",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 5
      },
      "writtenOn": "2018-11-27T12:25:42Z",
      "side": 1,
      "message": "I think we should only add tests for behaviour which we think is correct. Just adding tests for the current behaviour of JGit but not being sure whether its the correct behaviour does not make so much sense. I would simply remove this single test. We can add a test that a gitlink is different from a regular file path in a subsequent change and fix coding.",
      "parentUuid": "8583b28d_b5bff75c",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 108,
        "endChar": 49
      },
      "revId": "a867cb3ba932a12e92932e97d79e956f4d8d9f2a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06903177_18a1dace",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/util/PathsTest.java",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-11-27T16:42:10Z",
      "side": 1,
      "message": "A gitlink must compare equal to a file, and it did so before my change. All I did is add an explicit test for this. And I think this is correct.",
      "parentUuid": "36a727b9_d388fac3",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 108,
        "endChar": 49
      },
      "revId": "a867cb3ba932a12e92932e97d79e956f4d8d9f2a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d970fea7_52981428",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/util/PathsTest.java",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 5
      },
      "writtenOn": "2018-11-28T11:09:02Z",
      "side": 1,
      "message": "Ok, thats new info. Your previous comment made me think you just tested existing behaviour without having a specific demand for that behaviour. I you really need that regular files are compare equal to gitlinks ... then +1 for this test",
      "parentUuid": "06903177_18a1dace",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 108,
        "endChar": 49
      },
      "revId": "a867cb3ba932a12e92932e97d79e956f4d8d9f2a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb86a7a7_f808eb01",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/Paths.java",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 5
      },
      "writtenOn": "2018-08-27T13:50:32Z",
      "side": 1,
      "message": "That means that if either aMode or bMode are a GITLINK then modeCompare() will always tell modes are compatible. If aMode\u003d\u003dFILE and bMode\u003d\u003dGITLINK shouldn\u0027t modeCompare return !\u003d0.",
      "revId": "a867cb3ba932a12e92932e97d79e956f4d8d9f2a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f0b613a_0c59445d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/Paths.java",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-09-02T15:15:50Z",
      "side": 1,
      "message": "\u003e If aMode\u003d\u003dFILE and bMode\u003d\u003dGITLINK shouldn\u0027t modeCompare return !\u003d0.\n\nIt didn\u0027t do so before. I kept that behavior. I think it\u0027s also correct. If we want to ignore such FILE-GITLINK conflicts when ignoreSubmodules\u003dall, I think we would need to add that case in IndexDiff somewhere.",
      "parentUuid": "fb86a7a7_f808eb01",
      "revId": "a867cb3ba932a12e92932e97d79e956f4d8d9f2a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c21ea14a_ebe5a2ae",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/Paths.java",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 5
      },
      "writtenOn": "2018-11-27T12:25:42Z",
      "side": 1,
      "message": "I still find it strange that the mode GITLINK should be compatible with the mode FILE. But since this isn\u0027t changed in this change and was like that before I give my +1 here.",
      "parentUuid": "8f0b613a_0c59445d",
      "revId": "a867cb3ba932a12e92932e97d79e956f4d8d9f2a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}