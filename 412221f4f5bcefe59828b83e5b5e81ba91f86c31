{
  "comments": [
    {
      "key": {
        "uuid": "c7880b39_12d6d3f0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-06-17T01:40:11Z",
      "side": 1,
      "message": "This is incorrect. An INSERT pack may contain multiple objects, and its essential that works for performance of Gerrit when running on a DFS system.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 16
      },
      "revId": "412221f4f5bcefe59828b83e5b5e81ba91f86c31",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_6bc55d06",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 383
      },
      "writtenOn": "2017-06-19T19:16:43Z",
      "side": 1,
      "message": "I came here to say the same thing :)",
      "parentUuid": "c7880b39_12d6d3f0",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 16
      },
      "revId": "412221f4f5bcefe59828b83e5b5e81ba91f86c31",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_ebf78d4b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 79788
      },
      "writtenOn": "2017-06-19T19:26:38Z",
      "side": 1,
      "message": "The reason for this change is that PackParser cannot parse INSERT pack since\nit contains an incorrect object counts. It expects pack footer after indexing 1 object as it believed in the pack header.\n\nbyte[] buf \u003d packOut.hdrBuf;\nSystem.arraycopy(Constants.PACK_SIGNATURE, 0, buf, 0, 4);\nNB.encodeInt32(buf, 4, 2); // Always use pack version 2.\nNB.encodeInt32(buf, 8, 1); // Always assume 1 object.\npackOut.write(buf, 0, 12);",
      "parentUuid": "c7880b39_6bc55d06",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 16
      },
      "revId": "412221f4f5bcefe59828b83e5b5e81ba91f86c31",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_4b4d0118",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 383
      },
      "writtenOn": "2017-06-19T19:46:29Z",
      "side": 1,
      "message": "hdrBuf is a mutable byte array. DfsInserter.PackStream#beginObject is supposed to update it with the current object count before each insert.",
      "parentUuid": "c7880b39_ebf78d4b",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 16
      },
      "revId": "412221f4f5bcefe59828b83e5b5e81ba91f86c31",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_eb5b0dcc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 383
      },
      "writtenOn": "2017-06-19T19:48:59Z",
      "side": 1,
      "message": "Oh, I misread, I think it\u0027s reusing hdrBuf to write out the object header.\n\nI see why beginPack needs to write some object count even though it doesn\u0027t know the final number of objects. I\u0027m just surprised this hasn\u0027t caused lots of exploding prior to now.\n\nBut we really really need to support multi-object INSERT packs, I don\u0027t think that\u0027s negotiable.",
      "parentUuid": "c7880b39_4b4d0118",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 16
      },
      "revId": "412221f4f5bcefe59828b83e5b5e81ba91f86c31",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_8b99a902",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 79788
      },
      "writtenOn": "2017-06-19T20:00:07Z",
      "side": 1,
      "message": "Understood. I am wondering if it is possible to get the expected number of objects from the caller and pass it in.\n\nI think PackParser didn\u0027t parse INSERT packs before. My new fsck code was trying to parse every packs, it failed for INSERT packs.",
      "parentUuid": "c7880b39_eb5b0dcc",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 16
      },
      "revId": "412221f4f5bcefe59828b83e5b5e81ba91f86c31",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_6ec56b06",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-06-20T05:15:44Z",
      "side": 1,
      "message": "INSERT and RECEIVE packs in DFS slightly violate the pack file format by setting an invalid object count in the header of the pack. You need to look at the DfsPackDescription to get a valid object count out-of-band.\n\nThe issue is that during INSERT we have to store the header before the total number of objects is known. So we always produce a header with a count of 1.\n\nThe issue during RECEIVE is we have to store the header before we know how many base objects we have to append to make a thin-pack non-thin by appending copies of delta bases to support deltas that appear in the pack. So we always store the count as the original count from the thin-pack sent by a pushing client.\n\nDFS actually ignores the count at read time, so this isn\u0027t an error to anything except a PackParser or an fsck tool. INSERT and RECEIVE packs are only (thus far) ever accessed by random access supported by the idx file, and the count in the pack header is not relevant.\n\nNormal git gets around these cases by going back and overwriting the header. But DFS has to assume it can\u0027t overwrite a prior part of the pack file, so we don\u0027t have that option. So DFS normally ignores the object count in the pack header and relies on an object count from the DfsPackDescription.\n\nGoogle\u0027s implementation of DfsPackDescription stores the accurate count in a side area, along with the list of packs that are part of the repository.",
      "parentUuid": "c7880b39_8b99a902",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 16
      },
      "revId": "412221f4f5bcefe59828b83e5b5e81ba91f86c31",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}