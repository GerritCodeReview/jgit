{
  "comments": [
    {
      "key": {
        "uuid": "27af2791_9680f950",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/PackWriterTest.java",
        "patchSetId": 2
      },
      "lineNbr": 566,
      "author": {
        "id": 951
      },
      "writtenOn": "2016-08-03T21:10:16Z",
      "side": 1,
      "message": "Why are these needed?",
      "range": {
        "startLine": 562,
        "startChar": 0,
        "endLine": 566,
        "endChar": 34
      },
      "revId": "c86367280d7e01692431c5c328b694107e77b67a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27af2791_111f9394",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/PackWriterTest.java",
        "patchSetId": 2
      },
      "lineNbr": 566,
      "author": {
        "id": 1628
      },
      "writtenOn": "2016-08-04T01:19:13Z",
      "side": 1,
      "message": "The RevCommit objects are not fully initialized. In these tests, the tree objects are not all initialized so calling RevCommit.getTree().getId() causes an NPE.\n\nIt might be good to push down this parseHeaders() into the TestRepository.create() function, but I\u0027d rather leave that in a separate cleanup pass.",
      "parentUuid": "27af2791_9680f950",
      "range": {
        "startLine": 562,
        "startChar": 0,
        "endLine": 566,
        "endChar": 34
      },
      "revId": "c86367280d7e01692431c5c328b694107e77b67a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27af2791_358560e8",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/PackWriterTest.java",
        "patchSetId": 2
      },
      "lineNbr": 566,
      "author": {
        "id": 951
      },
      "writtenOn": "2016-08-04T19:22:47Z",
      "side": 1,
      "message": "Ah, that makes sense. So if this were done for c1, c2, c4, and c5 but not c3, it would still work (I\u0027m not suggesting doing that, just clarifying).",
      "parentUuid": "27af2791_111f9394",
      "range": {
        "startLine": 562,
        "startChar": 0,
        "endLine": 566,
        "endChar": 34
      },
      "revId": "c86367280d7e01692431c5c328b694107e77b67a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27af2791_98bf43f8",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/PackWriterTest.java",
        "patchSetId": 2
      },
      "lineNbr": 566,
      "author": {
        "id": 1628
      },
      "writtenOn": "2016-08-04T21:11:46Z",
      "side": 1,
      "message": "Other methods in this test call parseHeaders() on every BranchBuilder-created RevCommit, and I thought that was the pattern to follow. I tested which RevCommits are not fully initialized, and when you are adding multiple commits to the same BranchBuilder it is only the last one (c5) that needs to be parsed.\n\nThat said, the Eclipse project setup is set to report unused variables as errors so if I remove the parseHeaders(c3) there is an error. One workaround that is to remove the \"RevCommit c3 \u003d \" above, which looks awkward.  Another is to make the RecCommits class members, which I do in https://git.eclipse.org/r/#/c/78398. So my plan is to  just remove the parseHeaders() calls for all but c5 in that patch.\n\nI\u0027ll also need to update the commit message in the initial patch in this set, since it experienced a Hudson test flake failure. *sigh*",
      "parentUuid": "27af2791_358560e8",
      "range": {
        "startLine": 562,
        "startChar": 0,
        "endLine": 566,
        "endChar": 34
      },
      "revId": "c86367280d7e01692431c5c328b694107e77b67a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27af2791_1674e9f0",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 1657,
      "author": {
        "id": 951
      },
      "writtenOn": "2016-08-03T21:10:16Z",
      "side": 1,
      "message": "I don\u0027t understand this comment. Is it related to this change?",
      "range": {
        "startLine": 1656,
        "startChar": 0,
        "endLine": 1657,
        "endChar": 54
      },
      "revId": "c86367280d7e01692431c5c328b694107e77b67a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27af2791_3165770f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 1657,
      "author": {
        "id": 1628
      },
      "writtenOn": "2016-08-04T01:19:13Z",
      "side": 1,
      "message": "This is where the state set by RevWalk.assumeShallow() is retrieved. We need to retrieve that state rather than recreating the RevCommit objects in order for shallow fetches of parent commits to not get lost.\n\nChanged \"flags\" to \"state\".",
      "parentUuid": "27af2791_1674e9f0",
      "range": {
        "startLine": 1656,
        "startChar": 0,
        "endLine": 1657,
        "endChar": 54
      },
      "revId": "c86367280d7e01692431c5c328b694107e77b67a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27af2791_d5ac2476",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 1657,
      "author": {
        "id": 951
      },
      "writtenOn": "2016-08-04T19:21:02Z",
      "side": 1,
      "message": "It still says flags.\n\nIs the purpose of this comment to warn people against creating a new RevWalk? In a single RevWalk I don\u0027t know of any way to recreate a RevCommit --- any methods that produce a RevCommit reuse an existing one if available.\n\nOr is the purpose of this comment to explain some confusing line in the code below? Please forgive my denseness.",
      "parentUuid": "27af2791_3165770f",
      "range": {
        "startLine": 1656,
        "startChar": 0,
        "endLine": 1657,
        "endChar": 54
      },
      "revId": "c86367280d7e01692431c5c328b694107e77b67a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27af2791_f8275f3c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 1657,
      "author": {
        "id": 1628
      },
      "writtenOn": "2016-08-05T00:27:58Z",
      "side": 1,
      "message": "It is the assumeShallow state that is important to retrieve.\n\nI added a comment her because I didn\u0027t understand the role it played in maintaining any previous state set up by the RevWalk. I guess my question to you is, prior to my attempt to comment this loop, what did you understand it to do? Based on your answer we can either drop or adapt the comment.",
      "parentUuid": "27af2791_d5ac2476",
      "range": {
        "startLine": 1656,
        "startChar": 0,
        "endLine": 1657,
        "endChar": 54
      },
      "revId": "c86367280d7e01692431c5c328b694107e77b67a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27af2791_366f2d22",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 1711,
      "author": {
        "id": 951
      },
      "writtenOn": "2016-08-03T21:10:16Z",
      "side": 1,
      "message": "Can this be null? What does it mean if it is null?",
      "revId": "c86367280d7e01692431c5c328b694107e77b67a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27af2791_b1598763",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 1711,
      "author": {
        "id": 1628
      },
      "writtenOn": "2016-08-04T01:19:13Z",
      "side": 1,
      "message": "This is defensive programming to avoid an NPE. IIRC Ketch can have a commit with no tree object. We shouldn\u0027t see that here but I erred on the side of caution. I saw another place in the JGit code with a check like this so maybe it is also possible to have a commit with no tree object outside of Ketch?",
      "parentUuid": "27af2791_366f2d22",
      "revId": "c86367280d7e01692431c5c328b694107e77b67a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27af2791_b56330bb",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 1711,
      "author": {
        "id": 951
      },
      "writtenOn": "2016-08-04T19:30:09Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s possible to have a commit without a tree. It is possible to have an unparsed RevCommit, in which case I am not sure whether getTree will return null.\n\nI\u0027d rather this throw an exception when t \u003d\u003d null. Otherwise it\u0027s too easy to silently lose this improvement with some other code change.",
      "parentUuid": "27af2791_b1598763",
      "revId": "c86367280d7e01692431c5c328b694107e77b67a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27af2791_989ca3f1",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 1711,
      "author": {
        "id": 1628
      },
      "writtenOn": "2016-08-05T00:27:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "27af2791_b56330bb",
      "revId": "c86367280d7e01692431c5c328b694107e77b67a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}