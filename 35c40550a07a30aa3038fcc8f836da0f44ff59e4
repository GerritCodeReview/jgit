{
  "comments": [
    {
      "key": {
        "uuid": "524cb8a9_9e3aa04c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/diffmergetool/CommandExecutor.java",
        "patchSetId": 16
      },
      "lineNbr": 84,
      "author": {
        "id": 119988
      },
      "writtenOn": "2020-01-13T12:18:46Z",
      "side": 1,
      "message": "I don\u0027t see the exit code in the exception, which is very needed. E.g. I have this:\n\norg.eclipse.jgit.diffmergetool.ToolException: \n\tat org.eclipse.jgit.diffmergetool.CommandExecutor.run(CommandExecutor.java:87)\n\tat org.eclipse.jgit.diffmergetool.MergeToolManager.merge(MergeToolManager.java:184)\n\tat org.eclipse.jgit.diffmergetool.ExternalMergeToolTest.testExternalToolXYZ(ExternalMergeToolTest.java:66)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:542)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:770)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:464)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)\n\nIs the caller expected to log this themselves (the exception object contains the exit code)?",
      "range": {
        "startLine": 82,
        "startChar": 5,
        "endLine": 84,
        "endChar": 26
      },
      "revId": "35c40550a07a30aa3038fcc8f836da0f44ff59e4",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b591aee8_7c3e47f4",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/diffmergetool/CommandExecutor.java",
        "patchSetId": 16
      },
      "lineNbr": 84,
      "author": {
        "id": 159690
      },
      "writtenOn": "2020-01-13T12:29:09Z",
      "side": 1,
      "message": "Yes, the exit code should be printed, but here we have no logging in the whole diffmergetool package. Should we add logging or add exit code to the exception message or caller should do it?",
      "parentUuid": "524cb8a9_9e3aa04c",
      "range": {
        "startLine": 82,
        "startChar": 5,
        "endLine": 84,
        "endChar": 26
      },
      "revId": "35c40550a07a30aa3038fcc8f836da0f44ff59e4",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97f8b2f2_0bc894bd",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/diffmergetool/CommandExecutor.java",
        "patchSetId": 16
      },
      "lineNbr": 84,
      "author": {
        "id": 119988
      },
      "writtenOn": "2020-01-13T12:37:48Z",
      "side": 1,
      "message": "IMO its dangerous to leave it to the caller to ask the exception for relevant information, since the standard way to handle exceptions is to log their message and stack trace (and nothing else). So likely the caller will just not log the relevant information.\n\nI have no knowledge on JGit though, e.g. if there its expected that the caller asks the exception for its properties.",
      "parentUuid": "b591aee8_7c3e47f4",
      "range": {
        "startLine": 82,
        "startChar": 5,
        "endLine": 84,
        "endChar": 26
      },
      "revId": "35c40550a07a30aa3038fcc8f836da0f44ff59e4",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5912a92_c581457b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/diffmergetool/CommandExecutor.java",
        "patchSetId": 16
      },
      "lineNbr": 84,
      "author": {
        "id": 159690
      },
      "writtenOn": "2020-01-13T12:54:45Z",
      "side": 1,
      "message": "@Matthias, Andrey or Thomas: how should we handle this additional information in the exception?",
      "parentUuid": "97f8b2f2_0bc894bd",
      "range": {
        "startLine": 82,
        "startChar": 5,
        "endLine": 84,
        "endChar": 26
      },
      "revId": "35c40550a07a30aa3038fcc8f836da0f44ff59e4",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}