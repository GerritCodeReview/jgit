{
  "comments": [
    {
      "key": {
        "uuid": "f2be6f85_021dd0a4",
        "filename": "org.eclipse.jgit.test/META-INF/MANIFEST.MF",
        "patchSetId": 16
      },
      "lineNbr": 37,
      "author": {
        "id": 4
      },
      "writtenOn": "2019-01-09T02:26:46Z",
      "side": 1,
      "message": "[5.3.0,5.4.0)",
      "range": {
        "startLine": 37,
        "startChar": 51,
        "endLine": 37,
        "endChar": 56
      },
      "revId": "346a3b144927eea483243e578d35e3d6f394951f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10c07741_7cefef51",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/transport/http/NetscapeCookieFile.java",
        "patchSetId": 16
      },
      "lineNbr": 167,
      "author": {
        "id": 4
      },
      "writtenOn": "2019-01-09T02:26:46Z",
      "side": 1,
      "message": "You are skipping checking content hash and updating the snapshot properly. I\u0027d start from a copy of FileBasedConfig.load(), skip the UTF8 handling in the first else and replace fromText(decoded) by the method parsing cookie file content.",
      "revId": "346a3b144927eea483243e578d35e3d6f394951f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8cf64bb6_a481a813",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/transport/http/NetscapeCookieFile.java",
        "patchSetId": 16
      },
      "lineNbr": 167,
      "author": {
        "id": 40012
      },
      "writtenOn": "2019-01-11T15:42:49Z",
      "side": 1,
      "message": "Indeed I do not calculate the content hash. But the snapshot is properly updated in line 174, right?\nI don\u0027t like about the FileBasedConfig.load() method that everything is loaded into one String variable first. I would rather like to read based on a reader (i.e. in chunks).",
      "parentUuid": "10c07741_7cefef51",
      "revId": "346a3b144927eea483243e578d35e3d6f394951f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61aaf1f2_849b5e08",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/transport/http/NetscapeCookieFile.java",
        "patchSetId": 16
      },
      "lineNbr": 167,
      "author": {
        "id": 4
      },
      "writtenOn": "2019-01-13T01:30:59Z",
      "side": 1,
      "message": "yes, you are right regarding the snapshot\n\nReading and writing the complete file content in one go is done in FileBasedConfig in order to read and write the file as quickly as possible to reduce chances for races and filesystem level lock contention. Locking behaviour when accessing files depends on which filesystem and OS is used. You are using Files.readAllLines in the read method, this means you are also reading the complete file content in one shot so this is equivalent to what FileBasedConfig does using a byte array.\n\nFileBasedConfig uses LockFile to support atomic updates of the file content. This is implemented by writing the new content to a new temporary file and then atomically renaming the temporary file to the name of the configuration file in order to atomically replace the old file content by the new content. This works for both concurrent access from multiple threads and also from multiple processes.\n\nFileBasedConfig compares content hashes in order to avoid we change the file\u0027s timestamp unnecessarily. This helps to reduce the chance to hit the problem known in the git community as the racy git problem [1]. It is caused by the finite resolution of filesystem timestamps (many Linux filesystems have a resolution of 1 second). We use the file\u0027s modification timestamp to avoid unnecessary IO similar like git index does that. If one process tries to read a file and another process writes to the file within the same tick of the filesystem clock the first thread cannot rely on the modification timestamp to know if the file content changed or not while it is reading the file content. This may have the effect that the reading thread sees a partial update.\n\nAll this may be overkill for single-user tools like e.g. EGit, but JGit is also used in server applications like Gerrit where many threads and multiple processes (in case of a HA setup) may try to access the same file concurrently.\n\nThe same principle is used (also by native git) to ensure atomic content updates of files in the working tree and the git index file.\n\n[1] https://github.com/git/git/blob/master/Documentation/technical/racy-git.txt",
      "parentUuid": "8cf64bb6_a481a813",
      "revId": "346a3b144927eea483243e578d35e3d6f394951f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0f9a950_575596df",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/transport/http/NetscapeCookieFile.java",
        "patchSetId": 16
      },
      "lineNbr": 292,
      "author": {
        "id": 4
      },
      "writtenOn": "2019-01-09T02:26:46Z",
      "side": 1,
      "message": "like above start from a copy of FileBasedConfig.save(), replace the call to toText() by the method rendering the cookie file content and skip the utf8Bom handling.\n\nMaybe it makes sense to extract the code creating the file content to another method (equivalent to toText() in FileBasedConfig) in order to limit complexity of this method.",
      "revId": "346a3b144927eea483243e578d35e3d6f394951f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7be5163_8eee81de",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/transport/http/NetscapeCookieFile.java",
        "patchSetId": 16
      },
      "lineNbr": 292,
      "author": {
        "id": 40012
      },
      "writtenOn": "2019-01-11T15:42:49Z",
      "side": 1,
      "message": "What exactly do you miss in this method? Again save() will first convert everything to one big String variable and persist it afterwards. My method uses a writer to persist in chunks which I like better.",
      "parentUuid": "c0f9a950_575596df",
      "revId": "346a3b144927eea483243e578d35e3d6f394951f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9995ece8_2d3aaa60",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/transport/http/NetscapeCookieFile.java",
        "patchSetId": 16
      },
      "lineNbr": 292,
      "author": {
        "id": 4
      },
      "writtenOn": "2019-01-13T01:30:59Z",
      "side": 1,
      "message": "I miss the hash handling and writing the file content to disk as fast as possible. If the implementation here is close enough to the one in FileBasedConfig we could try to factor out the common logic into another reusable class (maybe in another change).",
      "parentUuid": "a7be5163_8eee81de",
      "revId": "346a3b144927eea483243e578d35e3d6f394951f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b9d48aa_0e8ecc1d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportHttp.java",
        "patchSetId": 16
      },
      "lineNbr": 648,
      "author": {
        "id": 4
      },
      "writtenOn": "2019-01-09T02:26:46Z",
      "side": 1,
      "message": "Looks like this is always empty since you ignore return value in lines 642 and 646. Seems we should add another test covering this response processing",
      "range": {
        "startLine": 648,
        "startChar": 7,
        "endLine": 648,
        "endChar": 26
      },
      "revId": "346a3b144927eea483243e578d35e3d6f394951f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1578881b_3f8df215",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportHttp.java",
        "patchSetId": 16
      },
      "lineNbr": 650,
      "author": {
        "id": 4
      },
      "writtenOn": "2019-01-09T02:26:46Z",
      "side": 1,
      "message": "I think updating should only be done if http.saveCookies [1] is set\nto true\n\n[1] https://git-scm.com/docs/git-config#git-config-httpsaveCookies",
      "revId": "346a3b144927eea483243e578d35e3d6f394951f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3516a916_d0e91b6c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportHttp.java",
        "patchSetId": 16
      },
      "lineNbr": 650,
      "author": {
        "id": 40012
      },
      "writtenOn": "2019-01-11T10:35:26Z",
      "side": 1,
      "message": "This is already checked in line #636!",
      "parentUuid": "1578881b_3f8df215",
      "revId": "346a3b144927eea483243e578d35e3d6f394951f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f03b75ce_4fae6ad0",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportHttp.java",
        "patchSetId": 16
      },
      "lineNbr": 650,
      "author": {
        "id": 4
      },
      "writtenOn": "2019-01-13T01:30:59Z",
      "side": 1,
      "message": "yes, I missed this",
      "parentUuid": "3516a916_d0e91b6c",
      "revId": "346a3b144927eea483243e578d35e3d6f394951f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2114df25_4fac8029",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportHttp.java",
        "patchSetId": 16
      },
      "lineNbr": 671,
      "author": {
        "id": 4
      },
      "writtenOn": "2019-01-09T02:26:46Z",
      "side": 1,
      "message": "processCookieHeader is a pretty generic name. This method parses the given header values to get the cookies so how about naming this method getCookies or extractCookies ?",
      "range": {
        "startLine": 671,
        "startChar": 26,
        "endLine": 671,
        "endChar": 45
      },
      "revId": "346a3b144927eea483243e578d35e3d6f394951f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74b0aed0_308a3a07",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportHttp.java",
        "patchSetId": 16
      },
      "lineNbr": 942,
      "author": {
        "id": 4
      },
      "writtenOn": "2019-01-09T02:26:46Z",
      "side": 1,
      "message": "we can skip this if relevantCookies is empty, extract this into another method :\n\n if (relevantCookies.size() \u003e 0) {\n   setCookieHeader(conn);\n }",
      "revId": "346a3b144927eea483243e578d35e3d6f394951f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d78e4dd2_2240890c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportHttp.java",
        "patchSetId": 16
      },
      "lineNbr": 1044,
      "author": {
        "id": 4
      },
      "writtenOn": "2019-01-09T02:26:46Z",
      "side": 1,
      "message": "did you mean: A string matches another domain string",
      "range": {
        "startLine": 1044,
        "startChar": 4,
        "endLine": 1044,
        "endChar": 49
      },
      "revId": "346a3b144927eea483243e578d35e3d6f394951f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d216595_0626a736",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportHttp.java",
        "patchSetId": 16
      },
      "lineNbr": 1045,
      "author": {
        "id": 4
      },
      "writtenOn": "2019-01-09T02:26:46Z",
      "side": 1,
      "message": "holds",
      "range": {
        "startLine": 1045,
        "startChar": 25,
        "endLine": 1045,
        "endChar": 29
      },
      "revId": "346a3b144927eea483243e578d35e3d6f394951f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8e442dc_cc2c415e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportHttp.java",
        "patchSetId": 16
      },
      "lineNbr": 1073,
      "author": {
        "id": 4
      },
      "writtenOn": "2019-01-09T02:26:46Z",
      "side": 1,
      "message": "I\u0027d put the verb first: matchesCookieDomain\n\nI would flip the order of arguments since the method checks if the host matches the cookieDomain",
      "range": {
        "startLine": 1073,
        "startChar": 16,
        "endLine": 1073,
        "endChar": 35
      },
      "revId": "346a3b144927eea483243e578d35e3d6f394951f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36ba754c_d63d6e57",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportHttp.java",
        "patchSetId": 16
      },
      "lineNbr": 1111,
      "author": {
        "id": 4
      },
      "writtenOn": "2019-01-09T02:26:46Z",
      "side": 1,
      "message": "like above matchesCookiePath and flip the order of arguments",
      "range": {
        "startLine": 1111,
        "startChar": 16,
        "endLine": 1111,
        "endChar": 33
      },
      "revId": "346a3b144927eea483243e578d35e3d6f394951f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}