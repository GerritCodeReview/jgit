{
  "comments": [
    {
      "key": {
        "uuid": "0724e3f1_922bc781",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-10-08T22:33:08Z",
      "side": 1,
      "message": "I don\u0027t understand this sentence. Is the idea that there should be a bitmap on a nearby ancestor to the previous value of the ref so that computing the set of objects\n\n  old..new\n\nis fast?",
      "range": {
        "startLine": 13,
        "startChar": 8,
        "endLine": 13,
        "endChar": 68
      },
      "revId": "2524157d3d79ef6f418dc916ac6c0140135d1eec",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0724e3f1_327f7b5b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1628
      },
      "writtenOn": "2015-10-09T00:12:36Z",
      "side": 1,
      "message": "Yes, exactly. I\u0027m having trouble phrasing it better. Does \"only those at or near the old..new commits are needed\" work?",
      "parentUuid": "0724e3f1_922bc781",
      "range": {
        "startLine": 13,
        "startChar": 8,
        "endLine": 13,
        "endChar": 68
      },
      "revId": "2524157d3d79ef6f418dc916ac6c0140135d1eec",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0724e3f1_f2cb234b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-10-08T22:33:08Z",
      "side": 1,
      "message": "do you mean 36k+ or \u003e36k?",
      "range": {
        "startLine": 18,
        "startChar": 50,
        "endLine": 18,
        "endChar": 54
      },
      "revId": "2524157d3d79ef6f418dc916ac6c0140135d1eec",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0724e3f1_d289bf04",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1628
      },
      "writtenOn": "2015-10-09T00:12:36Z",
      "side": 1,
      "message": "36k+",
      "parentUuid": "0724e3f1_f2cb234b",
      "range": {
        "startLine": 18,
        "startChar": 50,
        "endLine": 18,
        "endChar": 54
      },
      "revId": "2524157d3d79ef6f418dc916ac6c0140135d1eec",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0724e3f1_52bcafb1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-10-08T22:33:08Z",
      "side": 1,
      "message": "When bitmaps were introduced, part of the strategy used was to space out bitmaps more as you go further back in history, so that the time to list ancestors of even a pretty-old commit is not too long (which allowed any code that wants to get the history of an older commit, such as fetches from a machine that hasn\u0027t fetched in a while, to find that operation still not too expensive). But the spacing was capped. This was considered ok because the size of the generated bitmap file was still not too large.\n\nThe repository you\u0027re talking about has a lot of heads, meaning more bitmaps, which is causing bitmap generation to be expensive. I don\u0027t think the previous analysis looked into the cost of bitmap generation as a significant factor (it focused instead of the size of the bitmap file).\n\nWould it work to e.g. increase that cap instead of eliminating the bitmaps on old history altogether? Is there some way to determine what a good set of bitmap commits is, balancing the size of the bitmap file, cost of generating it, and cost of generating the in-memory bitmap of an arbitrary commit? Are there measurements that could confirm what the right thing to do is?",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 57
      },
      "revId": "2524157d3d79ef6f418dc916ac6c0140135d1eec",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0724e3f1_f2c163fc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1628
      },
      "writtenOn": "2015-10-09T00:12:36Z",
      "side": 1,
      "message": "For the repository in question, the size of the bitmap index file may be a problem. We haven\u0027t succeeded in generating a bitmap index for full history. I did succeed in generating a bitmap index for only branch tips, it contained 2404 bitmaps and was 193MB on disk. (For contrast, the size of the bitmap index for the combined chromium repo appears to be 18M). In JGit the bitmap index file is pulled into memory so if we want to support really large indices there will be work to do to just read in portions of the index.\n\nThe spacing between commits was capped at 5k. From the original documentation (this hasn\u0027t changed):\n* the most recent 100 commits are all bitmapped\n* the next 19,000 commits have a bitmaps every 100 commits\n* all remaining have bitmaps every 5000 commits\n\nIf all 1M commits were in a single branch, then the count of selected bitmaps would be 100+190+196 \u003c 500. However this selection is happening for every branch. Many of the branches represent release points and there is not a lot of overlap in the 100 most recent commits of those branches.\n\nGiven that topology, further spacing out the older commits isn\u0027t going to help much. Removing older commits from consideration (but forcing branch tips to be in the set) has a much better property of providing a good set of \"recent\" commits for active branches and a single \"tip\" commit for stale/abandoned branches.",
      "parentUuid": "0724e3f1_52bcafb1",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 31,
        "endChar": 57
      },
      "revId": "2524157d3d79ef6f418dc916ac6c0140135d1eec",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}