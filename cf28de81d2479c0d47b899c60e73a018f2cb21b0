{
  "comments": [
    {
      "key": {
        "uuid": "6ea66c9c_e18def16",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 7,
      "author": {
        "id": 951
      },
      "writtenOn": "2020-12-14T19:23:16Z",
      "side": 1,
      "message": "\u003e getsRefsExcludingPrefixesWithPrefix\n\nThat name is not particularly intuitive. What is a prefix with a prefix?\n\nWe can\u0027t use `getRefsByPrefix(include, exclude)` since that\u0027s already taken by `getRefsByPrefix(prefix1, prefix2)`. Would it make sense to use a builder pattern, like `refs().withPrefix(include).excludingPrefix(exclude)`?\n\nAlso, this doesn\u0027t match what\u0027s in the code (`getRefsByPrefixWithSkips`).",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 39
      },
      "revId": "cf28de81d2479c0d47b899c60e73a018f2cb21b0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b7fca26_d624938e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 7,
      "author": {
        "id": 301552
      },
      "writtenOn": "2020-12-16T17:30:21Z",
      "side": 1,
      "message": "Done, went with overloading getRefsByPrefix (since it\u0027s String, Set\u003cString\u003e, hence a new signature).",
      "parentUuid": "6ea66c9c_e18def16",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 39
      },
      "revId": "cf28de81d2479c0d47b899c60e73a018f2cb21b0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5500c461_5302e3b7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 7,
      "author": {
        "id": 98905
      },
      "writtenOn": "2020-12-16T18:43:32Z",
      "side": 1,
      "message": "hmm. I wish the `getRefsByPrefix(prefix1, prefix2)` didn\u0027t exist, because now getRefsByPrefix(\"inc\", \"inc/a\") does something completely different from  getRefsByPrefix(\"inc\", ImmutableSet.of(\"inc/a\"))\n\nI think getRefsByPrefixWithSkips is better.",
      "parentUuid": "2b7fca26_d624938e",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 39
      },
      "revId": "cf28de81d2479c0d47b899c60e73a018f2cb21b0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "198a52bf_ea84ad83",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 7,
      "author": {
        "id": 301552
      },
      "writtenOn": "2021-01-05T23:04:19Z",
      "side": 1,
      "message": "yea, that\u0027s probably a good point too.\nReverted.",
      "parentUuid": "5500c461_5302e3b7",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 39
      },
      "revId": "cf28de81d2479c0d47b899c60e73a018f2cb21b0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ff2439a_d2721974",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/ReftableDatabase.java",
        "patchSetId": 11
      },
      "lineNbr": 284,
      "author": {
        "id": 98905
      },
      "writtenOn": "2020-12-14T18:48:25Z",
      "side": 1,
      "message": "maybe swap the order of args.\n\nPerhaps we could do away with the WithSkips suffix, ie. do  an overload which looks like\n\n  getRefsByPrefix(String prefix, Set\u003cString\u003e exclude)",
      "range": {
        "startLine": 284,
        "startChar": 55,
        "endLine": 284,
        "endChar": 62
      },
      "revId": "cf28de81d2479c0d47b899c60e73a018f2cb21b0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3937491f_4a7b8eeb",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/ReftableDatabase.java",
        "patchSetId": 11
      },
      "lineNbr": 284,
      "author": {
        "id": 301552
      },
      "writtenOn": "2020-12-16T17:30:21Z",
      "side": 1,
      "message": "Done\nI think I\u0027ll keep \"include\" rather than prefix for clarity.",
      "parentUuid": "7ff2439a_d2721974",
      "range": {
        "startLine": 284,
        "startChar": 55,
        "endLine": 284,
        "endChar": 62
      },
      "revId": "cf28de81d2479c0d47b899c60e73a018f2cb21b0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ec3df00_2619e8e2",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/ReftableDatabase.java",
        "patchSetId": 11
      },
      "lineNbr": 299,
      "author": {
        "id": 98905
      },
      "writtenOn": "2020-12-14T18:54:32Z",
      "side": 1,
      "message": "I didn\u0027t think this through. Can you confirm this will work OK if you have overlapping exclusions?\n\neg. \n\n   getByPrefix(\"refs/\", exclude\u003d[\"refs/changes/\", refs/changes/01/\"])",
      "range": {
        "startLine": 299,
        "startChar": 2,
        "endLine": 299,
        "endChar": 15
      },
      "revId": "cf28de81d2479c0d47b899c60e73a018f2cb21b0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07077fde_5ed5046b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/ReftableDatabase.java",
        "patchSetId": 11
      },
      "lineNbr": 299,
      "author": {
        "id": 301552
      },
      "writtenOn": "2020-12-16T17:30:21Z",
      "side": 1,
      "message": "Specifically your example works fine, but you\u0027re onto something since if we added \"refs/tags\" to your example, it would still return refs/tags.\n\nI fixed it now and added more tests.",
      "parentUuid": "6ec3df00_2619e8e2",
      "range": {
        "startLine": 299,
        "startChar": 2,
        "endLine": 299,
        "endChar": 15
      },
      "revId": "cf28de81d2479c0d47b899c60e73a018f2cb21b0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4df09f4c_c343a26f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/ReftableDatabase.java",
        "patchSetId": 11
      },
      "lineNbr": 312,
      "author": {
        "id": 98905
      },
      "writtenOn": "2020-12-16T18:43:32Z",
      "side": 1,
      "message": "I saw the new code, but it looks kind of complicated. Couldn\u0027t you do something like\n\n\nwhile (rc.next()) {\n Ref ref;\n while (true) {\n   ref \u003d ...\n   if (ref \u003d\u003d null .. ) break;\n   if (currExclude !\u003d null \u0026\u0026 ref.name.startswith(currExclude)) {\n      rc.seekPast(currExclude);\n      currExclude \u003d ..\n      continue;\n   }\n   break;\n  }\n  if (ref !\u003d null) {\n    all.add(ref)\n  }\n}",
      "range": {
        "startLine": 312,
        "startChar": 5,
        "endLine": 312,
        "endChar": 7
      },
      "revId": "cf28de81d2479c0d47b899c60e73a018f2cb21b0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c397b28_2bbad709",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/ReftableDatabase.java",
        "patchSetId": 11
      },
      "lineNbr": 312,
      "author": {
        "id": 301552
      },
      "writtenOn": "2021-01-05T23:04:19Z",
      "side": 1,
      "message": "filtering for non existing etc will still be needed.\n\nIIUC the only difference between this code and mine is the while(true) and getting rid of the \"else\". white(true) is not really needed but I can get rid of the else and add a continue instead - done.",
      "parentUuid": "4df09f4c_c343a26f",
      "range": {
        "startLine": 312,
        "startChar": 5,
        "endLine": 312,
        "endChar": 7
      },
      "revId": "cf28de81d2479c0d47b899c60e73a018f2cb21b0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be62049f_e5c719ec",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/ReftableDatabase.java",
        "patchSetId": 11
      },
      "lineNbr": 312,
      "author": {
        "id": 98905
      },
      "writtenOn": "2021-01-13T13:13:32Z",
      "side": 1,
      "message": "Why do you need to filter for non-existing prefixes? If you have {refs/a, refs/b, refs/d}, and you do skipPastPrefix(\"refs/c\") on a cursor, you\u0027ll just go refs/d , which is what you want, no?",
      "parentUuid": "9c397b28_2bbad709",
      "range": {
        "startLine": 312,
        "startChar": 5,
        "endLine": 312,
        "endChar": 7
      },
      "revId": "cf28de81d2479c0d47b899c60e73a018f2cb21b0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23ca8f94_938d1c65",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/ReftableDatabase.java",
        "patchSetId": 11
      },
      "lineNbr": 312,
      "author": {
        "id": 301552
      },
      "writtenOn": "2021-01-14T13:27:50Z",
      "side": 1,
      "message": "example:\nRefdatabase: [refs/a, refs/b, refs/d]\nexclude: [refs/c, refs/d]\n\nResult: nothing is skipped, refs/d is also returned.\nThe reason this happens is because my algorithm goes lexicographically and looks for refs/c, but since it never finds it and just assumes it will eventually find it, so it never checks for refs/d.\n\nI wonder if it makes sense to instead check if the string is lexicographically bigger than the prefix, and at that point skip to the next to_exclude ref prefix...\n\nEdit: I wondered. I guess it makes sense to add a while loop there to skip to the next prefix to exclude and then we can get rid of those 2 methods that remove overlaps and non-existent.\nIf we return R results, this is actually O(R) extra checks. This is instead of O(Mlog(N)) extra checks (where M is the number of elements to exclude and N is the size of the database, Log(N) since we\u0027re doing a few seeks in the methods I just removed).\n\nIt seems fine to me since it strongly improves code quality and *maybe* not great if we return most of the database (at least in our cases though, that won\u0027t happen).\nI think I just tried to over-optimize since I preferred MlogN over R.",
      "parentUuid": "be62049f_e5c719ec",
      "range": {
        "startLine": 312,
        "startChar": 5,
        "endLine": 312,
        "endChar": 7
      },
      "revId": "cf28de81d2479c0d47b899c60e73a018f2cb21b0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3faceb03_e3944712",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/ReftableDatabase.java",
        "patchSetId": 11
      },
      "lineNbr": 312,
      "author": {
        "id": 98905
      },
      "writtenOn": "2021-01-14T13:44:45Z",
      "side": 1,
      "message": "yeah, this looks much more like I expected.\n\n(My reasoning is that both refs and excludes are in the same namespace, so you should be able to sort both, and then walk over them in parallel as if it was a merge)",
      "parentUuid": "23ca8f94_938d1c65",
      "range": {
        "startLine": 312,
        "startChar": 5,
        "endLine": 312,
        "endChar": 7
      },
      "revId": "cf28de81d2479c0d47b899c60e73a018f2cb21b0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}