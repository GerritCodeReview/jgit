{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c33a4764_9563b917",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevCommit.java",
        "patchSetId": 41
      },
      "lineNbr": 147,
      "author": {
        "id": 201156
      },
      "writtenOn": "2022-12-19T21:08:44Z",
      "side": 1,
      "message": "This explicit #parseHeadersInGraph() muddles the life-cycle of RevCommit. e.g. It is not obvious what happens if you invoke #parseHeaders() and then #parseHeadersInGraph() (or the other way around). Or why should the caller care if the data comes from graph or pack?\n\nThis would be clearer to implement in a subclass of RevCommit (eg. RevCommitCG). A RevCommitCG IS-A RevCommit with a graph position.\n\nThen RevCommitCG would keep the same life-cycle than RevCommit, only that #parseHeaders would read from the commit-graph, instead of the pack.\n \nRevCommitCG could be instantiated in RevWalk#createCommit(), which chooses between RevCommit/RevCommitCG depending if the requested commit is in the graph.\n\nWith a subclass, any current usage of RevWalk using only the headers would benefit from the commit graph without change. It also keeps the API of RevCommit consistent.\n\nAlternatively, this could be an \"if\" inside #parseHeaders() but then we pay the int of the graph position for every RevCommit instance (even when there is no graph) and make more complicated the parsing (for a case that looks pretty well fitted for overriding).",
      "revId": "295fa44be20201db29d4d40b7b6cb26ee8d92a3a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}