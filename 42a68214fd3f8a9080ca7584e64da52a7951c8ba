{
  "comments": [
    {
      "key": {
        "uuid": "a1e681e4_9d36b9cd",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/transport/BasePackConnectionTest.java",
        "patchSetId": 8
      },
      "lineNbr": 44,
      "author": {
        "id": 241433
      },
      "writtenOn": "2022-02-03T20:47:02Z",
      "side": 1,
      "message": "Any reason why we specifically use an EOFException? Could we reuse one of the Exceptions we imported or even a generic Throwable?",
      "range": {
        "startLine": 44,
        "startChar": 2,
        "endLine": 44,
        "endChar": 14
      },
      "revId": "42a68214fd3f8a9080ca7584e64da52a7951c8ba",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c1bb4e6_d61d823e",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/transport/BasePackConnectionTest.java",
        "patchSetId": 8
      },
      "lineNbr": 47,
      "author": {
        "id": 241433
      },
      "writtenOn": "2022-02-03T20:47:02Z",
      "side": 1,
      "message": "nit: what about calling it \"noRepositoryException\"? I think using the same name used in the class makes it easier to follow.",
      "range": {
        "startLine": 47,
        "startChar": 30,
        "endLine": 47,
        "endChar": 36
      },
      "revId": "42a68214fd3f8a9080ca7584e64da52a7951c8ba",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80c712d3_2abbb8f6",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/transport/BasePackConnectionTest.java",
        "patchSetId": 8
      },
      "lineNbr": 52,
      "author": {
        "id": 241433
      },
      "writtenOn": "2022-02-03T20:47:02Z",
      "side": 1,
      "message": "Do we need to pass it? we don\u0027t do any assertion on it",
      "range": {
        "startLine": 52,
        "startChar": 27,
        "endLine": 52,
        "endChar": 33
      },
      "revId": "42a68214fd3f8a9080ca7584e64da52a7951c8ba",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d29974e0_603d8c5d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/BasePackConnection.java",
        "patchSetId": 8
      },
      "lineNbr": 219,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-02-03T21:55:17Z",
      "side": 1,
      "message": "I propose to fix this in a different way:\n- add another constructor NoRemoteRepositoryException(URIish uri, String s, Throwable cause) passing the cause to the corresponding constructor of its superclass\n- add parameter \"Throwable cause\" to the protected method #noRepository\n- suppress the resulting API error raised by Eclipse API tooling, this API change is not affecting consumers of the API but only providers subclassing BasePackConnection, according to OSGi semantic versioning breaking providers in a minor release is ok [1]\n- then we can change this catch clause to\n\n return noRepository(e);\n\n[1] http://docs.osgi.org/whitepaper/semantic-versioning/040-semantic-versions.html",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 219,
        "endChar": 18
      },
      "revId": "42a68214fd3f8a9080ca7584e64da52a7951c8ba",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    }
  ]
}