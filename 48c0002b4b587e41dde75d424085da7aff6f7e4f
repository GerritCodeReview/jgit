{
  "comments": [
    {
      "key": {
        "uuid": "27d6470d_d46f1c1f",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/attributes/MacroExpanderTest.java",
        "patchSetId": 6
      },
      "lineNbr": 65,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-12-03T21:21:29Z",
      "side": 1,
      "message": "I like this test class. EclEmma says you managed to have very high test coverage on MacroExpanderImpl.",
      "revId": "48c0002b4b587e41dde75d424085da7aff6f7e4f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_147a64dc",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesNode.java",
        "patchSetId": 6
      },
      "lineNbr": 142,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-12-03T21:21:29Z",
      "side": 1,
      "message": "I would love to get rid of this parameter",
      "revId": "48c0002b4b587e41dde75d424085da7aff6f7e4f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_34020881",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/attributes/MacroExpander.java",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-12-03T21:21:29Z",
      "side": 1,
      "message": "Do we really an interface and multiple implementations of MacroExpander? Why don\u0027t we just have a class MacroExpander which has the code of MacroExpanderImpl? Then we could drop MacroExpanderImpl and NullMacroExpander. We could save the additional parameter for getAttributes and always use MacroExpander.\nMaybe you have use cases in mind for different macroexpander implementations. Do you?",
      "range": {
        "startLine": 52,
        "startChar": 17,
        "endLine": 52,
        "endChar": 30
      },
      "revId": "48c0002b4b587e41dde75d424085da7aff6f7e4f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_8912e191",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/attributes/MacroExpanderImpl.java",
        "patchSetId": 6
      },
      "lineNbr": 91,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-12-03T21:21:29Z",
      "side": 1,
      "message": "The rules stored in a AttributesNode are not unmutable. On a given attributesNode you can call parse again and again and change the rules stored in that instance. Therefore doing checks like globalNode \u003d\u003d actualGlobalNode is not sufficient, or? Imagine globalNode\u003d\u003dactualGlobalNode is true and then you call actualGlobalNode.parse(newStream). Afterwards  globalNode\u003d\u003dactualGlobalNode will still be true although they don\u0027t contain the same entries.\n\nEither we make AttributesNode unmutable, or we do call .equals() or we explain why we are sure that \u003d\u003d is enough to detect modification.",
      "range": {
        "startLine": 90,
        "startChar": 6,
        "endLine": 91,
        "endChar": 33
      },
      "revId": "48c0002b4b587e41dde75d424085da7aff6f7e4f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_e900cd3b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/attributes/MacroExpanderImpl.java",
        "patchSetId": 6
      },
      "lineNbr": 104,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-12-03T21:21:29Z",
      "side": 1,
      "message": "Shouldn\u0027t this be a static constant? It only depends on static stuff. Maybe not only a static constant for this rule but a constant for our set of default rules.",
      "range": {
        "startLine": 102,
        "startChar": 2,
        "endLine": 104,
        "endChar": 27
      },
      "revId": "48c0002b4b587e41dde75d424085da7aff6f7e4f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_c91a29a2",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/attributes/MacroExpanderImpl.java",
        "patchSetId": 6
      },
      "lineNbr": 105,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-12-03T21:21:29Z",
      "side": 1,
      "message": "why substring(6) if MACRO_PREFIX is a constant which can change. Better use MACRO_PREFIX.length()",
      "range": {
        "startLine": 105,
        "startChar": 45,
        "endLine": 105,
        "endChar": 57
      },
      "revId": "48c0002b4b587e41dde75d424085da7aff6f7e4f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_09e33112",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/attributes/MacroExpanderImpl.java",
        "patchSetId": 6
      },
      "lineNbr": 106,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-12-03T21:21:29Z",
      "side": 1,
      "message": "Don\u0027t you have to clear expansions during a reload before you refill it. Imagine once the global attributes contained an attribute \"custom\". The file was changed and does not contain attribute custom anymore. Where do we remove \"custom\" from the expansions field? There should be a test which covers this.",
      "range": {
        "startLine": 105,
        "startChar": 0,
        "endLine": 106,
        "endChar": 36
      },
      "revId": "48c0002b4b587e41dde75d424085da7aff6f7e4f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_0915f16e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/attributes/MacroExpanderImpl.java",
        "patchSetId": 6
      },
      "lineNbr": 114,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-12-03T21:21:29Z",
      "side": 1,
      "message": "see above",
      "range": {
        "startLine": 114,
        "startChar": 38,
        "endLine": 114,
        "endChar": 50
      },
      "revId": "48c0002b4b587e41dde75d424085da7aff6f7e4f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_492ff9c4",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/attributes/MacroExpanderImpl.java",
        "patchSetId": 6
      },
      "lineNbr": 127,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-12-03T21:21:29Z",
      "side": 1,
      "message": "Why initializing with 1. Isn\u0027t it very likely that there are more than one Attributes (like with \"text\"). I would use 5 or so.",
      "range": {
        "startLine": 127,
        "startChar": 46,
        "endLine": 127,
        "endChar": 47
      },
      "revId": "48c0002b4b587e41dde75d424085da7aff6f7e4f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_a94fa58c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/attributes/MacroExpanderImpl.java",
        "patchSetId": 6
      },
      "lineNbr": 135,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-12-03T21:21:29Z",
      "side": 1,
      "message": "Is the purpose of this construct to remove duplicates from collector? Wouldn\u0027t it be more efficient if expandMacroRec takes care to reuse an entry with the same key so that expandMacroRec promises never to create duplicates. Or collector could be a Map from the beginning and we would always return collector.values()",
      "range": {
        "startLine": 131,
        "startChar": 2,
        "endLine": 135,
        "endChar": 24
      },
      "revId": "48c0002b4b587e41dde75d424085da7aff6f7e4f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_09fed1a0",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/attributes/MacroExpanderImpl.java",
        "patchSetId": 6
      },
      "lineNbr": 138,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-12-03T21:21:29Z",
      "side": 1,
      "message": "I don\u0027t understand this name. What\u0027s a MacroRec?",
      "range": {
        "startLine": 138,
        "startChar": 14,
        "endLine": 138,
        "endChar": 28
      },
      "revId": "48c0002b4b587e41dde75d424085da7aff6f7e4f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_0947b172",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/attributes/MacroExpanderImpl.java",
        "patchSetId": 6
      },
      "lineNbr": 143,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-12-03T21:21:29Z",
      "side": 1,
      "message": "you mean native git, or?",
      "range": {
        "startLine": 143,
        "startChar": 45,
        "endLine": 143,
        "endChar": 52
      },
      "revId": "48c0002b4b587e41dde75d424085da7aff6f7e4f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_ef00cd3b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/AbstractTreeIterator.java",
        "patchSetId": 6
      },
      "lineNbr": 98,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-12-03T21:21:29Z",
      "side": 1,
      "message": "Instead storing a reference to the root iterator couldn\u0027t we directly store a AttributesNode which contains the merged content of global/info/root-worktree .gitattributes?",
      "revId": "48c0002b4b587e41dde75d424085da7aff6f7e4f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_0fe33112",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/TreeWalk.java",
        "patchSetId": 6
      },
      "lineNbr": 1170,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-12-03T21:21:29Z",
      "side": 1,
      "message": "why do we again and again get the always same rootNodeAttr? Couldn\u0027t we assume that changes which happen to  .gitattributes files during one treewalk are not detected by us. When we need attributes for the first time we\u0027ll merge all global/info/root-work-tree .gitattributes field in one field rootAttributesNode. In that we search for macro definitions. And when traversing down the tree we do not touch global/info files again but just merge rootAttributesNode with the .gitattributes files we find while traversing the worktree",
      "revId": "48c0002b4b587e41dde75d424085da7aff6f7e4f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_cff309d8",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/TreeWalk.java",
        "patchSetId": 6
      },
      "lineNbr": 1363,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-12-03T21:21:29Z",
      "side": 1,
      "message": "isn\u0027t this a lot of duplicate code from getCurrentAttributesNode?",
      "range": {
        "startLine": 1363,
        "startChar": 24,
        "endLine": 1363,
        "endChar": 45
      },
      "revId": "48c0002b4b587e41dde75d424085da7aff6f7e4f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}