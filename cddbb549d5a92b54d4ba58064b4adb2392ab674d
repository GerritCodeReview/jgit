{
  "comments": [
    {
      "key": {
        "uuid": "5b7af198_dfeff279",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 97483
      },
      "writtenOn": "2021-10-07T08:56:51Z",
      "side": 1,
      "message": "This is going to be problematic for Gerrit use-case. Gerrit uses the Git repository for storing the review meta-data *and* also draft comments. That makes the repository highly volatile and refs are updated all the times.\n\nRefreshing the *whole refs* of a large mono-repo (e.g. up to millions of refs) isn\u0027t practical.\n\nWhy not just refreshing the refs that have actually changed?\n\nP.S. The cache could also be write-through, so that you do not necessarily need to reload it because you can do update it as you write to disk.",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 60
      },
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5a5954b_3f628d4d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 98905
      },
      "writtenOn": "2021-10-07T14:43:51Z",
      "side": 1,
      "message": "Do you have numbers on write load vs. read load?\n\nit\u0027s true that refreshing the whole thing is slow, but if reads outnumber writes by a large enough margin, it\u0027s still going to be a win. I think the refresh will be done by the writer thread, so it\u0027s the writer that pays the cost.\n\nThe JGit RefChangedEvent doesn\u0027t include a list of which refs were updated, so incremental updates need a different approach.  \n\nI looked for a bit at making a full delegate, but it looks hairy; if you want incremental updates, we\u0027d probably need to add a API surface to (Batch)RefUpdate to register a callback on execute()",
      "parentUuid": "5b7af198_dfeff279",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 60
      },
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1d63c90_c01bc7ab",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 97483
      },
      "writtenOn": "2021-10-07T08:56:51Z",
      "side": 1,
      "message": "Is that just a WIP of the current status? Or do you see blocking issues for being able to get that implemented?",
      "range": {
        "startLine": 13,
        "startChar": 2,
        "endLine": 13,
        "endChar": 44
      },
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d847ee32_4bc34825",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/memory/InMemoryRefDatabase.java",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 149285
      },
      "writtenOn": "2021-10-07T15:04:16Z",
      "side": 1,
      "message": "I took an AI to look into if Google\u0027s own Repository/RefDb implementation is thread-safe. It\u0027s not and can\u0027t be shared across requests because it encodes ACL information in the Repository object.\n\nThat\u0027s OK, though. Open-source Gerrit through LocalDiskRepositoryManager already uses JGit\u0027s RepositoryCache. As far as I understand, this caches repos across requests - if configured - and will allow the new InMemoryRefDatabase to just work. It works with time-based eviction if a repo is no longer open. For busy instances, All-Users should be opened often enough so that when the expiryTime is reasonably configured, we actually retrain the cached Repo.",
      "range": {
        "startLine": 29,
        "startChar": 51,
        "endLine": 29,
        "endChar": 56
      },
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4377149_efbea39a",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/memory/InMemoryRefDatabase.java",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 44628
      },
      "writtenOn": "2021-10-06T21:45:02Z",
      "side": 1,
      "message": "Why is Constants.REVERT_HEAD not needed? (I see it\u0027s also missing in RefDirectory...)",
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03c9547f_baf504d7",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/memory/InMemoryRefDatabase.java",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 4
      },
      "writtenOn": "2021-10-09T01:00:07Z",
      "side": 1,
      "message": "done",
      "parentUuid": "d4377149_efbea39a",
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "875d6eea_103e4e95",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/memory/InMemoryRefDatabase.java",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 44628
      },
      "writtenOn": "2021-10-06T21:45:02Z",
      "side": 1,
      "message": "This relies on this RefsChangedListener being called before any other RefsChangedListener on the repo, otherwise those other listeners might not see the update. Probably this is true with the current implementation of the ListenerList, but it looks fragile.",
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7306e26_d1513773",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/memory/InMemoryRefDatabase.java",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 44628
      },
      "writtenOn": "2021-10-06T21:45:02Z",
      "side": 1,
      "message": "Detach the listener?",
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4afe1e7c_5fab2a1d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/memory/InMemoryRefDatabase.java",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 4
      },
      "writtenOn": "2021-10-09T01:00:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7306e26_d1513773",
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0739a863_eef30b8f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/memory/InMemoryRefDatabase.java",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 44628
      },
      "writtenOn": "2021-10-07T17:14:09Z",
      "side": 1,
      "message": "Shouldn\u0027t refCache be volatile?",
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8aa75cc9_576fd68f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/memory/InMemoryRefDatabase.java",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 4
      },
      "writtenOn": "2021-10-09T01:00:07Z",
      "side": 1,
      "message": "not anymore since it\u0027s now final",
      "parentUuid": "0739a863_eef30b8f",
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e92d5b6_bface8c7",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/memory/InMemoryRefDatabase.java",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 149285
      },
      "writtenOn": "2021-10-20T11:50:13Z",
      "side": 1,
      "message": "Or an AtomicReference?",
      "parentUuid": "0739a863_eef30b8f",
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cdab3da_35f2f5e7",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/memory/InMemoryRefDatabase.java",
        "patchSetId": 4
      },
      "lineNbr": 120,
      "author": {
        "id": 9
      },
      "writtenOn": "2021-10-06T11:57:03Z",
      "side": 1,
      "message": "There is a race here. If the event says that \"foo was deleted\" then for the time until the\nnewRefCache is being populated and before the replace is called in the line 120, all the concurrent searches are done in the existing refCache. This will find \"foo\" although it doesn\u0027t exist.",
      "range": {
        "startLine": 118,
        "startChar": 0,
        "endLine": 120,
        "endChar": 63
      },
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63a92ec4_12f66972",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/memory/InMemoryRefDatabase.java",
        "patchSetId": 4
      },
      "lineNbr": 120,
      "author": {
        "id": 98905
      },
      "writtenOn": "2021-10-07T14:43:51Z",
      "side": 1,
      "message": "but that is working as intended, no? The whole point of this exercise is to avoid that concurrent processes check the filesystem to see if they are up-to-date all the time.",
      "parentUuid": "7cdab3da_35f2f5e7",
      "range": {
        "startLine": 118,
        "startChar": 0,
        "endLine": 120,
        "endChar": 63
      },
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35e49cf7_93488473",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/memory/InMemoryRefDatabase.java",
        "patchSetId": 4
      },
      "lineNbr": 120,
      "author": {
        "id": 4
      },
      "writtenOn": "2021-10-09T01:00:07Z",
      "side": 1,
      "message": "- fixed the race\n- RefsChangedEvent doesn\u0027t provide any details, it just says \"some refs changed\". If we want to update the cache incrementally we need to improve these events to provide details",
      "parentUuid": "7cdab3da_35f2f5e7",
      "range": {
        "startLine": 118,
        "startChar": 0,
        "endLine": 120,
        "endChar": 63
      },
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}