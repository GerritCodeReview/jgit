{
  "comments": [
    {
      "key": {
        "uuid": "5b7af198_dfeff279",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 97483
      },
      "writtenOn": "2021-10-07T08:56:51Z",
      "side": 1,
      "message": "This is going to be problematic for Gerrit use-case. Gerrit uses the Git repository for storing the review meta-data *and* also draft comments. That makes the repository highly volatile and refs are updated all the times.\n\nRefreshing the *whole refs* of a large mono-repo (e.g. up to millions of refs) isn\u0027t practical.\n\nWhy not just refreshing the refs that have actually changed?\n\nP.S. The cache could also be write-through, so that you do not necessarily need to reload it because you can do update it as you write to disk.",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 60
      },
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1d63c90_c01bc7ab",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 97483
      },
      "writtenOn": "2021-10-07T08:56:51Z",
      "side": 1,
      "message": "Is that just a WIP of the current status? Or do you see blocking issues for being able to get that implemented?",
      "range": {
        "startLine": 13,
        "startChar": 2,
        "endLine": 13,
        "endChar": 44
      },
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4377149_efbea39a",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/memory/InMemoryRefDatabase.java",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 44628
      },
      "writtenOn": "2021-10-06T21:45:02Z",
      "side": 1,
      "message": "Why is Constants.REVERT_HEAD not needed? (I see it\u0027s also missing in RefDirectory...)",
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "875d6eea_103e4e95",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/memory/InMemoryRefDatabase.java",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 44628
      },
      "writtenOn": "2021-10-06T21:45:02Z",
      "side": 1,
      "message": "This relies on this RefsChangedListener being called before any other RefsChangedListener on the repo, otherwise those other listeners might not see the update. Probably this is true with the current implementation of the ListenerList, but it looks fragile.",
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7306e26_d1513773",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/memory/InMemoryRefDatabase.java",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 44628
      },
      "writtenOn": "2021-10-06T21:45:02Z",
      "side": 1,
      "message": "Detach the listener?",
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cdab3da_35f2f5e7",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/memory/InMemoryRefDatabase.java",
        "patchSetId": 4
      },
      "lineNbr": 120,
      "author": {
        "id": 9
      },
      "writtenOn": "2021-10-06T11:57:03Z",
      "side": 1,
      "message": "There is a race here. If the event says that \"foo was deleted\" then for the time until the\nnewRefCache is being populated and before the replace is called in the line 120, all the concurrent searches are done in the existing refCache. This will find \"foo\" although it doesn\u0027t exist.",
      "range": {
        "startLine": 118,
        "startChar": 0,
        "endLine": 120,
        "endChar": 63
      },
      "revId": "cddbb549d5a92b54d4ba58064b4adb2392ab674d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    }
  ]
}