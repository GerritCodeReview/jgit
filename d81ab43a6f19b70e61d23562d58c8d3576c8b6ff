{
  "comments": [
    {
      "key": {
        "uuid": "AABOF3///7w\u003d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 16,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-14T03:28:02Z",
      "side": 1,
      "message": "packSizeLimit has to be handled inside of PackWriter. Its a nontrivial change and should be done independently of this change.",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///5g\u003d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 16,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-14T16:22:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AABOF3///7w\u003d",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///58\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 80,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-14T03:28:02Z",
      "side": 1,
      "message": "I\u0027m not convinced this code is cleaner by having everything be static methods and passing around the FileRepository.",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///5c\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 80,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-14T16:22:04Z",
      "side": 1,
      "message": "Done. The more this class grew the greater was the need to have non-static methods.",
      "parentUuid": "AABOF3///58\u003d",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///6M\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 84,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-14T03:28:02Z",
      "side": 1,
      "message": "why two packfiles? If there is a size parameter, it can be more than two packs if they go over the size limit. I wouldn\u0027t say how many is created here.",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///5Y\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 84,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-14T16:22:04Z",
      "side": 1,
      "message": "I wrote \"two\" because it\u0027s currently the truth since we don\u0027t have a size parameter. But it\u0027s right: it\u0027s not GC\u0027s business to know about how man packfiles PackWriter will write. I\u0027ll remove \"two \".",
      "parentUuid": "AABOF3///6M\u003d",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///74\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 95,
      "author": {
        "id": 9
      },
      "writtenOn": "2012-02-13T13:28:18Z",
      "side": 1,
      "message": "why is day the smallest unit when specifying the expire parameter?\n\nThe --expire option in the native Git understands also options like:\n\n --expire\u003d1.minute\n --expire\u003d10.seconds\n --expire\u003d2.hours\n ...\n\nThis makes hard writing automated tests where I would like to create two non-reachable objects:\n\n object creation-time\n A      T1\n B      T2\n\nand specify the --expire to be between the T1 and T2 and check  that A is pruned and B is not pruned.\n\nIf you don\u0027t want to deal with the time-unit strings (like \"1.minute\", ...) then I would propose to use:\n\n long expire\n\nor:\n\n java.util.Date expire\n\nwhere is the number of milliseconds since Jan 1st 1970 UTC.\n\nAll objects older, non-reachable objects older than \u0027expire\u0027 timestamp are candidates for pruning.",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///7s\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 95,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-13T16:23:48Z",
      "side": 1,
      "message": "ok, good point. I\u0027ll go for \u0027long expire\u0027 expressing the number of milliseconds which have to be elapsed since the file has been modified. I don\u0027t like Date because this refers to a certain point in time - but native git only accepts timespans which have to be elapsed before we consider files for pruning",
      "parentUuid": "AABOF3///74\u003d",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///6Q\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 95,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-14T03:28:02Z",
      "side": 1,
      "message": "Yes, this should be long expireMillis. :-)\n\nWe should also be able to disable the prune, aka --expire\u003dnever.",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///5U\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 95,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-14T16:22:04Z",
      "side": 1,
      "message": "it\u0027s called expireAgeMillis now. Sasa requested to add the term \"age\" know they have to specify a timespan and not what System.currentTimeMillis() returns",
      "parentUuid": "AABOF3///6Q\u003d",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///6E\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 169,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-14T03:28:02Z",
      "side": 1,
      "message": "I am unclear as to why we need objectsToKeep here. If the object is in a pack file that is available to the repository, why are we also keeping it loose?",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///5I\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 169,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-14T16:22:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AABOF3///6E\u003d",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///6I\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 178,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-14T03:28:02Z",
      "side": 1,
      "message": "translate this string :-)",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///5Q\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 178,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-14T16:22:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AABOF3///6I\u003d",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///40\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 258,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-14T16:22:04Z",
      "side": 1,
      "message": "Currently this doesn\u0027t work reliable. This method prunes too many objects because it asks objectwalk with lookupOrNull() whether he knows a certain objects and if null is returned we assume the object is unreferenced. I has been shown that this assumption is wrong. I keep working on it.",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///2U\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 258,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-14T23:15:18Z",
      "side": 1,
      "message": "Ok, I found the problem on my own. Calling ObjectWalk.checkConnectivity() solved the problem.",
      "parentUuid": "AABOF3///40\u003d",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///6A\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 317,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-14T03:28:02Z",
      "side": 1,
      "message": "This can be relaxed, we should permit creating version 1 indexes if that is what the user has asked us to do explicitly in the configuration. But the default should be version 2.",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///5E\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 317,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-14T16:22:04Z",
      "side": 1,
      "message": "If I understand correctly I should not check at all, right. I\u0027ll simply remove this check and expect lower layers to determine the requested index version.",
      "parentUuid": "AABOF3///6A\u003d",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///54\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 391,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-14T03:28:02Z",
      "side": 1,
      "message": "We don\u0027t use parens on return statements.",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///5A\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 391,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-14T16:22:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AABOF3///54\u003d",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///50\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 407,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-14T03:28:02Z",
      "side": 1,
      "message": "I think we have a subtle bug here. The TREE extension in the DirCache doesn\u0027t have its tree SHA-1s included in the result here. If they aren\u0027t in HEAD (e.g. due to the user force updating the reference without updating the index to match) and then we gc and prune these objects away the DirCache is corrupt to git-core.\n\nIIRC the TREE extension needs to also be considered here for objects the index uses.",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///5w\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 411,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-14T03:28:02Z",
      "side": 1,
      "message": "Please don\u0027t rely on reference equality with zeroId(). ObjectId.from* can create a new ObjectId that is 0{40} without using the singleton zeroId().",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///48\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 411,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-14T16:22:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AABOF3///5w\u003d",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///5s\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 436,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-14T03:28:02Z",
      "side": 1,
      "message": "These have to write to temporary files, otherwise you trash the current file if its the same object set.",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///44\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 9
      },
      "lineNbr": 436,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-14T16:22:04Z",
      "side": 1,
      "message": "If I call File.createNewFile() for pack and index I know that a packfile with that name already exists and I directly leave this method with creating a new files. That check was already proposed but by mistake it went to the follow-up change 5055. I reorganized the two changes.",
      "parentUuid": "AABOF3///5s\u003d",
      "revId": "d81ab43a6f19b70e61d23562d58c8d3576c8b6ff",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}