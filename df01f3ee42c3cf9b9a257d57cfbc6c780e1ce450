{
  "comments": [
    {
      "key": {
        "uuid": "AABOF3///r4\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 85,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-18T03:19:01Z",
      "side": 1,
      "message": "final",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///oE\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 85,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-19T23:55:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AABOF3///r4\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///r8\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 98,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-18T03:19:01Z",
      "side": 1,
      "message": "Don\u0027t bother with this in the constructor. Let the callers use the setter method you have defined if they need to override the default.",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///oA\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 98,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-19T23:55:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AABOF3///r8\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///sA\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 105,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-18T03:19:01Z",
      "side": 1,
      "message": "unnecessary blank line",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///n8\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 105,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-19T23:55:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AABOF3///sA\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///rI\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 173,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-18T03:19:01Z",
      "side": 1,
      "message": "On Windows this can fail if JGit has the pack open. You\u0027ll need to  ensure the object directory closes the pack before you delete it. PackFile.close() should do the right thing. I think. :-)",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///n4\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 173,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-19T23:55:05Z",
      "side": 1,
      "message": "Yes, I got similar comments from colleagues who tried it out on windows. I\u0027ll close the packfile.",
      "parentUuid": "AABOF3///rI\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///rA\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 240,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-18T03:19:01Z",
      "side": 1,
      "message": "I still haven\u0027t had time to review prune, sorry. :-(",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///rU\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 353,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-18T03:19:01Z",
      "side": 1,
      "message": "I think git-core adds both the old and new ids if the id isn\u0027t zeroId. The rationale is logging might have been enabled after the reference was already created and the old id should still be kept around as its mentioned in the log. But I may be wrong. :-)",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///n0\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 353,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-19T23:55:05Z",
      "side": 1,
      "message": "Interesting argument. Never thought about this reason to also add oldId. But make sense. Done.",
      "parentUuid": "AABOF3///rU\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOGH////I\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 353,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-23T03:09:12Z",
      "side": 1,
      "message": "I went and double checked the git-core behavior. It does what you do here in patch set 14, which is include both new and old ids when packing.\n\nYou should make one change, and that is to ignore newId when it is zeroId(). It is somewhat valid for a reflog entry to use zeroId() in the newId position to indicate a branch was deleted, but *not* delete the log file. git-core handles this case cleanly by only pushing in the old id from that record. We should do the same thing here in JGit and only push in the newId if it isn\u0027t zeroId.",
      "parentUuid": "AABOF3///n0\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOGX///3U\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 353,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-03-06T23:57:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AABOGH////I\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///rM\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 366,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-18T03:19:01Z",
      "side": 1,
      "message": "Yes you also have to use excludeObjects(idx). DfsGarbageCollector does the right thing. This code does not.\n\nConsider a blob Q exists in a graph (look at this on gerrit web ui it may misformat in email):\n\n  M---o---B---o---o--- A master\n  |       |\n  |       Q\n   \\\n    +-- o ---- o ---- o ---- R  refs/changes/12/1212/1\n                             |\n                             Q\n\nNow if there is another commit R in a non-head that also points to Q, your current code will pack Q twice because the second PackWriter cannot see that R was actually packed. It only considers A, M and R. It does not look at the contents of the tree B to determine Q is not part of R\u0027s set to pack.\n\nexcludeObjects was created to make the pack was we want it to here. You have to use it, so you\u0027ll need to expose the PackIndex from the PackFile.",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///nw\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 366,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-19T23:55:05Z",
      "side": 1,
      "message": "Ok, I think I understand part of the problem. But isn\u0027t the problem with current code not even worse? Let\u0027s see whether I got it. The first PackWriter for heads is told to start from A. He will pack A,B,Q,M. The second PackWriter for non-heads is told to start on R and to stop traversing when he sees A (A is the only object in allHeads). My code would now write R,Q and M(!). Not only Q but also M is written twice, right?\n\nAnyhow, I\u0027ll fix it by exposing index files from packs and calling excludeObjects().",
      "parentUuid": "AABOF3///rM\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOGH////E\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 366,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-23T03:09:12Z",
      "side": 1,
      "message": "M should never be included. When the have collection (3rd arg of preparePack, here the allHeads argument) is non-empty the PackWriter uses a TOPO sort. The TOPO sort is slower, but ensures that A, R, B all came out of the revision queue *before* M does. Doing so ensures the UNINTERESTING flag from A is carried onto M, so that M is deemed UNINTERESTING too and does not appear in the output pack.\n\nThinking about this more, we might be able to be more sloppy about this in PackWriter in order to avoid the expense of TOPO sorting in the RevWalk. It isn\u0027t related to your GC feature and shouldn\u0027t be combined with it, but I think that the commit resort feature we do in PackWriter around line 1620 is allowing us to delay the addition of M into the pack sufficiently that its OK if we found M through R before we found M through A, and thus cancel M during that commit resort loop. But I can\u0027t say I have proven this theory, its just something that occurred to me looking at the code again.  :-)\n\nSo in short, M would never have been included. But Q is, and doesn\u0027t need to be.",
      "parentUuid": "AABOF3///nw\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOGX///1Q\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 366,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-03-06T23:57:26Z",
      "side": 1,
      "message": "Wrote a test which checks the new behavior. And with old code this test fails. \n\nMy misunderstanding was that I thought that you start the walk on the objects in \"want\". And you stop walking further if you see an object in \"have\". But I learned that also \"have\" objects are real starting points for the walk carrying the UNINTERESTING flag to all the children.\n\nDone!",
      "parentUuid": "AABOGH////E\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///rQ\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 371,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-18T03:19:01Z",
      "side": 1,
      "message": "You need to expose getPackIndex() on PackFile.",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///ns\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 371,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-19T23:55:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AABOF3///rQ\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///rE\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 377,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-18T03:19:01Z",
      "side": 1,
      "message": "Before you delete old packs, you may want to eject any unused objects into loose objects.",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///no\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 377,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-19T23:55:05Z",
      "side": 1,
      "message": "yes, I know. Unpacking objects is in the moment a missing feature. Do you accept a GC without that feature? I know, without unpacking the we don\u0027t have a expiration time for packed objects. Packed objects will be pruned immediatly. On the other hand the expiration time should save \"new\" objects created during the current gc run - and objects in packs are old enough to be pruned. Or?",
      "parentUuid": "AABOF3///rE\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOGH////U\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 377,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-23T03:09:12Z",
      "side": 1,
      "message": "We can accept a GC feature that doesn\u0027t eject unused objects to loose format. git-core went many years before people identified the bug that required this ejection process, as you point out most new objects will be written as new loose objects and thus won\u0027t be in packs and thus won\u0027t suddenly disappear during GC.\n\nBut we really should try to close this hole soon after we add GC support. I just don\u0027t want it forgotten about.",
      "parentUuid": "AABOF3///no\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///rs\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 394,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-18T03:19:01Z",
      "side": 1,
      "message": "dc is an unnecessary local variable, i think you can inline it into the addTree call.",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///nk\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 394,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-19T23:55:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AABOF3///rs\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///ro\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 441,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-18T03:19:01Z",
      "side": 1,
      "message": "It would be cleaner to say:\n\n  if (pw.getObjectCount() \u003d\u003d 0)\n    return null;",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///ng\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 441,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-19T23:55:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AABOF3///ro\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///rk\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 445,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-18T03:19:01Z",
      "side": 1,
      "message": "I think we should really try to support the case of repacking with different compression settings, producing packs with the same object set but different contents.\n\nThat means changing this code to write the pack and index to temporary files in the objects/pack directory and later renaming them over to the final target names.\n\nActually, using temporary names is critical to preventing readers from trying to read a partially written index and screaming because the index is corrupt.",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///nc\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 445,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-19T23:55:05Z",
      "side": 1,
      "message": "yes, I agree. I commented already in patchset 10 on Matthias comment on gc() that I will change to always writing new packs. This of course implies to write into temp files. Will come in a subsequent pachtset.",
      "parentUuid": "AABOF3///rk\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOGX///1M\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 445,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-03-06T23:57:26Z",
      "side": 1,
      "message": "Done. I write into temp files now.",
      "parentUuid": "AABOF3///nc\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///rg\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 460,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-18T03:19:01Z",
      "side": 1,
      "message": "We should not only mark the pack setReadOnly() but we should use the FileChannel to ensure the data was synced to disk before we return and claim the file is created. We already have this as an optional feature when creating loose objects. git-core *always* does an fsync when it is done creating the pack and the index during repacking. The extra time the fsync takes is minimal compared to the time it takes to make the pack.",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///nY\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 460,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-19T23:55:05Z",
      "side": 1,
      "message": "added a TODO (it\u0027s getting too late :-) )",
      "parentUuid": "AABOF3///rg\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///jY\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 460,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-21T14:06:03Z",
      "side": 1,
      "message": "I tried to user java.nio.FileChannel.force() method to flush modifications to disk. But the force() method only guarantees that modifications done through the FileChannel methods are flushed to disk. No guarantees for modifications done through the associated outputstream. That means: we to add methods PackWriter.writePack() and PackWriter.writeIndex() which accept FileChannels instead of Outputstream. Can be done, but was this your intention?",
      "parentUuid": "AABOF3///rg\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOGH////M\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 460,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-23T03:09:12Z",
      "side": 1,
      "message": "Use Channels.newOutputStream() to wrap the FileChannel into an OutputStream. Then writes will go through the channel, which means the force call works on the data as expected.",
      "parentUuid": "AABOF3///jY\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///rc\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 498,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-18T03:19:01Z",
      "side": 1,
      "message": "Do not abbreviate public structure names. numberOfPackedObjects is a better name, even though it is longer.",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///nU\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 498,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-19T23:55:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AABOF3///rc\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///rY\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 545,
      "author": {
        "id": 1
      },
      "writtenOn": "2012-02-18T03:19:01Z",
      "side": 1,
      "message": "s/Set\u0027s/Set/",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOF3///nQ\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java",
        "patchSetId": 13
      },
      "lineNbr": 545,
      "author": {
        "id": 5
      },
      "writtenOn": "2012-02-19T23:55:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AABOF3///rY\u003d",
      "revId": "df01f3ee42c3cf9b9a257d57cfbc6c780e1ce450",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}