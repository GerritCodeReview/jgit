{
  "comments": [
    {
      "key": {
        "uuid": "b7cec776_d327084a",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/FS_POSIX.java",
        "patchSetId": 4
      },
      "lineNbr": 410,
      "author": {
        "id": 5
      },
      "writtenOn": "2018-06-06T07:04:11Z",
      "side": 1,
      "message": "Everybody running on POSIX filesystems will now under the hood use this class named NFSFile even if there is no NFS in his environment. Since this class adds quite a few additional filesystem calls (e.g.  config.getBoolean has to check wether repo or global or system config has changed) I would like to give users not using NFS the chance not to use this class. \n\nThis change forces non-NFS users to do instead of  \n\n- File.exists() \n\nthe following\n\n- potentially check 3 config files whether they have changed\n- check the merged configuration whether it contains CONFIG_KEY_REFRESHFOLDERSTAT \n- if not call \"File.exists()\"\n\nA config option like \"EnableNFSSupport\" could do this trick. That could be a config option read once and stored in a static field. Only if that field is true we instantiate NFSFile. Otherwise we simply use the super() implementations of createFile().",
      "revId": "9f4c22e665e7028ba9a0bf2d69d18602a05b30bf",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac7cd1b8_4a8eff4c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/FS_POSIX.java",
        "patchSetId": 4
      },
      "lineNbr": 410,
      "author": {
        "id": 1684
      },
      "writtenOn": "2018-06-06T08:40:00Z",
      "side": 1,
      "message": "+1. I have the same concerns about performance impact. I do not use NFS, and must not suffer from any performance degradation in such a central place on JGit/Gerrit stack.",
      "parentUuid": "b7cec776_d327084a",
      "revId": "9f4c22e665e7028ba9a0bf2d69d18602a05b30bf",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86f09f90_81fc6c01",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/FS_POSIX.java",
        "patchSetId": 4
      },
      "lineNbr": 410,
      "author": {
        "id": 97483
      },
      "writtenOn": "2018-06-07T13:05:45Z",
      "side": 1,
      "message": "We are using NFS but I am still concerned about using such a global hack for all files accesses.\nWe can\u0027t accept a global performance degradation on all nodes only to fix a single scenario: in-memory cache invalidation.\n\nIs there a way to instead control this from the external? Something like Repository.refreshRefs().\n\nJust to clarify: the data is visible but only the files attributes are cached for files that have been modified. All Git files are immutable, with the exception of refs.\n\nIf we introduce a \"refreshRefs()\" to be called by Gerrit (or whoever uses JGit) only when needed, we won\u0027t have anymore a global performance impact on all the JGit calls and we will still achieve the goal of being able to invalidate the cache.\n\nHow does it sound?\n\nLuca.",
      "parentUuid": "ac7cd1b8_4a8eff4c",
      "revId": "9f4c22e665e7028ba9a0bf2d69d18602a05b30bf",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "974a61e2_270b545b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/FS_POSIX.java",
        "patchSetId": 4
      },
      "lineNbr": 410,
      "author": {
        "id": 4
      },
      "writtenOn": "2018-06-07T13:35:12Z",
      "side": 1,
      "message": "This class is not used for all file access but for access to pack files and for access to refs. \n\nIf the NFS cached view of the pack directory is incomplete we may miss new packfiles in multi-node setup if a new packfile arrived on another node, for refs we may miss new refs, updates or deletes.\n\nAnother issue is visibility of file locks implemented by FileLock between processes running on different nodes.",
      "parentUuid": "86f09f90_81fc6c01",
      "revId": "9f4c22e665e7028ba9a0bf2d69d18602a05b30bf",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ae4efcf_631c6e6d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/FS_POSIX.java",
        "patchSetId": 4
      },
      "lineNbr": 410,
      "author": {
        "id": 97483
      },
      "writtenOn": "2018-06-07T13:42:24Z",
      "side": 1,
      "message": "\u003e This class is not used for all file access but for access to pack files and for access to refs. \n\nrefs are still read a lot of times ... do we have numbers of the performance degradation?\n\n\u003e If the NFS cached view of the pack directory is incomplete we may miss new packfiles in multi-node setup if a new packfile arrived on another node\n\nYes, saw that and the trustfolderstats flag addresses that, correct? It is then a non-problem anymore.\n\n\u003e for refs we may miss new refs, updates or deletes.\n\nYes, we saw that as well. For packed refs a fix has been merged already. For loose refs the problem is outstanding.\n\n\u003e Another issue is visibility of file locks implemented by FileLock between processes running on different nodes.\n\nIs this addressing FileLock as well?",
      "parentUuid": "974a61e2_270b545b",
      "revId": "9f4c22e665e7028ba9a0bf2d69d18602a05b30bf",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}