{
  "comments": [
    {
      "key": {
        "uuid": "0daa527b_77668977",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 97483
      },
      "writtenOn": "2020-11-11T20:46:18Z",
      "side": 1,
      "message": "We\u0027ve experienced that too and reverted to trustfolderstat always set to true, also if that would mean out-of-sync JGit cache.\n\nFor small repos, the reload of the packed refs isn\u0027t a big issue. However, for mono-repos, becomes so significant that Gerrit becomes unusable.",
      "range": {
        "startLine": 15,
        "startChar": 4,
        "endLine": 15,
        "endChar": 36
      },
      "revId": "a4f4c39c51295b474f6b6d87baf44d5d87529e7a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee3c8797_bf75bca4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-11-01T19:58:27Z",
      "side": 1,
      "message": "I don\u0027t understand this sentence",
      "range": {
        "startLine": 15,
        "startChar": 38,
        "endLine": 16,
        "endChar": 67
      },
      "revId": "a4f4c39c51295b474f6b6d87baf44d5d87529e7a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb21cf07_6b5466ac",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 78063
      },
      "writtenOn": "2020-11-02T22:31:13Z",
      "side": 1,
      "message": "Ack; I can improve it soon.",
      "parentUuid": "ee3c8797_bf75bca4",
      "range": {
        "startLine": 15,
        "startChar": 38,
        "endLine": 16,
        "endChar": 67
      },
      "revId": "a4f4c39c51295b474f6b6d87baf44d5d87529e7a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e1d4d83_bc19fdb6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-11-01T19:58:27Z",
      "side": 1,
      "message": "Do you have evidence that this works on NFS and the typically involved NFS client caching without causing corruption like lost ref updates ? If you can trust timestamps for packed-refs why can\u0027t you also trust them for the pack folder ?\n\nI think if you can trust file timestamps or not depends on the file system but shouldn\u0027t depend on the actual file.",
      "revId": "a4f4c39c51295b474f6b6d87baf44d5d87529e7a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "338c5db6_cadce4b7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 78063
      },
      "writtenOn": "2020-11-02T22:31:13Z",
      "side": 1,
      "message": "\u003e Do you have evidence that this works on NFS and the typically involved NFS client caching without causing corruption like lost ref updates ? If you can trust timestamps for packed-refs why can\u0027t you also trust them for the pack folder ?\n\nOur evidence came from trying to use the aforementioned jgit commit 218cf340 in production. We had to revert that specific commit (server) and pin our jgit gc client to a version before that commit. Otherwise our jgit performance would severely degrade.\n\n\u003e I think if you can trust file timestamps or not depends on the file system but shouldn\u0027t depend on the actual file.\n\nWell, after doing as above, we were able to recover usable jgit performance again. At least that is our experience with this and given our own NFS storage setup, plus our large repos and their characteristics. Maybe other experiences elsewhere differed. That\u0027s why this proposed config option defaults to the existing one.\n\nWe need to benefit from this cleaner option, as opposed to reverting and pinning to a much older version. We also need to match our client and server versions as we upgrade.",
      "parentUuid": "9e1d4d83_bc19fdb6",
      "revId": "a4f4c39c51295b474f6b6d87baf44d5d87529e7a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfc69924_839ca051",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-11-03T00:22:25Z",
      "side": 1,
      "message": "Sure, performance is better if we assume timestamps are always correct and can be used to detect if there was a change.\n\nMy concern is regarding correctness. Would you accept lost ref updates in favour of better performance ? I\u0027d expect if you cannot trust metadata of the pack folder to be always correct because the NFS client caches file metadata then you also can\u0027t trust it for the metadata of other files e.g. packed-refs.\n\nCan you implement a test rapidly updating refs from multiple threads using PackedBatchRefUpdate which fails if there are lost updates and run that for many iterations on a NFS filesystem ?",
      "parentUuid": "338c5db6_cadce4b7",
      "revId": "a4f4c39c51295b474f6b6d87baf44d5d87529e7a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abf1474e_247a67ca",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 5
      },
      "writtenOn": "2020-11-09T08:56:26Z",
      "side": 1,
      "message": "I am asking the same question as Matthias: Do you really want to not trust mtimes of folders but trust mtime of files?\nBut there is one thing where I agree the commit 218cf340 is problematic. The config option is called trust\"folder\"stat\nand I introduced to use this config option to deal with stats of files. Difficult decision: introducing trustfilestat\nmaybe correctly telling where we want to special-handle mtimes, but it is not proven (to me) that this is a functionality\nwhich is bringing benefits. Yes, it\u0027s faster, but maybe incorrect with this option.",
      "parentUuid": "dfc69924_839ca051",
      "revId": "a4f4c39c51295b474f6b6d87baf44d5d87529e7a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15a3e64e_3d2b27f9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 97483
      },
      "writtenOn": "2020-11-11T20:46:18Z",
      "side": 1,
      "message": "\u0027trustfilestat\u0027 doesn\u0027t really tell the full story of the refs. Why don\u0027t we have a more explicit flag for that?\n\nExample: trustRefStat?\n\nP.S. Having trustRefStat set to true won\u0027t be a big issue anymore, once [1] will be merged.\n\n[1] https://gerrit-review.googlesource.com/c/plugins/high-availability/+/284999",
      "range": {
        "startLine": 18,
        "startChar": 27,
        "endLine": 18,
        "endChar": 40
      },
      "revId": "a4f4c39c51295b474f6b6d87baf44d5d87529e7a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdc01f83_557aedc0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 5
      },
      "writtenOn": "2020-11-12T09:45:13Z",
      "side": 1,
      "message": "We want to introduce the possibility to trust the mtime of files containing refs but not trust the mtime of folders potentially containing files containing refs. And we are doing that only in the context of ref-handling (not e.g. for handling of work-tree files, config files, etc). I like the idea to have a config param which name contains \u0027ref\u0027. I think a boolean parameter trustRefStat is no sufficient because it doesn\u0027t express the different handling of refs based on their storage. So maybe a config param trustRefStat with values \u0027true\u0027 (trust mtime of all file/folders containing refs), \u0027false\u0027 (never trust mtime of files/folders containing refs) and \u0027filesOnly\u0027 (trust mtime of files containing refs e.g. in objects/pack but don\u0027t trust the mtime of folders containing files with refs), \u0027foldersOnly\u0027 (if this is really needed?) would be good.",
      "parentUuid": "15a3e64e_3d2b27f9",
      "range": {
        "startLine": 18,
        "startChar": 27,
        "endLine": 18,
        "endChar": 40
      },
      "revId": "a4f4c39c51295b474f6b6d87baf44d5d87529e7a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d052cac_9b225392",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 97483
      },
      "writtenOn": "2020-11-12T12:44:36Z",
      "side": 1,
      "message": "\u003e We want to introduce the possibility to trust the mtime of files containing refs but not trust the mtime of folders potentially containing files containing refs. And we are doing that only in the context of ref-handling (not e.g. for handling of work-tree files, config files, etc). I like the idea to have a config param which name contains \u0027ref\u0027. I think a boolean parameter trustRefStat is no sufficient because it doesn\u0027t express the different handling of refs based on their storage. So maybe a config param trustRefStat with values \u0027true\u0027 (trust mtime of all file/folders containing refs), \u0027false\u0027 (never trust mtime of files/folders containing refs) and \u0027filesOnly\u0027 (trust mtime of files containing refs e.g. in objects/pack but don\u0027t trust the mtime of folders containing files with refs), \u0027foldersOnly\u0027 (if this is really needed?) would be good.\n\nI like your 3-state idea (true, false, foldersOnly). The reason why it should more tied to \u0027ref\u0027 rather than files/folders in general is because those are the only *mutable* entity that can cause problems.\n\nExample: you have two JGit Servers that are sharing the same repos over NFS. If they are both creating a new SHA1 at the same time, they won\u0027t conflict on anything, unless there is a SHA1 collision of course. If they are both updating the *same ref*, they will get in trouble because they both want to update a mutable entity from an initial state S0 to two different diverging states.\n\nWith [1] we will prevent that situation to happen using a global ref-db, making then the concurrent update of refs possible, even without having to re-read all the refs all the times from the filesystem. How? Just because the global ref-db contains a globally consistent view of the refs.\n\nIt would be nice to have then [1] refactored and integrated with JGit in the future, so that we could benefit from it also outside the Gerrit Code Review context.",
      "parentUuid": "bdc01f83_557aedc0",
      "range": {
        "startLine": 18,
        "startChar": 27,
        "endLine": 18,
        "endChar": 40
      },
      "revId": "a4f4c39c51295b474f6b6d87baf44d5d87529e7a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cefb3a40_3ac641c6",
        "filename": "Documentation/config-options.md",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 97483
      },
      "writtenOn": "2020-11-11T20:46:18Z",
      "side": 1,
      "message": "trustRefStat?",
      "range": {
        "startLine": 47,
        "startChar": 8,
        "endLine": 47,
        "endChar": 21
      },
      "revId": "a4f4c39c51295b474f6b6d87baf44d5d87529e7a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2a7bbc5_9ad417b5",
        "filename": "Documentation/config-options.md",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 97483
      },
      "writtenOn": "2020-11-11T20:46:18Z",
      "side": 1,
      "message": "+ default: equal to the same value of trustFolderStat",
      "revId": "a4f4c39c51295b474f6b6d87baf44d5d87529e7a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ec7ea89_e7a925a5",
        "filename": "Documentation/config-options.md",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 97483
      },
      "writtenOn": "2020-11-11T20:46:18Z",
      "side": 1,
      "message": "can massively impact performance for repositories with a large number of refs.",
      "range": {
        "startLine": 47,
        "startChar": 266,
        "endLine": 47,
        "endChar": 285
      },
      "revId": "a4f4c39c51295b474f6b6d87baf44d5d87529e7a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "722910c9_b3ea16f9",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 3
      },
      "lineNbr": 909,
      "author": {
        "id": 97483
      },
      "writtenOn": "2020-11-11T20:46:18Z",
      "side": 1,
      "message": "trustRefStat?",
      "range": {
        "startLine": 909,
        "startChar": 10,
        "endLine": 909,
        "endChar": 23
      },
      "revId": "a4f4c39c51295b474f6b6d87baf44d5d87529e7a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35e1b9ba_058fbf52",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/lib/ConfigConstants.java",
        "patchSetId": 3
      },
      "lineNbr": 699,
      "author": {
        "id": 97483
      },
      "writtenOn": "2020-11-11T20:46:18Z",
      "side": 1,
      "message": "trustrefstat?",
      "range": {
        "startLine": 699,
        "startChar": 56,
        "endLine": 699,
        "endChar": 69
      },
      "revId": "a4f4c39c51295b474f6b6d87baf44d5d87529e7a",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    }
  ]
}