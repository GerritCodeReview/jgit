{
  "comments": [
    {
      "key": {
        "uuid": "27d6470d_ff93e25e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 44628
      },
      "writtenOn": "2015-12-22T21:19:15Z",
      "side": 1,
      "message": "Fails for me consistently with the expected EOFException without the fix in WorkingTreeIterator, and succeeds consistently with the fix. Perhaps someone with a newer OS X than my 10.7.5 could verify? Installed cgit version on my machine used to prepare the test repo and also for cloning during the test is git 2.2.1.",
      "revId": "0530aa878a4655458cc2b24b3530afd63752ec5d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_bf25da5e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 5338
      },
      "writtenOn": "2015-12-23T00:37:07Z",
      "side": 1,
      "message": "Applied this patch on master and maven didn\u0027t complain anything on Mac 10.11.",
      "parentUuid": "27d6470d_ff93e25e",
      "revId": "0530aa878a4655458cc2b24b3530afd63752ec5d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_5fc12e96",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 44628
      },
      "writtenOn": "2015-12-23T10:17:30Z",
      "side": 1,
      "message": "Ok, so it works not just for me :-), and 10.11 behaves still the same way regarding NFC/NFD. Thanks for checking.",
      "parentUuid": "27d6470d_bf25da5e",
      "revId": "0530aa878a4655458cc2b24b3530afd63752ec5d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_5f2e8e46",
        "filename": "org.eclipse.jgit.test/tst-rsrc/org/eclipse/jgit/indexdiff/filerepo.git.zip",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-12-23T00:35:51Z",
      "side": 1,
      "message": "I had to be extra cautious in reviewing this because the .git/config in a git repository can provide arbitrary code for git to execute.\n\nIt would have been safer and easier to review if the repo were in a bundle file (see man git-bundle) or a fast-import stream. E.g. given a fast-import stream:\n \n blob\n mark :1\n data 10\n äéü.txt\n blob\n mark :2\n data 8\n test.txt\n blob\n mark :3\n data 5\n Test\n \n blob\n mark :4\n data 7\n äéü\n \n reset refs/heads/master\n commit refs/heads/master\n mark :5\n author A U Thor \u003cauthor@example.com\u003e 1450727513 +0100\n committer Tom \u003ctw201207@gmail.com\u003e 1450727513 +0100\n data 26\n Initial commit with links\n M 120000 :1 testfolder/aeu.txt\n M 120000 :2 testfolder/link.txt\n M 100644 :3 testfolder/test.txt\n M 100644 :4 \"testfolder/\\303\\244\\303\\251\\303\\274.txt\"\n \n(I generated the above by running \u0027git fast-export master\u0027 in the test repository) I can revive the repository with\n\n git init filerepo\n git -C filerepo fast-import \u003c/path/to/fast-export/output\n git -C filerepo checkout -f",
      "revId": "0530aa878a4655458cc2b24b3530afd63752ec5d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_1fb8862f",
        "filename": "org.eclipse.jgit.test/tst-rsrc/org/eclipse/jgit/indexdiff/filerepo.git.zip",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 44628
      },
      "writtenOn": "2015-12-23T10:15:37Z",
      "side": 1,
      "message": "Didn\u0027t know about that -- will change to use that. I didn\u0027t like the binary zip format either.",
      "parentUuid": "27d6470d_5f2e8e46",
      "revId": "0530aa878a4655458cc2b24b3530afd63752ec5d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_df3a9e82",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/indexdiff/IndexDiffWithSymlinkTest.java",
        "patchSetId": 2
      },
      "lineNbr": 189,
      "author": {
        "id": 951
      },
      "writtenOn": "2015-12-23T00:35:51Z",
      "side": 1,
      "message": "Will this continue to work with future versions of Java? Is there some other way to read the raw symlink --- e.g., does invoking \"readlink\" do the trick?",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 189,
        "endChar": 45
      },
      "revId": "0530aa878a4655458cc2b24b3530afd63752ec5d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d6470d_ffb20250",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/indexdiff/IndexDiffWithSymlinkTest.java",
        "patchSetId": 2
      },
      "lineNbr": 189,
      "author": {
        "id": 44628
      },
      "writtenOn": "2015-12-23T10:15:37Z",
      "side": 1,
      "message": "I see no way to obtain the raw bytes using readlink/stat. To make this future-proof, I could just skip the assertions on the raw path content if rawPath() returns null.\n\nOr try to verify the length only (10 for NFC, 13 for NFD) -- if there\u0027s a way to obtain that safely. Maybe ls -l aeu.txt and extract the number from the output. Other options might be\n* Java: BasicFileAttributes.size(), but the semantics of that method is undefined (implementation-specific) for links\n* stat -f \"%z\" aeu.txt (MacOS/BSD) or stat -c \"%s\" aeu.txt (GNU stat) -- we don\u0027t know which one is installed",
      "parentUuid": "27d6470d_df3a9e82",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 189,
        "endChar": 45
      },
      "revId": "0530aa878a4655458cc2b24b3530afd63752ec5d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}