{
  "comments": [
    {
      "key": {
        "uuid": "AAALzn///2s\u003d",
        "filename": "jgitnative/lstat.c",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-11-08T21:39:54Z",
      "side": 1,
      "message": "We should also special case EACCES here.  Not being able to access part of the directory path is a reasonable failure that we can expect to happen, and should translate into a useful error message for the end user.\n\nBut other errors like EFAULT, EIO, ELOOP, ENAMETOOLONG all seem like things we can say \"should never happen\", and if they do, tossing up the generic LStatException is probably fine.",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALz3////w\u003d",
        "filename": "jgitnative/lstat.c",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 4
      },
      "writtenOn": "2010-11-19T23:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAALzn///2s\u003d",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALzn///2o\u003d",
        "filename": "jgitnative/lstat.c",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-11-08T21:39:54Z",
      "side": 1,
      "message": "That will be an API change, in a public API.  But we should do it once we can drop support for Java 6.  Which is years away from now.",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALz3////s\u003d",
        "filename": "jgitnative/lstat.c",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 4
      },
      "writtenOn": "2010-11-19T23:39:28Z",
      "side": 1,
      "message": "yeah",
      "parentUuid": "AAALzn///2o\u003d",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALzn///2k\u003d",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/util/fs/FSAccessTest.java",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-11-08T21:39:54Z",
      "side": 1,
      "message": "This is going to suck, but we need to test both implementations.  If the native implementation doesn\u0027t load, we should abort the test with a failure.\n\nWe can use a system property to disable the native implementation test.  Developers who are trying to build JGit and can\u0027t run the native implementation on their platform would just need to define the system property on the Maven command line to bypass it.  So something like:\n\n  public void test_lstat_native() throws Exception {\n    if (!Boolean.valueOf(\"org.eclipse.jgit.fs.native\"))\n      return;\n\n    FSAccess native \u003d new FSAccessNative();\n    ...somehow assert native has native JNI loaded...\n    do_lstat(native);  \n  }\n\n  public void test_lstat_java() throws Exception {\n    do_lstat(new FSAccessJava());\n  }\n\n  private void do_lstat(FSAccess imp) throws Exception {\n    ... this test method ...\n  }",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAL0n///+E\u003d",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/util/fs/FSAccessTest.java",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 4
      },
      "writtenOn": "2010-11-19T23:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAALzn///2k\u003d",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALzn///2g\u003d",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/util/fs/FSAccessTest.java",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-11-08T21:39:54Z",
      "side": 1,
      "message": "I don\u0027t think that is true.  It should only be true if the file was created and never written to, e.g. by the creat(2) system call.  I think its legal for close(2) to update the mtime of a file after it was opened for writing, where the open call set the ctime.  So I don\u0027t think we should rely on this assumption in our unit test.\n\nHowever, we should be able to rely on mtime being \u003e\u003d ctime.",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAL0H///1c\u003d",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/util/fs/FSAccessTest.java",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 4
      },
      "writtenOn": "2010-11-19T23:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAALzn///2g\u003d",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALzn///2c\u003d",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/util/fs/FSAccessTest.java",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-11-08T21:39:54Z",
      "side": 1,
      "message": "Depends on the operating system, doesn\u0027t it?  On Win32 we probably will be setting all of these to 0 (except mode) because there isn\u0027t a sane concept of device or inode there, nor is there a great way to say the \"group\" or \"user\" of a file, since they use ACLs as their only access control system.\n\nHowever, you could expose a package-only visible native method that tells you the *type* of the JNI support that is loaded (e.g. isPOSIX() method) and have the unit test probe that before making these assertions.  That way on Win32 we can assert that these are in fact 0.",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAL0n///+A\u003d",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/util/fs/FSAccessTest.java",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 4
      },
      "writtenOn": "2010-11-19T23:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAALzn///2c\u003d",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALzn///2Y\u003d",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/util/fs/FSAccessTest.java",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-11-08T21:39:54Z",
      "side": 1,
      "message": "Haha.  I love how you defined the text to fit a particular answer.  :-)",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAL0n///98\u003d",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/util/fs/FSAccessTest.java",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 4
      },
      "writtenOn": "2010-11-19T23:39:28Z",
      "side": 1,
      "message": "this was pure coincidence, I also like the answer :-)",
      "parentUuid": "AAALzn///2Y\u003d",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALzn///3g\u003d",
        "filename": "org.eclipse.jgit/META-INF/MANIFEST.MF",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 4
      },
      "writtenOn": "2010-11-19T23:39:28Z",
      "side": 1,
      "message": "we don\u0027t need this line",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALzn///3Q\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/fs/FSAccess.java",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-11-08T21:39:54Z",
      "side": 1,
      "message": "We should store the exceptions that were thrown in a static member, and make it accessible so GUIs can help a user resolve a native library load failure:\n\n  private static Throwable nativeLoadError;\n\n  public static Throwable getNativeImplementationLoadException() {\n    return nativeLoadError;\n  }\n\nThat resolves the problem you have here about logging to System.out.println() when it doesn\u0027t load.  :-)",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALz3////Q\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/fs/FSAccess.java",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 4
      },
      "writtenOn": "2010-11-19T23:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAALzn///3Q\u003d",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALzn///3U\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/fs/FSAccess.java",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-11-08T21:39:54Z",
      "side": 1,
      "message": "Make this an abstract member and return true in FSAccessNative and false in FSAccessJava.",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALz3///+4\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/fs/FSAccess.java",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 4
      },
      "writtenOn": "2010-11-19T23:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAALzn///3U\u003d",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALzn///3M\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/fs/FSAccess.java",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-11-08T21:39:54Z",
      "side": 1,
      "message": "Please document that lstat() returns data about a symbolic link and not the target of the link.",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALz3///+0\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/fs/FSAccess.java",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 4
      },
      "writtenOn": "2010-11-19T23:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAALzn///3M\u003d",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALzn///28\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/fs/FSAccessJava.java",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-11-08T21:39:54Z",
      "side": 1,
      "message": "Missing copyright header.",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALz3///+Y\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/fs/FSAccessJava.java",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 4
      },
      "writtenOn": "2010-11-19T23:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAALzn///28\u003d",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALzn///24\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/fs/FSAccessJava.java",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-11-08T21:39:54Z",
      "side": 1,
      "message": "Don\u0027t truncate the length.  The lstatNative API needs to supply the length as a 64 bit value.  Which means you may need to use an int[11] and split the 64 bit value into two segments, and put it back together in Java.  Or make the members of the LStat object package accessible and populate them directly inside of the JNI code.  (I say this never having written JNI code... but it must be possible to freeze an object\u0027s location in memory and then populate its fields via some sort of set int or set long JNI operation.)",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALz3///+c\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/fs/FSAccessJava.java",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 4
      },
      "writtenOn": "2010-11-19T23:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAALzn///24\u003d",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALzn///3I\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/fs/FSAccessNative.java",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-11-08T21:39:54Z",
      "side": 1,
      "message": "Drop this static ctor?",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALz3///+U\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/fs/FSAccessNative.java",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 4
      },
      "writtenOn": "2010-11-19T23:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAALzn///3I\u003d",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALzn///3E\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/fs/FSAccessNative.java",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-11-08T21:39:54Z",
      "side": 1,
      "message": "Should this be package visible only?",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALz3///+Q\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/fs/FSAccessNative.java",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 4
      },
      "writtenOn": "2010-11-19T23:39:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAALzn///3E\u003d",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALzn///3A\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/fs/FSAccessNative.java",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-11-08T21:39:54Z",
      "side": 1,
      "message": "I wonder if we can get away with getPath() here instead of getAbsolutePath().  If the application was given a relative path into the java.io.File object, its relative to the JVM\u0027s current working directory, which cannot be changed.  That can be easily passed down into the native layer, can\u0027t it?\n\nThe advantage would be that in some applications we might be able to avoid VFS traversal up to the root, and then traversal back down on every file we lstat() in the working directory.  For C Git this actually makes a performance difference on Linux, even though the VFS on Linux is incredibly fast.",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALzn///20\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/fs/LStat.java",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-11-08T21:39:54Z",
      "side": 1,
      "message": "Style-nit: Unnecessary blank line.",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALzn///2w\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/fs/LStat.java",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-11-08T21:39:54Z",
      "side": 1,
      "message": "This should be a long.",
      "revId": "b009f829c8a448726982dd69a27a41ec71185811",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}