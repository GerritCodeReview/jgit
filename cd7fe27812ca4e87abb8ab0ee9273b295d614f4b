{
  "comments": [
    {
      "key": {
        "uuid": "512c8b13_3a8f5557",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/GcOrphanFilesTest.java",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1684
      },
      "writtenOn": "2020-11-25T18:30:58Z",
      "side": 1,
      "message": "More clear: keepPreventsDeletionOfIndexFileForMissingPackFile",
      "range": {
        "startLine": 80,
        "startChar": 13,
        "endLine": 80,
        "endChar": 44
      },
      "revId": "cd7fe27812ca4e87abb8ab0ee9273b295d614f4b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "097146ef_7a1a5e55",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java",
        "patchSetId": 2
      },
      "lineNbr": 968,
      "author": {
        "id": 1684
      },
      "writtenOn": "2020-11-25T18:30:58Z",
      "side": 1,
      "message": "Why is sorting order relevant here?",
      "range": {
        "startLine": 968,
        "startChar": 5,
        "endLine": 968,
        "endChar": 40
      },
      "revId": "cd7fe27812ca4e87abb8ab0ee9273b295d614f4b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "884f179c_669ca014",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java",
        "patchSetId": 2
      },
      "lineNbr": 968,
      "author": {
        "id": 241433
      },
      "writtenOn": "2020-11-25T18:44:20Z",
      "side": 1,
      "message": "@DavidO: I am assuming a file is considered orphan if it doesn\u0027t have an associated pack or keep file.\n\nOrdering is important to detect the orphans later on at line 979. This sorting is forcing the pack or keep file to appear first to determine the prefix of the group of files we want to process. See a couple of examples below:\n\nCASE 1: No Orphans\n\nGiven the following files, sorted as specified at line 968:\n\npack-1234.pack\npack-1234.idx\n\n1st loop cycle:\nn \u003d pack-1234.pack\nbase \u003d pack-1234\n\n2nd loop cycle:\nn \u003d pack-1234.idx\nbase \u003d pack-1234\n\npack-1234.idx won\u0027t be discarded since statement at line 990 is false.\n\n\nCASE 2: Orphans detected\n\nGiven the following files, sorted as specified at line 968:\n\npack-1234.pack\npack-5678.idx\n\n1st loop cycle:\nn \u003d pack-1234.pack\nbase \u003d pack-1234\n\n2nd loop cycle:\nn \u003d pack-5678.idx\nbase \u003d pack-1234\n\npack-5678.idx will be discarded since statement at line 990 is true.\n\nHope it makes sense.",
      "parentUuid": "097146ef_7a1a5e55",
      "range": {
        "startLine": 968,
        "startChar": 5,
        "endLine": 968,
        "endChar": 40
      },
      "revId": "cd7fe27812ca4e87abb8ab0ee9273b295d614f4b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7d3c949_92656161",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java",
        "patchSetId": 2
      },
      "lineNbr": 968,
      "author": {
        "id": 1684
      },
      "writtenOn": "2020-11-25T19:25:16Z",
      "side": 1,
      "message": "Thanks @ponch!\n\nI was confused with reversed sorting order. It works even with extended logic to .keep file, because the sorting in reverse order would be:\n\n* pack-1234.pack\n* pack-1234.idx\n\nin case if pack file is in place, and:\n\n* pack-1234.keep\n* pack-1234.idx\n\nin case if keep file is in place.\n\nIf .keep suffix would be instead .abc suffix, then the algorithm wouldn\u0027t work as is and the idx file would be removed.",
      "parentUuid": "884f179c_669ca014",
      "range": {
        "startLine": 968,
        "startChar": 5,
        "endLine": 968,
        "endChar": 40
      },
      "revId": "cd7fe27812ca4e87abb8ab0ee9273b295d614f4b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "627cb26c_87cf68b5",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java",
        "patchSetId": 2
      },
      "lineNbr": 968,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-11-25T19:34:14Z",
      "side": 1,
      "message": "exactly, this avoids the need to look-ahead to find out which of the other files for the same pack are present",
      "parentUuid": "884f179c_669ca014",
      "range": {
        "startLine": 968,
        "startChar": 5,
        "endLine": 968,
        "endChar": 40
      },
      "revId": "cd7fe27812ca4e87abb8ab0ee9273b295d614f4b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "047e091c_cd19d240",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java",
        "patchSetId": 2
      },
      "lineNbr": 971,
      "author": {
        "id": 1684
      },
      "writtenOn": "2020-11-25T18:30:58Z",
      "side": 1,
      "message": "Unrelated to this change: should this be logged like on line 994 below, as mentioned by Luca on the original change?",
      "range": {
        "startLine": 971,
        "startChar": 3,
        "endLine": 971,
        "endChar": 12
      },
      "revId": "cd7fe27812ca4e87abb8ab0ee9273b295d614f4b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3df5218_f6f86fb6",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/GC.java",
        "patchSetId": 2
      },
      "lineNbr": 990,
      "author": {
        "id": 241433
      },
      "writtenOn": "2020-11-25T18:31:29Z",
      "side": 1,
      "message": "What about renaming \"skip\" to something more specific to this context, i.e.: \"checkForOrphans\"? \n\nI believe, the following statement in particular would read better:\n\nif (checkForOrphans \u0026\u0026 (base \u003d\u003d null || !n.startsWith(base))) { ... }\n\nMaybe the \"base \u003d\u003d null || !n.startsWith(base)\" check could also be wrapped in a isOrphan() method? \n\nWDYT?",
      "range": {
        "startLine": 990,
        "startChar": 8,
        "endLine": 990,
        "endChar": 13
      },
      "revId": "cd7fe27812ca4e87abb8ab0ee9273b295d614f4b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    }
  ]
}