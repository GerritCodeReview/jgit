{
  "comments": [
    {
      "key": {
        "uuid": "AAALun///Mg\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutConflictException.java",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-05-20T17:37:21Z",
      "side": 1,
      "message": "Style-nit: Spaces around operators (applies also to a number of spots below).",
      "revId": "40dff446c15ce5310f8a69e561e4c66b4b31a0c4",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALun///Mc\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutConflictException.java",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-05-20T17:37:21Z",
      "side": 1,
      "message": "Style-nit: Unnecessary parens.  If there\u0027s ever a place you don\u0027t need parens, its right here in an assignment of one variable to another.  :-)",
      "revId": "40dff446c15ce5310f8a69e561e4c66b4b31a0c4",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALun///MY\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutConflictException.java",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-05-20T17:37:21Z",
      "side": 1,
      "message": "s/Pathes/Paths/",
      "revId": "40dff446c15ce5310f8a69e561e4c66b4b31a0c4",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALun///Mk\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java",
        "patchSetId": 4
      },
      "lineNbr": 161,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-05-20T17:37:21Z",
      "side": 1,
      "message": "Unrelated reformatting in this file?  Looks like you can revert it from this change.",
      "revId": "40dff446c15ce5310f8a69e561e4c66b4b31a0c4",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALun///MU\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/MergeCommand.java",
        "patchSetId": 4
      },
      "lineNbr": 83,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-05-20T17:37:21Z",
      "side": 1,
      "message": "The problem with a HashMap is it doesn\u0027t preserve the order the caller passed the commits to us in.  We should maintain that order, because its the order we\u0027ll attempt to do the octopus merge in, and the order we write the parents out in the commit as.  If you keep using a Map\u003cString,ObjectId\u003e here you should use a LinkedHashMap to ensure the insertion order is preserved.  Or, switch to a List\u003cRef\u003e.",
      "revId": "40dff446c15ce5310f8a69e561e4c66b4b31a0c4",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALun///MM\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/MergeCommand.java",
        "patchSetId": 4
      },
      "lineNbr": 102,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-05-20T17:37:21Z",
      "side": 1,
      "message": "We probably should also abort if commits is empty.  You need at least one other thing to merge with besides head.",
      "revId": "40dff446c15ce5310f8a69e561e4c66b4b31a0c4",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALun///MI\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/MergeCommand.java",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-05-20T17:37:21Z",
      "side": 1,
      "message": "This is really undefined when there is more than one commit.\n\nInstead you should look at the strategy, and then enforce some sanity on the commits member.  E.g. add a member to MergeStrategy to help us decide if the number of commits is reasonable.  Then the already-up-to-date and fast-forward-only strategies only need to accept 1 commit, and reject functioning when more than 1 commit is given.\n\nI do see that you are trying to collapse multiple commits that are reachable all together in this loop.  But that\u0027s probably just a pre-processing step that we can do at the beginning of the function, no matter what strategy was configured.  Even in an octopus merge, it doesn\u0027t make sense to create an 8-way merge if it can really be a 2-way because the other 6 commits are already reachable.\n\nGerrit Code Review has some logic to do this in [1].  Ignore the CAN_MERGE stuff, that\u0027s there only to support the code review workflow and ensure a commit was approved.  The bulk of the sorting logic is about computing the commits that will be merged, and removing them from incoming (what the caller asked us to merge) if they are already reachable.\n\n[1] https://android.git.kernel.org/?p\u003dtools/gerrit.git;a\u003dblob;f\u003dgerrit-server/src/main/java/com/google/gerrit/server/git/MergeSorter.java;hb\u003dHEAD\n\nYou know what, maybe for right now just enforce that commits.size() \u003d\u003d 1 at the start of the method (and maybe also in include, assert that its empty), and simplify the code around that assertion.  commits.size() \u003e 1 will only be useful once we have all other aspects of the merge code working... and we can come back and revisit how to sort the heads and determine up-to-date in the octopus case.",
      "revId": "40dff446c15ce5310f8a69e561e4c66b4b31a0c4",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAALun///MQ\u003d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/MergeCommand.java",
        "patchSetId": 4
      },
      "lineNbr": 246,
      "author": {
        "id": 1
      },
      "writtenOn": "2010-05-20T17:37:21Z",
      "side": 1,
      "message": "This needs to be commit.copy().  AnyObjectId can be a MutableObjectId, which can change after-the-fact.  copy() returns you an ObjectId which cannot be mutated.  If the input was already an immutable ObjectId, copy() just returns the same object.",
      "revId": "40dff446c15ce5310f8a69e561e4c66b4b31a0c4",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}