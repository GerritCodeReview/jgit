{
  "comments": [
    {
      "key": {
        "uuid": "c7880b39_efd67e36",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackedBatchRefUpdate.java",
        "patchSetId": 4
      },
      "lineNbr": 168,
      "author": {
        "id": 1628
      },
      "writtenOn": "2017-07-10T16:43:41Z",
      "side": 1,
      "message": "Resolve before submitting.",
      "range": {
        "startLine": 168,
        "startChar": 2,
        "endLine": 168,
        "endChar": 75
      },
      "revId": "e220acdbffb1f01603f8579bc2aa1b8b226ea330",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_8f2b3ab8",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackedBatchRefUpdate.java",
        "patchSetId": 4
      },
      "lineNbr": 168,
      "author": {
        "id": 383
      },
      "writtenOn": "2017-07-10T16:48:36Z",
      "side": 1,
      "message": "Agreed. Any thoughts/guidance from my reviewers? :)",
      "parentUuid": "c7880b39_efd67e36",
      "range": {
        "startLine": 168,
        "startChar": 2,
        "endLine": 168,
        "endChar": 75
      },
      "revId": "e220acdbffb1f01603f8579bc2aa1b8b226ea330",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_6f144e73",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackedBatchRefUpdate.java",
        "patchSetId": 4
      },
      "lineNbr": 168,
      "author": {
        "id": 383
      },
      "writtenOn": "2017-07-10T16:52:34Z",
      "side": 1,
      "message": "If you ask me, I don\u0027t know why BatchRefUpdate#execute throws IOException at all. It makes it confusing for downstream callers to need to distinguish between unexpected errors that throw IOException and unexpected errors that set results on the ReceiveCommand. I am thinking of a couple places in code your team owns that has to deal with this exact problem :)\n\nFrankly I think that the \"throws IOException\" is a license for implementers to be lazy and let basically every kind of IOException from the underlying storage propagate through. If we don\u0027t think that implementers should have a license to be lazy, maybe we should make it so execute can\u0027t throw (which is a backwards-incompatible change, sigh).\n\nSo what I\u0027ve done here is to be lazy and not catch anything I don\u0027t have to.",
      "parentUuid": "c7880b39_8f2b3ab8",
      "range": {
        "startLine": 168,
        "startChar": 2,
        "endLine": 168,
        "endChar": 75
      },
      "revId": "e220acdbffb1f01603f8579bc2aa1b8b226ea330",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_5d2cab9a",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackedBatchRefUpdate.java",
        "patchSetId": 4
      },
      "lineNbr": 168,
      "author": {
        "id": 1628
      },
      "writtenOn": "2017-07-11T15:23:29Z",
      "side": 1,
      "message": "It is unfortunate the contract isn\u0027t clear. I could see throwing IOExceptions on underlying storage system errors only, and setting status results for higher level git sequencing errors. But I think I agree with you that that is lazy. Any IOException thrown by the underlying layer should probably be caught and examined to see if it is recoverable or to better explain or sanitize the error.\n\nFixing that is an API change that is outside the scope of this change so I think you can just drop this comment.",
      "parentUuid": "c7880b39_6f144e73",
      "range": {
        "startLine": 168,
        "startChar": 2,
        "endLine": 168,
        "endChar": 75
      },
      "revId": "e220acdbffb1f01603f8579bc2aa1b8b226ea330",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_1db303d3",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackedBatchRefUpdate.java",
        "patchSetId": 4
      },
      "lineNbr": 168,
      "author": {
        "id": 383
      },
      "writtenOn": "2017-07-11T15:33:32Z",
      "side": 1,
      "message": "\u003e It is unfortunate the contract isn\u0027t clear. I could see throwing\n \u003e IOExceptions on underlying storage system errors only, and setting\n \u003e status results for higher level git sequencing errors. But I think\n \u003e I agree with you that that is lazy. Any IOException thrown by the\n \u003e underlying layer should probably be caught and examined to see if\n \u003e it is recoverable or to better explain or sanitize the error.\n \nI\u0027d be concerned that there is simply not very much that a low-level JGit library can do to inspect/sanitize arbitrary IOExceptions that might have come from someone else\u0027s storage system implementation. As a high-level application author you might have some idea, but you can\u0027t encode your application-specific ideas into JGit.\n\nThe one exception I can think of off the top of my head here is IOException from the LockFile methods, which are entirely due to the implementation details in this class.\n\n \u003e Fixing that is an API change that is outside the scope of this\n \u003e change so I think you can just drop this comment.\n\nThanks, will do.",
      "parentUuid": "c7880b39_5d2cab9a",
      "range": {
        "startLine": 168,
        "startChar": 2,
        "endLine": 168,
        "endChar": 75
      },
      "revId": "e220acdbffb1f01603f8579bc2aa1b8b226ea330",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_4fe7921e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 4
      },
      "lineNbr": 651,
      "author": {
        "id": 1628
      },
      "writtenOn": "2017-07-10T16:43:41Z",
      "side": 1,
      "message": "Fix whitespace",
      "range": {
        "startLine": 651,
        "startChar": 0,
        "endLine": 651,
        "endChar": 2
      },
      "revId": "e220acdbffb1f01603f8579bc2aa1b8b226ea330",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_bdd2effa",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 4
      },
      "lineNbr": 651,
      "author": {
        "id": 1628
      },
      "writtenOn": "2017-07-11T15:23:29Z",
      "side": 1,
      "message": "Fix whitespace.",
      "range": {
        "startLine": 651,
        "startChar": 0,
        "endLine": 651,
        "endChar": 3
      },
      "revId": "e220acdbffb1f01603f8579bc2aa1b8b226ea330",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_6fe28e0e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 4
      },
      "lineNbr": 1179,
      "author": {
        "id": 1628
      },
      "writtenOn": "2017-07-10T16:43:41Z",
      "side": 1,
      "message": "IIRC this create synthetic accessors, so we avoid using private on these nested classes.",
      "range": {
        "startLine": 1179,
        "startChar": 2,
        "endLine": 1179,
        "endChar": 9
      },
      "revId": "e220acdbffb1f01603f8579bc2aa1b8b226ea330",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_cf2542e3",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 4
      },
      "lineNbr": 1179,
      "author": {
        "id": 383
      },
      "writtenOn": "2017-07-10T16:48:36Z",
      "side": 1,
      "message": "I increased the visibility of the PackedRefList class so it\u0027s visible from PackedBatchRefUpdate. But I do not want this constant to be visible outside this .java file. I understand that the cost of this decision is a synthetic accessor method, but that doesn\u0027t seem like it\u0027s an actual problem in this case.\n\nI mean, if it is really a problem, I can keep PackedRefList private and just move PackedBatchRefUpdate into RefDirectory. But I\u0027d kinda rather not.",
      "parentUuid": "c7880b39_6fe28e0e",
      "range": {
        "startLine": 1179,
        "startChar": 2,
        "endLine": 1179,
        "endChar": 9
      },
      "revId": "e220acdbffb1f01603f8579bc2aa1b8b226ea330",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_af59d662",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 4
      },
      "lineNbr": 1179,
      "author": {
        "id": 383
      },
      "writtenOn": "2017-07-10T16:53:14Z",
      "side": 1,
      "message": "Or we could move NO_PACKED_REFS to a top-level private constant, would that be better?",
      "parentUuid": "c7880b39_cf2542e3",
      "range": {
        "startLine": 1179,
        "startChar": 2,
        "endLine": 1179,
        "endChar": 9
      },
      "revId": "e220acdbffb1f01603f8579bc2aa1b8b226ea330",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_ef8cbe43",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 4
      },
      "lineNbr": 1179,
      "author": {
        "id": 1628
      },
      "writtenOn": "2017-07-11T15:23:29Z",
      "side": 1,
      "message": "Moving it out makes the intent that it is only referenced from this file more clear, imho.",
      "parentUuid": "c7880b39_af59d662",
      "range": {
        "startLine": 1179,
        "startChar": 2,
        "endLine": 1179,
        "endChar": 9
      },
      "revId": "e220acdbffb1f01603f8579bc2aa1b8b226ea330",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_d596a7a1",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 4
      },
      "lineNbr": 1179,
      "author": {
        "id": 383
      },
      "writtenOn": "2017-07-17T15:57:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7880b39_ef8cbe43",
      "range": {
        "startLine": 1179,
        "startChar": 2,
        "endLine": 1179,
        "endChar": 9
      },
      "revId": "e220acdbffb1f01603f8579bc2aa1b8b226ea330",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}