{
  "comments": [
    {
      "key": {
        "uuid": "2721e7e2_7edb4be4",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 4
      },
      "writtenOn": "2015-08-24T15:06:34Z",
      "side": 1,
      "message": "I think this shouldn\u0027t be API of RefDirectory, I\u0027d declare it private",
      "revId": "5a53c279ee734ffac49ed0cfb383761a4096cd4e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_e7ccce66",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 5082
      },
      "writtenOn": "2015-08-24T16:04:15Z",
      "side": 1,
      "message": "This change also checks for NFS stale file handles (in a way that actually does not capture them on our systems):\n\nhttps://git.eclipse.org/r/#/c/45649/5/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ObjectDirectory.java\n\nSo it would be nice to have a public API somewhere for this so that we can create a common way to capture them.  Do you have a suggestion of a good place for such an API?",
      "parentUuid": "2721e7e2_7edb4be4",
      "revId": "5a53c279ee734ffac49ed0cfb383761a4096cd4e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_92026e40",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 4
      },
      "writtenOn": "2015-08-24T20:58:49Z",
      "side": 1,
      "message": "I think org.eclipse.jgit.util.FileUtils would be a better place",
      "parentUuid": "2721e7e2_e7ccce66",
      "revId": "5a53c279ee734ffac49ed0cfb383761a4096cd4e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_7369bc98",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 5082
      },
      "writtenOn": "2015-08-25T14:59:15Z",
      "side": 1,
      "message": "Good suggestion, thanks: https://git.eclipse.org/r/#/c/54489/",
      "parentUuid": "2721e7e2_92026e40",
      "revId": "5a53c279ee734ffac49ed0cfb383761a4096cd4e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_0122b260",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 1
      },
      "lineNbr": 754,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-08-24T08:04:25Z",
      "side": 1,
      "message": "Should we really add a potentially endless loop here? After some iterations and/or some time spent on retrying I would expect this method just gives up and throws an excetion.",
      "revId": "5a53c279ee734ffac49ed0cfb383761a4096cd4e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_a445b41b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 1
      },
      "lineNbr": 754,
      "author": {
        "id": 5082
      },
      "writtenOn": "2015-08-24T13:34:41Z",
      "side": 1,
      "message": "Stale file handles will happen on open files (or directories) only.  That means it will be triggered during the read of this file if the file is deleted by another client.  The looping will cause another open of the file, so the original incident which causes the original stale file handle will not cause another stale filehandle.  Thus, for a single event, a single retry would do.  The loop is here in case the file is replaced again during the reread!  This is possible when someone is pushing a bunch of deleted refs, the packed-refs file could be overwritten many times in a row.  It is unlikely that the writter of the new packed-refs files is faster than our read, but it certainly is possible if they are on a closer/faster connection to the NFS server than we are.  This loop prevents a failure in those cases.  And in those cases, we want the re-read to happen as fast as possible so that we are more likely to beat the writter and at least get a snapshot of the packed-refs file while the writter is constantly changing it.  Any delays in this loop will make it more likely that we have to retry again.",
      "parentUuid": "2721e7e2_0122b260",
      "revId": "5a53c279ee734ffac49ed0cfb383761a4096cd4e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_527ab62f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 1
      },
      "lineNbr": 754,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-08-25T08:14:07Z",
      "side": 1,
      "message": "Ok, got it. We don\u0027t need waiting times before we start a new round.\n\nBut just as a safety net: if your arguments are true then it wouldn\u0027t harm to stop the loop after 10 retries, or? I don\u0027t know NFS implementations very good but if it happens that on some platforms we have a more persistent stale-file-handle-exception then a max-retry would safe us from an endless loop. Or if exceptions arise which contain \"stale .*file .*handle\" but which are not of the type which you expect then a max-retry limit would be safer.",
      "parentUuid": "2721e7e2_a445b41b",
      "revId": "5a53c279ee734ffac49ed0cfb383761a4096cd4e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_132680ee",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 1
      },
      "lineNbr": 754,
      "author": {
        "id": 5082
      },
      "writtenOn": "2015-08-25T13:44:52Z",
      "side": 1,
      "message": "Yes, I have that fear too. Although after testing this, and investigating stale handles to better understand the principals behind them, I am fairly confident that this should be OK.  But as a safety, a retry limit sounds fine (with a warning if exceeded?).  Would the limit be something that we would make configurable via git config?  If so, any suggestions for a fully qualified parameter name?",
      "parentUuid": "2721e7e2_527ab62f",
      "revId": "5a53c279ee734ffac49ed0cfb383761a4096cd4e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_131cc06f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 1
      },
      "lineNbr": 754,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-08-25T14:10:47Z",
      "side": 1,
      "message": "I suggest \"core.packedRefsRetryCount\". Maybe with a default value of 5. Could you tryout what default value helps in your test cases. I would say that if we try to read the packedRefs file 100 times and it always fails with stale file handles then it\u0027s ok to throw an exception. Of course it would be nice to write a warning to our log in such a case.",
      "parentUuid": "2721e7e2_132680ee",
      "revId": "5a53c279ee734ffac49ed0cfb383761a4096cd4e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_b3885400",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 1
      },
      "lineNbr": 754,
      "author": {
        "id": 5082
      },
      "writtenOn": "2015-08-25T14:26:57Z",
      "side": 1,
      "message": "Maybe I should add \u0027stale\u0027 to that name: \"core.packedRefsStaleRetryCount\"?  5 sounds reasonable.  In my testing, a single retry has always been enough (and I tried hard to break that), unless I deliberately replace the packed-refs file again during the retry.",
      "parentUuid": "2721e7e2_131cc06f",
      "revId": "5a53c279ee734ffac49ed0cfb383761a4096cd4e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_33190406",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 1
      },
      "lineNbr": 754,
      "author": {
        "id": 5082
      },
      "writtenOn": "2015-08-25T14:59:15Z",
      "side": 1,
      "message": "Hmm, I have no idea how to get a config value in this class?  If this is in .git/.config, would it ever even get used by most users (gerrit users) who care?  Maybe I shoud just make it 5, and leave making it configurable as an exercise for anyone who wants it to be different?",
      "parentUuid": "2721e7e2_b3885400",
      "revId": "5a53c279ee734ffac49ed0cfb383761a4096cd4e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_33a46402",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 1
      },
      "lineNbr": 754,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-08-25T15:21:03Z",
      "side": 1,
      "message": "I would\n- add a new key CONFIG_KEY_PACKED_REFS_STALE_RETRYCOUNT to ConfigConstants\n- add getPackedRefsStaleRetryCount() to CoreConfig. Here you can define a default value. I would suggest 1 based on your experiments.\n- to access the configured value in RefDirectory use\n\n getRepository().getConfig().get(CoreConfig.KEY).getPackedRefsStaleRetryCount()",
      "parentUuid": "2721e7e2_33190406",
      "revId": "5a53c279ee734ffac49ed0cfb383761a4096cd4e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2721e7e2_41030ac7",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 1
      },
      "lineNbr": 771,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-08-24T08:04:25Z",
      "side": 1,
      "message": "If we hit this situation than we would go through this loop as fast as possible until the stale file handle situation is corrected. I don\u0027t know how long it takes typically until this stale-file-handle situation is resolved but if you expect that this may take seconds then we should add  a sleep() before we continue. Then we wouldn\u0027t burn CPU cycles with active waiting and would allow other threads/processes to do something meaningful.",
      "revId": "5a53c279ee734ffac49ed0cfb383761a4096cd4e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}