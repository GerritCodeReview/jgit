{
  "comments": [
    {
      "key": {
        "uuid": "87929364_bc667f9e",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 98,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-02-05T11:19:08Z",
      "side": 1,
      "message": "That seems to be obsolete and wrong now.",
      "range": {
        "startLine": 96,
        "startChar": 12,
        "endLine": 98,
        "endChar": 63
      },
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_1cea3322",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 98,
      "author": {
        "id": 326
      },
      "writtenOn": "2018-02-05T14:28:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87929364_bc667f9e",
      "range": {
        "startLine": 96,
        "startChar": 12,
        "endLine": 98,
        "endChar": 63
      },
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_5c2afb30",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 166,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-02-05T11:19:08Z",
      "side": 1,
      "message": "The plural of \"path\" is \"paths\", not \"pathes\".\n\nDoes this _have_ to be a set? Seems to me that:\n\n- In the interface just returning Collection\u003cPath\u003e would be fine.\n- An ArrayList would suffice.\n\nBesides, the method is private, and the only call passes only one ref and ignores the result. So the Json result should have only one result, and there should be only one file written. I would change this to\n\n  private Path getLfsResource(Repository db, LfsPointer ptr)\n\nand also do the \"file already exists\" check inside.",
      "range": {
        "startLine": 166,
        "startChar": 12,
        "endLine": 166,
        "endChar": 28
      },
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_bc03df82",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 166,
      "author": {
        "id": 326
      },
      "writtenOn": "2018-02-05T14:28:04Z",
      "side": 1,
      "message": "Corrected most of this, thanks :)\n\nStill I would like to keep that method multi-file capable. Although it is not possible right now, this /will/ be one performance tuning option (multi-file download, parallel download, ...) in the future - git-lfs already has this with the filter-process, which is (unfortunately) not (yet) supported by jgit at all.",
      "parentUuid": "87929364_5c2afb30",
      "range": {
        "startLine": 166,
        "startChar": 12,
        "endLine": 166,
        "endChar": 28
      },
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_dcec2b8a",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 349,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-02-05T11:19:08Z",
      "side": 1,
      "message": "Errh... that looks very much like EGit\u0027s ConfigureGerritAfterCloneTask.runSshCommand(), except that there\u0027s no CredentialsProvider.\n\nTime to make this a public utility function (*with* the CredentialProvider), so that EGit could re-use it? I hate code duplication. If so, the javadoc should state that it returns only the first line sent, and that stderr is discarded.",
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_dc06eb92",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 349,
      "author": {
        "id": 326
      },
      "writtenOn": "2018-02-05T14:28:04Z",
      "side": 1,
      "message": "OK. sounds good. Anybody step up and tell me where to put the code and parameter, and I will happily do the work :)",
      "parentUuid": "87929364_dcec2b8a",
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_df17bd03",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 349,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-02-05T15:21:18Z",
      "side": 1,
      "message": "Good question. I don\u0027t see any existing class where such a utility function would naturally fit. There is a org.eclipse.jgit.util.HttpSupport... maybe a new org.eclipse.jgit.util.SshSupport?\n\nOr does anyone know of a better place?\n\nAPI would need additional parameters:\n* CredentialsProvider credentialsProvider (may be null)\n* int timeout\n* TimeUnit timeUnit (of the timout)\n\nThen use TimeUnit.asMillis(timeout) instead of hard-coded 5000 below.\n\nAt least for Jsch, the JschConfigSessionFactory will already initialize the session with the ConnectTimeout from the config. Which then, however, gets overridden by the timeout passed here... that might need some re-thinking.",
      "parentUuid": "87929364_dc06eb92",
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_ff70f950",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 349,
      "author": {
        "id": 326
      },
      "writtenOn": "2018-02-05T15:52:18Z",
      "side": 1,
      "message": "Sounds like a plan. What would be a good name for that API? I\u0027d somehow like to reflect that it only returns the first line of output, as I would not actually expect that from a general \"runSshCommand\" method...",
      "parentUuid": "87929364_df17bd03",
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_421f7693",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 349,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-02-05T17:09:54Z",
      "side": 1,
      "message": "Don\u0027t know :-) Take a look at my comments when I introduced this method over in EGit and Matthias asked for making it a general-purpose utility: https://git.eclipse.org/r/#/c/54653/3/org.eclipse.egit.core/src/org/eclipse/egit/core/op/ConfigureGerritAfterCloneTask.java@283\n\nFor a version that just gets the first line and discards stderr, maybe readLineViaSsh?\n\nAnd I just noticed that this method assumes that the reader.readLine() actually returns. If the remote hangs, so will this client.",
      "parentUuid": "87929364_ff70f950",
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_9c0d43f4",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 356,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-02-05T11:19:08Z",
      "side": 1,
      "message": "Hard-coded timeout. Can we avoid that? Make the timeout a parameter and pass it in.\n\nA possible way to get the value to pass in is to use the ConnectTimeout setting for the host from the OpenSshConfig (i.e., ~/.ssh/config), or a default value (5 seconds looks reasonable) if not set.",
      "range": {
        "startLine": 356,
        "startChar": 15,
        "endLine": 356,
        "endChar": 20
      },
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_fcfd67e1",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 356,
      "author": {
        "id": 326
      },
      "writtenOn": "2018-02-05T14:28:04Z",
      "side": 1,
      "message": "See above: sounds good. I just have no idea where/how :) If somebody tells me, I will do it.",
      "parentUuid": "87929364_9c0d43f4",
      "range": {
        "startLine": 356,
        "startChar": 15,
        "endLine": 356,
        "endChar": 20
      },
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_7cf7b74c",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 378,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-02-05T11:19:08Z",
      "side": 1,
      "message": "Note that this errorThread halting and process.destroy() may need to be swapped. See https://git.eclipse.org/r/#/c/115802/",
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_1c015378",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 378,
      "author": {
        "id": 326
      },
      "writtenOn": "2018-02-05T14:28:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87929364_7cf7b74c",
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_5c03dbc6",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 387,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-02-05T11:19:08Z",
      "side": 1,
      "message": "Who is responsible for closing the streams? In the normal case, and when there are exceptions?",
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_3cf7efff",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 387,
      "author": {
        "id": 326
      },
      "writtenOn": "2018-02-05T14:28:04Z",
      "side": 1,
      "message": "good question. it does not seem to be well-defined... :( but as the streams are both passed by the caller (actually the creator of the filter command), I\u0027d also expect responsibility for proper handling of IOExceptions (closing streams) with the caller.",
      "parentUuid": "87929364_5c03dbc6",
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_ffa8f963",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 387,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-02-05T15:21:18Z",
      "side": 1,
      "message": "\u003e good question. it does not seem to be well-defined... :( but as the\n \u003e streams are both passed by the caller (actually the creator of the\n \u003e filter command), I\u0027d also expect responsibility for proper handling\n \u003e of IOExceptions (closing streams) with the caller.\n\nWeeelll... in this LFS case, you replace the stream with an internal one that the caller doesn\u0027t even know, so he can\u0027t close it.",
      "parentUuid": "87929364_3cf7efff",
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_bf4d911a",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 387,
      "author": {
        "id": 326
      },
      "writtenOn": "2018-02-05T15:52:18Z",
      "side": 1,
      "message": "Hm. I think that the caller should be responsible for handling the streams passed in to the filter command. the filter in turn is responsible to correctly handle any \u0027internal\u0027 additional resources required (like the swapped in stream in this case, and the aOut stream in the clean filter). Does that make sense?",
      "parentUuid": "87929364_ffa8f963",
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_a2149a73",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 387,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-02-05T17:09:54Z",
      "side": 1,
      "message": "Yes, that does make sense. BTW, in this version the swapped in stream will never be closed if there\u0027s an exception on out.write(). Don\u0027t know what that will do to the remote end, probably it\u0027ll just hang once transmission buffers are full.",
      "parentUuid": "87929364_bf4d911a",
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_3c7a8f2f",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 397,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-02-05T11:19:08Z",
      "side": 1,
      "message": "This doesn\u0027t correspond to the contract of FilterCommand. The javadoc says it returns the number of bytes read from in, so you\u0027d have to sum up length.\n\nAlso, the run() command of a filter is supposed to be called in a loop until it returns -1. I don\u0027t know why the interface was specified like that; personally, I would have left the looping responsibility to the filter itself, but returned a long. With int as return type and looping inside we\u0027re limited to 2GB max. If you want to be able to handle larger files, then don\u0027t loop in here but do rely on being called in a loop, as the contract says. Then it\u0027s the caller\u0027s responsibility to sum up the int values in a long.",
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_9f78d59c",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 397,
      "author": {
        "id": 326
      },
      "writtenOn": "2018-02-05T14:28:04Z",
      "side": 1,
      "message": "true that. not sure whether the definition of the api is good though ;)\n\nI would actually opt for (and implemented) a mix. How about copying a certain amount in one go, but not too much (like max 256MB or so) just to avoid the overhead of excessive buffer allocation, etc. for the small\u0027ish use cases.",
      "parentUuid": "87929364_3c7a8f2f",
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_ff51d9df",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 397,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-02-05T15:21:18Z",
      "side": 1,
      "message": "\u003e true that. not sure whether the definition of the api is good though ;)\n\nIndeed. The more I think about this API the less happy I am. Even with this 8kB buffer, downloading a (typically large) LFS blob may take time. This method should have a progress monitor of some sorts being passed in. If that omission was the reason for the strange API (idea being that the caller would do the progress reporting in that ominous loop), that would still make for rather stuttering progress reporting if you downloaded 256MB chunks (to not overflow the int). Even 256MB may take noticeable time. Progress reporting is perhaps not so important for JGit, but if this gets used via EGit, smooth progress reporting would be good to have.\n\nRepeated allocation and GC of that 8kB buffer could be avoided by making it a field. Allocate once on the first call if still null, null out after read returned -1 or on exception.",
      "parentUuid": "87929364_9f78d59c",
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_ffc2b9cc",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 397,
      "author": {
        "id": 326
      },
      "writtenOn": "2018-02-05T15:52:18Z",
      "side": 1,
      "message": "There is progress reporting for \"Checking out files\" since a recent change. I don\u0027t think that it can get any more fine grained, can it? This would only be possible (AFAICT) if downloading/filtering would be a separate step in the chain. Right now, checking out files will stop at the point where it downloads a file and continue once the file has been checked out (whatever this means in reality - downloading it or taking from the lfs store).\n\nBuffer as a field could be done if progress reporting is of any use (or possible) here. until then I guess it\u0027s fine the way it is...?",
      "parentUuid": "87929364_ff51d9df",
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87929364_8274fec0",
        "filename": "org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/SmudgeFilter.java",
        "patchSetId": 31
      },
      "lineNbr": 397,
      "author": {
        "id": 44628
      },
      "writtenOn": "2018-02-05T17:09:54Z",
      "side": 1,
      "message": "Agreed. I didn\u0027t check if progress monitors are indeed passed down far enough so that they could get to the filtering. Anyway, JGit progress monitoring doesn\u0027t quite fit the needs of Eclipse, and EGit thus resorts to doing unbounded progress reporting for JGit operations. (If you\u0027re interested, see https://git.eclipse.org/r/#/c/88434/2/org.eclipse.egit.core/src/org/eclipse/egit/core/EclipseGitProgressTransformer.java@24 for some discussion on that.)",
      "parentUuid": "87929364_ffc2b9cc",
      "revId": "5d1121ee937bc7275fa37f03a391dd2e8b3820e8",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}