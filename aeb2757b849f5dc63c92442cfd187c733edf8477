{
  "comments": [
    {
      "key": {
        "uuid": "a1a1be23_3d82cfcd",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/Reftable.java",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 129259
      },
      "writtenOn": "2020-12-01T01:13:30Z",
      "side": 1,
      "message": "Is it better to create return a new RefCursor to skip some refs? For use case like return all refs except for refs/changes/*, I would use seekRefsWithPrefix(\"\") to get a RefCursor for all refs, then once the cursor hits the first refs/changes/* then I call RefCursor.skipPrefix(\"refs/changes/\") to jump past all the changes. How would that be done with this proposed seekPastRef()?",
      "range": {
        "startLine": 142,
        "startChar": 27,
        "endLine": 142,
        "endChar": 38
      },
      "revId": "aeb2757b849f5dc63c92442cfd187c733edf8477",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52ba8bf4_a2d50912",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/Reftable.java",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 301552
      },
      "writtenOn": "2020-12-01T11:59:10Z",
      "side": 1,
      "message": "See follow-up change for this implementation, but I\u0027m doing exactly what you described: get all changes, when hitting refs/changes/* use seekPastRef(refs/changes/) and continue with the new RefCursor. I agree that your idea is possibly cleaner from a design perspective, but it didn\u0027t cost anything to get around it (the only difference is that your method is a part of RefCursor and mine is a part of Reftable). Hence, I don\u0027t see why that\u0027s better.\n\nThere is much more complexity in implementing this suggestion since I\u0027ll need to implement the method 3-4 times, each with different implementation for those RefCursors. Because of this it looks like RefCursors will become much more complicated.\n\nUnless you feel strongly about this I\u0027d rather just stick with the current implementation. WDYT?",
      "parentUuid": "a1a1be23_3d82cfcd",
      "range": {
        "startLine": 142,
        "startChar": 27,
        "endLine": 142,
        "endChar": 38
      },
      "revId": "aeb2757b849f5dc63c92442cfd187c733edf8477",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4099d6bc_08f44abe",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/Reftable.java",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 129259
      },
      "writtenOn": "2020-12-01T17:51:37Z",
      "side": 1,
      "message": "Example: want all refs, except refs/a/*, refs/d/*, and refs/p/*.\nThis implementation would create 4 cursors, and hence 4 random search over the corpus.\nMy proposal creates 1 cursor, also 4 random search, but the corpus gets smaller and smaller. For example, once the cursor reaches the first refs/d/* items, it needs to seek past refs/d/*, but at this point the corpus is only (refs/d/*, end) instead of (refs/a/*, end). Maybe this is not big enough of a difference, but a pair of RefCursor.skipTo(prefix) and RefCursor.skipPast(prefix) seem intuitive and versatile to me.",
      "parentUuid": "52ba8bf4_a2d50912",
      "range": {
        "startLine": 142,
        "startChar": 27,
        "endLine": 142,
        "endChar": 38
      },
      "revId": "aeb2757b849f5dc63c92442cfd187c733edf8477",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1420e468_3bb44262",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/Reftable.java",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 301552
      },
      "writtenOn": "2020-12-02T16:30:24Z",
      "side": 1,
      "message": "okay I see your point, I changed this and now it\u0027s in fact searching the way you described such that we don\u0027t search from (0,end). Follow up also doesn\u0027t create any RefCursors, too.\n\nPTAL :)",
      "parentUuid": "4099d6bc_08f44abe",
      "range": {
        "startLine": 142,
        "startChar": 27,
        "endLine": 142,
        "endChar": 38
      },
      "revId": "aeb2757b849f5dc63c92442cfd187c733edf8477",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa127643_f607e154",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/Reftable.java",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 301552
      },
      "writtenOn": "2020-12-07T09:47:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1420e468_3bb44262",
      "range": {
        "startLine": 142,
        "startChar": 27,
        "endLine": 142,
        "endChar": 38
      },
      "revId": "aeb2757b849f5dc63c92442cfd187c733edf8477",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46e4756d_dd645784",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/Reftable.java",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 98905
      },
      "writtenOn": "2020-12-10T17:47:39Z",
      "side": 1,
      "message": "i don\u0027t understand this conversation.  If you have cursor that is positioned at the start of refs/changes/ , then it will be difficult to use the information contained in the cursor to help with the lookup of refs/changes/END . Depending on the size of the keyspace that is skipped, you\u0027d have to look through entirely different index blocks, so you there is almost no saved effort. (ie. you can only implement SkipPrefix() by doing a new lookup, which is equivalent to creating a new cursor) \n\nI\u0027m actually surprised that you need to implement it at this level, but I now see that the Java  is trying to filter the prefixes for the caller, so you can\u0027t build this from the existing API.",
      "parentUuid": "aa127643_f607e154",
      "range": {
        "startLine": 142,
        "startChar": 27,
        "endLine": 142,
        "endChar": 38
      },
      "revId": "aeb2757b849f5dc63c92442cfd187c733edf8477",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c28d927_ca95eec3",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/Reftable.java",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 301552
      },
      "writtenOn": "2020-12-11T22:49:41Z",
      "side": 1,
      "message": "Well, honestly searching from (0,100000) and (10000, 100000) is not really different considering this is a binary search, is that what you mean?\n\nThen yea, it\u0027s not amazing, didn\u0027t mind adding it as a bonus.",
      "parentUuid": "46e4756d_dd645784",
      "range": {
        "startLine": 142,
        "startChar": 27,
        "endLine": 142,
        "endChar": 38
      },
      "revId": "aeb2757b849f5dc63c92442cfd187c733edf8477",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10d7da87_4111e779",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/ReftableReader.java",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 98905
      },
      "writtenOn": "2020-12-10T17:47:39Z",
      "side": 1,
      "message": "I\u0027m missing bits. Unicode is 21 bits. \n\nAre ref names using unicode?",
      "range": {
        "startLine": 49,
        "startChar": 27,
        "endLine": 49,
        "endChar": 41
      },
      "revId": "aeb2757b849f5dc63c92442cfd187c733edf8477",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b261d04a_89802c93",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/ReftableReader.java",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 301552
      },
      "writtenOn": "2020-12-11T22:49:41Z",
      "side": 1,
      "message": "Yep, good catch, this was the last character represented by 2 bytes, but the last character in UTF_8 is \\u10FFFF, which is represented by these 4 bytes, according to this under \"Encoding\" and other sources:\nhttps://en.wikipedia.org/wiki/UTF-8",
      "parentUuid": "10d7da87_4111e779",
      "range": {
        "startLine": 49,
        "startChar": 27,
        "endLine": 49,
        "endChar": 41
      },
      "revId": "aeb2757b849f5dc63c92442cfd187c733edf8477",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13db2d0e_63f1f31b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/ReftableReader.java",
        "patchSetId": 2
      },
      "lineNbr": 514,
      "author": {
        "id": 98905
      },
      "writtenOn": "2020-12-10T17:47:39Z",
      "side": 1,
      "message": "This is a bit hard to read, and is it necessary? \nInstead of passing an extra flag, could you pass in match \u003d\u003d null ? \n\nthen you could do                                                      \n\nRefCursorImpl i \u003d new RefCursorImpl(refEnd, null, false);\ni.block \u003d seek(REF_BLOCK_TYPE, key, refIndex, 0, refEnd);\n\nI think that would seek to (PREFIX + LAST), and then just continues iterating until you reach the end. \n\nThen you can iterate until the keys don\u0027t start with PREFIX anymore, and you are where you want to be.\n\nYou can use that to add something like this to the public API:\n\n  /**\n  Seek to the first key \u003e\u003d `prefix`. The cursor will continue iterating until the end.\n  */\n  RefCursor seekTo(String prefix)\n\nand use that to implement the getRefsByPrefixWithSkips()",
      "range": {
        "startLine": 514,
        "startChar": 9,
        "endLine": 514,
        "endChar": 21
      },
      "revId": "aeb2757b849f5dc63c92442cfd187c733edf8477",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b184b746_d2cea57f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/ReftableReader.java",
        "patchSetId": 2
      },
      "lineNbr": 514,
      "author": {
        "id": 301552
      },
      "writtenOn": "2020-12-11T22:49:41Z",
      "side": 1,
      "message": "Did you review an oldder patchset on purpose or by accident? I\u0027ve got rid of scanUntilEnd as now I\u0027ve created seekPastRef as a RefCursor method.\n\nNice idea though :-)",
      "parentUuid": "13db2d0e_63f1f31b",
      "range": {
        "startLine": 514,
        "startChar": 9,
        "endLine": 514,
        "endChar": 21
      },
      "revId": "aeb2757b849f5dc63c92442cfd187c733edf8477",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    }
  ]
}