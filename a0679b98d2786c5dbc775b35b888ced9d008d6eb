{
  "comments": [
    {
      "key": {
        "uuid": "c7880b39_e3b21fff",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/lib/RefUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 383
      },
      "writtenOn": "2017-07-07T16:19:34Z",
      "side": 1,
      "message": "I\u0027m not sure this is the right thing to do.\n\nReceiveCommand#setResult translates RefUpdate.Result.REJECTED to ReceiveCommand.Result.REJECTED_NONFASTFORWARD, presumably because this Javadoc says REJECTED means non-ff. Thus in order to make BatchRefUpdate return REJECTED_MISSING_OBJECT, we will have to have somewhat duplicate code in BatchRefUpdate to handle this case.\n\nA cleaner solution might be:\n\n* Add RefUpdate.Result.REJECTED_MISSING_OBJECT and RefUpdate.Result.REJECTED_OTHER_REASON, to mirror the ReceiveCommand.Result statuses.\n* Document that RefUpdate.Result.REJECTED really means rejected due to non-ff, not an unspecified reason (which would be REJECTED_OTHER_REASON), and it is only named this confusingly-general way for backwards compatibility.\n\nI don\u0027t know what the impact would be of extending the RefUpdate.Result enum; all current values date back to the original Eclipse commit in 2009, so we haven\u0027t had to deal with this case before. Hopefully, most callers already treat unknown values as failure, but one can never be sure.\n\nDoes anyone know the Eclipse policy on adding new values to existing enums?",
      "revId": "a0679b98d2786c5dbc775b35b888ced9d008d6eb",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_83131b62",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/lib/RefUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 383
      },
      "writtenOn": "2017-07-07T16:33:30Z",
      "side": 1,
      "message": "I guess another alternative is: make this change use IO_FAILURE instead of REJECTED for missing objects.\n\nWould still need to have special code in BatchRefUpdate, but that\u0027s pretty simple, as the next patch set will show.",
      "parentUuid": "c7880b39_e3b21fff",
      "revId": "a0679b98d2786c5dbc775b35b888ced9d008d6eb",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_d93fb08a",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/lib/RefUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 4
      },
      "writtenOn": "2017-07-21T23:27:11Z",
      "side": 1,
      "message": "adding constants to enums doesn\u0027t break binary compatibility [1], Eclipse API evolution guidelines also say that adding enum constants doesn\u0027t break binary compatibility[2]. Client code can use the values() method to determine the ordinal positions of the enum constants, such code may be broken by reordering enum constants or adding new constants not at the end.\n\nSo I\u0027d say implement the cleaner solution and add the proposed new enum constants RefUpdate.Result.REJECTED_MISSING_OBJECT, RefUpdate.Result.REJECTED_OTHER_REASON at the end of the enum\n\n[1] https://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.4.26\n\n[2] https://wiki.eclipse.org/Evolving_Java-based_APIs_2#Evolving_API_Classes",
      "parentUuid": "c7880b39_e3b21fff",
      "revId": "a0679b98d2786c5dbc775b35b888ced9d008d6eb",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7880b39_2aea0a6d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/lib/RefUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 383
      },
      "writtenOn": "2017-07-25T17:33:06Z",
      "side": 1,
      "message": "Thanks for the pointer. Done.",
      "parentUuid": "c7880b39_d93fb08a",
      "revId": "a0679b98d2786c5dbc775b35b888ced9d008d6eb",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}