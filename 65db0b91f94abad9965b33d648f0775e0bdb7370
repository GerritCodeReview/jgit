{
  "comments": [
    {
      "key": {
        "uuid": "827675c7_52f8bd61",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/FileSnapshot.java",
        "patchSetId": 1
      },
      "lineNbr": 239,
      "author": {
        "id": 98905
      },
      "writtenOn": "2019-07-09T12:33:30Z",
      "side": 1,
      "message": "this disregards the special behavior for UNKNOWN_SIZE, and introduces a regression in our internal tests.",
      "range": {
        "startLine": 239,
        "startChar": 46,
        "endLine": 239,
        "endChar": 65
      },
      "revId": "65db0b91f94abad9965b33d648f0775e0bdb7370",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eec28942_d75b74e1",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/FileSnapshot.java",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 5
      },
      "writtenOn": "2019-05-08T09:55:39Z",
      "side": 1,
      "message": "on my mac with java 8 just XORing two longs and casting it to int is 20 times faster than this. Shouldn\u0027t we do this:\n\n  return (int) (lastModified ^ size)\n\n[1] https://gist.github.com/chalstrick/9bbaf4d314bb32726d5a1ce7331871a4",
      "revId": "65db0b91f94abad9965b33d648f0775e0bdb7370",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d0be5d1_f78cf780",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/FileSnapshot.java",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 4
      },
      "writtenOn": "2019-05-09T13:59:07Z",
      "side": 1,
      "message": "Why should we try to do a custom implementation compared to the one coming with the JDK ? Are you aware of a performance critical use of FileSnapshot.hashCode() ? On my Mac your test takes 297ms for 10 million executions of the Objects.hash implementation, this yields 29.7ns for a single one which is around 90 clock cycles on a 2.9GHz CPU core.",
      "parentUuid": "eec28942_d75b74e1",
      "revId": "65db0b91f94abad9965b33d648f0775e0bdb7370",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e689013_f33af528",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/FileSnapshot.java",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 5
      },
      "writtenOn": "2019-05-24T10:01:17Z",
      "side": 1,
      "message": "I don\u0027t care too much because I currently don\u0027t know of a performance critical use of FileSnapshot.hashCode(). If the topic is complicated I also prefer jdk methods, but I thought creating a hashcode from two unrelated ints is easy enough that we don\u0027t need help from 20 times slower jdk methods. But if you find your version e.g. more readable ... no problem.",
      "parentUuid": "9d0be5d1_f78cf780",
      "revId": "65db0b91f94abad9965b33d648f0775e0bdb7370",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}