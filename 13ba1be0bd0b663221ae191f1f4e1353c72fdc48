{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "511b28ba_999de455",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 37
      },
      "lineNbr": 0,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-03-28T22:22:31Z",
      "side": 1,
      "message": "IIUC from https://github.com/derrickstolee/gen-test, generation numbers help in many cases but make others slower. It is preferable to use fixed commit timestamps.\n\nWe can either submit this and update it later to fixed-commit-timestamps, or jump directly to fixed-commit-timestamps (after we get them into the commit-graph)",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3f8ffef_15893dfb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 37
      },
      "lineNbr": 0,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-03-28T22:24:18Z",
      "side": 1,
      "message": "Putting a -1 to signal that I have some comments open.",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e996fb6_02ea1384",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 37
      },
      "lineNbr": 0,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-03-28T23:16:53Z",
      "side": 1,
      "message": "I\u0027d leave this decision for Kyle who is doing all the work (thanks a lot) :-)",
      "parentUuid": "511b28ba_999de455",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49668352_f2ed48a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 37
      },
      "lineNbr": 0,
      "author": {
        "id": 304466
      },
      "writtenOn": "2023-03-29T02:40:03Z",
      "side": 1,
      "message": "\u003e IIUC from https://github.com/derrickstolee/gen-test, generation numbers help in many cases but make others slower. It is preferable to use fixed commit timestamps.\n\nThank you Ivan for providing the information.\n\nI have read these tests just now, which affected \"git log --topo-order\" and \"git merge-base\".\n\nThese tests have one thing in common, they walked in order of descending generation number instead of descending commit date.\n\nIn other words, in JGit, let\u0027s say org.eclipse.jgit.revwalk.DateRevQueue is replaced by something named \"GeneRevQueue\", which we haven\u0027t done yet.\n\n\n\u003e We can either submit this and update it later to fixed-commit-timestamps, or jump directly to fixed-commit-timestamps (after we get them into the commit-graph)\n\nThe #getMergeInto() method does not use GeneRevQueue, I guess ”minimum generation number” will not make it worse.\n \nMaybe we can submit it and don\u0027t implement GeneRevQueue until fixed-commit-timestamps is implemented.",
      "parentUuid": "0e996fb6_02ea1384",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4a0e319_84d3df45",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 37
      },
      "lineNbr": 0,
      "author": {
        "id": 304466
      },
      "writtenOn": "2023-03-29T03:07:28Z",
      "side": 1,
      "message": "\u003e These tests have one thing in common, they walked in order of descending generation number instead of descending commit date.\n\u003e \n\u003e In other words, in JGit, let\u0027s say org.eclipse.jgit.revwalk.DateRevQueue is replaced by something named \"GeneRevQueue\", which we haven\u0027t done yet.\n\nCorrect some of my comments above, for \"git log --topo-order\", the optimization of the algorithm looks more complicated, and I am not particularly familiar with it at present, refer to [1].\n\n\"They all use the generation number to optimize the heuristic traversal of the commits\", this description would be better.\n\nThe optimization of #getMergeInto() was just a simple use of \"If gen(A) \u003c gen(B), then A cannot reach B.\", but still walked in order of descending commit date.\n\n[1] https://github.com/git/git/commit/b45424181e9e8b2284a48c6db7b8db635bbfccc8",
      "parentUuid": "49668352_f2ed48a2",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5da80675_88a484b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 37
      },
      "lineNbr": 0,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-04-12T13:59:44Z",
      "side": 1,
      "message": "any comments on Kyle\u0027s response to your open comments ?",
      "parentUuid": "f3f8ffef_15893dfb",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a33c7e55_bbfeaf0c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 37
      },
      "lineNbr": 0,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-04-12T23:18:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b4a0e319_84d3df45",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4dcf7c6_6b6e7dfd",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/revwalk/RevWalkCommitGraphTest.java",
        "patchSetId": 37
      },
      "lineNbr": 224,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-03-31T21:43:45Z",
      "side": 1,
      "message": "In most cases, the commit-graph won\u0027t have all the commits, because there are new packs and not everything is gc\u0027ed.\n\nCan you add test cases for that? The combinations of needle in graph or not, refs in graphs or not.",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4067f4d_a783ac20",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/revwalk/RevWalkCommitGraphTest.java",
        "patchSetId": 37
      },
      "lineNbr": 224,
      "author": {
        "id": 304466
      },
      "writtenOn": "2023-04-03T08:11:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e4dcf7c6_6b6e7dfd",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7b1c3c2_dbba2535",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/revwalk/RevWalkCommitGraphTest.java",
        "patchSetId": 37
      },
      "lineNbr": 275,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-03-31T21:43:45Z",
      "side": 1,
      "message": "This assumes certain order in the refs, which I don\u0027t think is guaranteed.\n\nMaybe you can sort by refname before comparing the lists?",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d42ae98b_42ef790b",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/revwalk/RevWalkCommitGraphTest.java",
        "patchSetId": 37
      },
      "lineNbr": 275,
      "author": {
        "id": 304466
      },
      "writtenOn": "2023-04-03T08:11:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a7b1c3c2_dbba2535",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33958b42_0df71518",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 37
      },
      "lineNbr": 570,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-03-31T21:43:45Z",
      "side": 1,
      "message": "It took me a while to understand that this works in all cases.\n\nIf the needle has unknown generation, the commits in the refs either have generation number (uninteresting, they are definitely in the past) or are also unknown (interesting)\n\nIf the needle has a generation, the commits in the refs either have generation number (compare to decide) or are also unknown (interesting).\n\nI think the test should cover these 4 cases. I comment there.",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa9ce982_6a7dd186",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 37
      },
      "lineNbr": 605,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-03-28T22:22:31Z",
      "side": 1,
      "message": "You shouldn\u0027t need this, much less an \"instanceof\", because #getGeneration is in RevCommit (returning UNKNOWN) and overriden in RevCommitCG.",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71b925e6_5e7449cd",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 37
      },
      "lineNbr": 605,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-03-28T23:14:42Z",
      "side": 1,
      "message": "I see, is parseHeaders also needed if it\u0027s not a RevCommitCG ?",
      "parentUuid": "aa9ce982_6a7dd186",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d55cd070_6bbcb981",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 37
      },
      "lineNbr": 605,
      "author": {
        "id": 304466
      },
      "writtenOn": "2023-03-29T02:40:03Z",
      "side": 1,
      "message": "\u003e I see, is parseHeaders also needed if it\u0027s not a RevCommitCG ?\n\nYeah, if RevCommit is not RevCommitCG, #getGeneration() will always return COMMIT_GENERATION_UNKNOWN (Integer.MAX_VALUE).\n\nI added \"instanceof RevCommitCG\" because if it is not RevCommitCG, even without #parseHeader(), the result will be not affected. Otherwise, the result may be wrong.\n\nThe code will be simpler to remove the \"instanceof of\", maybe we can add more comments to explain it.",
      "parentUuid": "71b925e6_5e7449cd",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "351f15be_143f1ee4",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 37
      },
      "lineNbr": 605,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-03-29T06:35:51Z",
      "side": 1,
      "message": "AFAICS the result is the same if we remove lines 607 and 608 since RevCommit#getGeneration returns Constants.COMMIT_GENERATION_UNKNOWN.\nSo we could write this and inline it:\n\n```\n// Make sure commit is parsed from commit-graph\ncommit.parseHeaders(this);\ngeneration \u003d commit.getGeneration();\n```\n\nThough using instanceof looks like a hack leaking implementation details of RevCommitCG to the caller. If RevCommitCG#getGeneration could detect itself if it needs to run parseHeaders then we could move this call into that method.",
      "parentUuid": "d55cd070_6bbcb981",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8552e551_b0d89b84",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 37
      },
      "lineNbr": 605,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-03-31T21:43:45Z",
      "side": 1,
      "message": "I think the JGit pattern is \"if you use the headers, invoke #parseHeaders\" beforehand. IIRC RevCommit doesn\u0027t keep the reader reference, so it cannot load on demand.\n\nI understand that the needle is provded by the caller and we don\u0027t know if #parseHeader has been invoked before. Then we can do it here and guard it with\n\n\t\tif ((c.flags \u0026 PARSED) \u003d\u003d 0)\n\t\t\tc.parseHeaders(this);\n\t\t\t\nbecause c.parseHeaders otherwise re-reads the data.",
      "parentUuid": "351f15be_143f1ee4",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddeea10a_4efb9b1f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 37
      },
      "lineNbr": 605,
      "author": {
        "id": 304466
      },
      "writtenOn": "2023-04-03T08:11:50Z",
      "side": 1,
      "message": "\u003e \n\u003e \t\tif ((c.flags \u0026 PARSED) \u003d\u003d 0)\n\u003e \t\t\tc.parseHeaders(this);\n\u003e \t\t\t\n\u003e because c.parseHeaders otherwise re-reads the data.\n\nI just ran a test case with this but it failed.\n\nFinally, I found the reason. \n\nAfter calling RevWalk#parseNew(AnyObjectId, ObjectLoader), RevCommitCG will be parsed but its generation number is still unknown. If RevCommitCG is just created and calls #parseBody(RevWalk) directly, this problem will also occur.\n\nI think RevCommitCG also needs to override #parseCanonical(RevWalk, byte[]) method.\n\nMaybe we should create a new change review and fix it.",
      "parentUuid": "8552e551_b0d89b84",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "163e22aa_2eaff1f2",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 37
      },
      "lineNbr": 605,
      "author": {
        "id": 304466
      },
      "writtenOn": "2023-04-12T03:41:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ddeea10a_4efb9b1f",
      "revId": "13ba1be0bd0b663221ae191f1f4e1353c72fdc48",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}