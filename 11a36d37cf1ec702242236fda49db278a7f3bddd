{
  "comments": [
    {
      "key": {
        "uuid": "bf86c766_c136101a",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevCommit.java",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 951
      },
      "writtenOn": "2018-06-27T00:37:33Z",
      "side": 1,
      "message": "An alternative we discussed is to move this call to RevWalk#createCommit. That way, it\u0027s not possible to create a RevCommit without shallow commits being initialized first.\n\nI think I\u0027d be more comfortable with that approach because of that guarantee. Is the problem that subclasses that override createCommit would lose the check? If so, would it make sense to move this call to a wrapper around createCommit or put calls at all createCommit call sites?\n\nLooking over those call sites, I see only three: lookupCommit, lookupAny, and parseNew. Looking at where the parents field gets written, I see RevCommit#parseCanonical, RewriteGenerator#next, and TreeRevFilter#include (twice). I *think* that this place captures all cases, but if any new call sites are introduced then the problem could occur again. Should the javadoc comment for createCommit discuss this issue?",
      "revId": "11a36d37cf1ec702242236fda49db278a7f3bddd",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e5216f9_a48932ae",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevCommit.java",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1628
      },
      "writtenOn": "2018-06-27T01:23:40Z",
      "side": 1,
      "message": "Yes, RevWalk#createCommit() is a protected method that is frequently overridden in subclasses and it is public API, so it isn\u0027t a good candidate for enforcing this. Given that it is public API I don\u0027t see an easy way to enforce that all clients call a wrapper around it.\n\nThe RevCommit#parents field is left null until parseCanonical or initializeShallowCommits sets it. So as long as parseCanonical and initializeShallowCommits cooperate, we are ok. I don\u0027t think that is a worse situation than having all createCommit call sites cooperate.",
      "parentUuid": "bf86c766_c136101a",
      "revId": "11a36d37cf1ec702242236fda49db278a7f3bddd",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0d946b8_9f77eee7",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevCommit.java",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 951
      },
      "writtenOn": "2018-06-27T01:31:03Z",
      "side": 1,
      "message": "Indeed RevWalk#createCommit is protected, so we couldn\u0027t easily change the implementer contract for it without e.g. changing its name.\n\nOn the other hand, we could do something like\n\n  RevCommit newCommit(AnyObjectId id) {\n    if (!walk.shallowCommitsInitialized) {\n      walk.initializeShallowCommits();\n    }\n    return createCommit(id);\n  }\n\nThen the three createCommit call sites could switch to using newCommit instead.\n\nThe createCommit call sites having to cooperate doesn\u0027t seem so bad to me; after all, ill behaved callers can also call `new RevCommit(id)` directly, but they don\u0027t.\n\nWith the comment you added to initializeShallowCommits, I think the code is already clear enough. Thanks for the patient explanations.",
      "parentUuid": "0e5216f9_a48932ae",
      "revId": "11a36d37cf1ec702242236fda49db278a7f3bddd",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e27b8944_87ae12b7",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevCommit.java",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1628
      },
      "writtenOn": "2018-06-27T03:14:08Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a0d946b8_9f77eee7",
      "revId": "11a36d37cf1ec702242236fda49db278a7f3bddd",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "140e4239_29058bdb",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 1
      },
      "lineNbr": 1463,
      "author": {
        "id": 951
      },
      "writtenOn": "2018-06-27T00:37:33Z",
      "side": 1,
      "message": "This is subtle, so it deserves a comment.",
      "revId": "11a36d37cf1ec702242236fda49db278a7f3bddd",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c9839e5_e14cbb5a",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 1
      },
      "lineNbr": 1463,
      "author": {
        "id": 1628
      },
      "writtenOn": "2018-06-27T01:23:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "140e4239_29058bdb",
      "revId": "11a36d37cf1ec702242236fda49db278a7f3bddd",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}