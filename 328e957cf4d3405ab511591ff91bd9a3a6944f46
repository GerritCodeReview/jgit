{
  "comments": [
    {
      "key": {
        "uuid": "2a290b75_562eb594",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/ReftableBatchRefUpdate.java",
        "patchSetId": 10
      },
      "lineNbr": 131,
      "author": {
        "id": 149285
      },
      "writtenOn": "2021-10-20T11:50:13Z",
      "side": 1,
      "message": "Does RefTable really need a RefCache? From the design my gut says \"no\" because reftable offers near-constant time random access.\n\nFrom my understanding, the packed ref storage is slow on NFS not because you have to stat or read the packed refs file, but because for each DB request, you have to look into the loose storage as well which involves stating/reading many files and folders.\n\nMaybe spare this for now?",
      "revId": "328e957cf4d3405ab511591ff91bd9a3a6944f46",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ed22774_bf54f5b9",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/ReftableBatchRefUpdate.java",
        "patchSetId": 10
      },
      "lineNbr": 131,
      "author": {
        "id": 1541
      },
      "writtenOn": "2021-10-20T20:04:28Z",
      "side": 1,
      "message": "\u003e From my understanding, the packed ref storage is slow on NFS not because you have to stat or read the packed refs file, but because for each DB request, you have to look into the loose storage as well which involves stating/reading many files and folders.\n\n(not necessarily directed at Patrick)\n\nDo we (JGit?) have some kind of performance testing data showing this?\n\nDo you (anyone) expect that a repo with only packed refs has performance on-par with reftable? (for maybe each of exactRef() and getRefsByPrefix()?)",
      "parentUuid": "2a290b75_562eb594",
      "revId": "328e957cf4d3405ab511591ff91bd9a3a6944f46",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98d887ea_f487c601",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/ReftableBatchRefUpdate.java",
        "patchSetId": 10
      },
      "lineNbr": 131,
      "author": {
        "id": 98905
      },
      "writtenOn": "2021-10-25T10:17:26Z",
      "side": 1,
      "message": "\u003eDo you (anyone) expect that a repo with only packed refs has performance on-par with reftable? (for maybe each of exactRef() and getRefsByPrefix()?)\n\nit could be made like that, but the current code reads the entire packed-refs file, so for individual lookups, it is suboptimal. If JGit would use a mmap\u0027d file (or something similar), and read the packed-refs file incrementally.\n\n\u003eDoes RefTable really need a RefCache? From the design my gut says \"no\" because reftable offers near-constant time random access.\n\nAdding the refcache on top of reftable slows the whole thing down, because this cache rereads all refs on refresh. Reftable keeps files open across writes, so it doesn\u0027t have to do work for handling an update (it just has to read the incremental table)",
      "parentUuid": "4ed22774_bf54f5b9",
      "revId": "328e957cf4d3405ab511591ff91bd9a3a6944f46",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff0000ee_5c1d24c2",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftable/ReftableBatchRefUpdate.java",
        "patchSetId": 10
      },
      "lineNbr": 131,
      "author": {
        "id": 4
      },
      "writtenOn": "2021-10-25T23:52:16Z",
      "side": 1,
      "message": "I removed support for wrapping RefTable with the cache\n\nWe have an implementation of WindowCache using FileChannel#map to mmap pack files (implemented by Shawn, RIP) which was tried in the wild on different OSes and it turned out to cause random crashes, probably due to the fact that Java doesn\u0027t provide a deterministic way to unmap. And so far we didn\u0027t go down the slippery slope of using Unsafe trying to fix this. With Java 17 or later we can try again using the new foreign memory API (still preview feature in Java 17) which looks promising.\n\nthis series contains several benchmarks to help replacing guessing by measuring :-)\nwill run them again and post results when the remaining test failures have been fixed",
      "parentUuid": "4ed22774_bf54f5b9",
      "revId": "328e957cf4d3405ab511591ff91bd9a3a6944f46",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edba6a46_368c0ce0",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/lib/BatchRefUpdate.java",
        "patchSetId": 10
      },
      "lineNbr": 96,
      "author": {
        "id": 149285
      },
      "writtenOn": "2021-10-20T11:50:13Z",
      "side": 1,
      "message": "@Nullable or optional?\n\nThis doesn\u0027t have to be set, right?",
      "revId": "328e957cf4d3405ab511591ff91bd9a3a6944f46",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3eae9e4c_a8dad6f1",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/lib/BatchRefUpdate.java",
        "patchSetId": 10
      },
      "lineNbr": 96,
      "author": {
        "id": 4
      },
      "writtenOn": "2021-10-25T23:52:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "edba6a46_368c0ce0",
      "revId": "328e957cf4d3405ab511591ff91bd9a3a6944f46",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c9e4033_d163a716",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/lib/RefCache.java",
        "patchSetId": 10
      },
      "lineNbr": 48,
      "author": {
        "id": 149285
      },
      "writtenOn": "2021-10-20T11:50:13Z",
      "side": 1,
      "message": "Aren\u0027t these all just \u0027RefUpdates\u0027 covered by \u0027onUpdate\u0027?",
      "revId": "328e957cf4d3405ab511591ff91bd9a3a6944f46",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f457ee21_703e31db",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/lib/RefCache.java",
        "patchSetId": 10
      },
      "lineNbr": 48,
      "author": {
        "id": 4
      },
      "writtenOn": "2021-10-25T23:52:16Z",
      "side": 1,
      "message": "I changed this interface to expose the methods the underlying tree provides",
      "parentUuid": "4c9e4033_d163a716",
      "revId": "328e957cf4d3405ab511591ff91bd9a3a6944f46",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}