{
  "comments": [
    {
      "key": {
        "uuid": "27af2791_15785c9a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 951
      },
      "writtenOn": "2016-08-04T19:01:29Z",
      "side": 1,
      "message": "nit: trailing whitespace",
      "range": {
        "startLine": 19,
        "startChar": 62,
        "endLine": 19,
        "endChar": 63
      },
      "revId": "204b372af9972c9d9df6614a61fdd5320df68d00",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27af2791_58dccb59",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 1628
      },
      "writtenOn": "2016-08-04T22:00:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "27af2791_15785c9a",
      "range": {
        "startLine": 19,
        "startChar": 62,
        "endLine": 19,
        "endChar": 63
      },
      "revId": "204b372af9972c9d9df6614a61fdd5320df68d00",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27af2791_b50df046",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 951
      },
      "writtenOn": "2016-08-04T19:01:29Z",
      "side": 1,
      "message": "I don\u0027t think this is true.\n\nFor a shallow fetch from a shallow repo, PackWriter always loses the shallow information. This is partially mitigated because DepthGenerator is bad at propagating the UNINTERESTING information to ancestry of \"have\"s.\n\nA \"have\" that is not an ancestor of a root gets depth -1. We don\u0027t do anything special to handle this, so its parents get depth 0 (oops), just as though they were roots. Then we keep enqueueing parents and walking until we hit the maximum depth. What makes the loss of shallow information hard to reproduce is that that maximum depth can be pretty low, so e.g. trying\n\n  git clone --depth\u003d1 https://kernel.googlesource.com/pub/scm/git/git\n  git -C git fetch --depth\u003d1 origin v1.5.0\n\ndoesn\u0027t reproduce this bug, while\n\n  git clone https://kernel.googlesource.com/pub/scm/git/git\n  git clone --depth\u003d1 https://kernel.googlesource.com/pub/scm/git/git repro\n  git -C repro fetch --depth\u003d100 origin $(git -C git rev-parse HEAD~10)\n\ndoes.",
      "range": {
        "startLine": 45,
        "startChar": 23,
        "endLine": 47,
        "endChar": 9
      },
      "revId": "204b372af9972c9d9df6614a61fdd5320df68d00",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27af2791_35672046",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 951
      },
      "writtenOn": "2016-08-04T21:08:35Z",
      "side": 1,
      "message": "It\u0027s even worse. DepthGenerator doesn\u0027t call carryFlagsImpl so the UNINTERESTING flag doesn\u0027t propagate to parents. Which makes the PackWriter interpret the parent generation to a \"have\" as \"want\"s.",
      "parentUuid": "27af2791_b50df046",
      "range": {
        "startLine": 45,
        "startChar": 23,
        "endLine": 47,
        "endChar": 9
      },
      "revId": "204b372af9972c9d9df6614a61fdd5320df68d00",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27af2791_38f39797",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1628
      },
      "writtenOn": "2016-08-04T22:00:01Z",
      "side": 1,
      "message": "You may be right, but it isn\u0027t the cause of the bug being fixed in this change.",
      "parentUuid": "27af2791_35672046",
      "range": {
        "startLine": 45,
        "startChar": 23,
        "endLine": 47,
        "endChar": 9
      },
      "revId": "204b372af9972c9d9df6614a61fdd5320df68d00",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27af2791_18c5f330",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1628
      },
      "writtenOn": "2016-08-04T22:00:01Z",
      "side": 1,
      "message": "It is observably true as shown by the unit tests added by this change. The DepthWalk code is very difficult to understand through pure inspection. Try patching this change into a client and running it under a debugger. You will see that a \"have\" that is not an ancestor of a root never gets touched by the DepthWalk.RevWalk/ObjectWalk. \n\nI originally had some wrong assumptions and posited incorrect reasoning for the observed behavior. Now that I have observed the code running under a debugger, I think my description is accurate.\n\nI\u0027d prefer sticking to behavior shown by unit tests to reason about what is going on. I tried the git clone/fetch steps you outline above with GIT_TRACE_PACKET\u003d1 set, and it appears to be a different bug than the one that is solved here. The bug solved here occurs when UploadPack completes the negotiation and PackWriter fails to pack any objects. Your clone/fetch recipe is failing in UploakPack\u0027s negotiation phase. It is very likely related to problems in DepthWalker, but as an example it doesn\u0027t invalidate the fix I am making here.\n\nI\u0027ll see if I can recreate the issue by writing new unit tests for UploadPack.",
      "parentUuid": "27af2791_b50df046",
      "range": {
        "startLine": 45,
        "startChar": 23,
        "endLine": 47,
        "endChar": 9
      },
      "revId": "204b372af9972c9d9df6614a61fdd5320df68d00",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27af2791_9873c35a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 951
      },
      "writtenOn": "2016-08-04T23:25:26Z",
      "side": 1,
      "message": "The commit message says \"this bug is limited to fetching the direct parent of a commit that the client reports as both a \"have\" and a \"shallow\".\n\nI don\u0027t understand from the code why that would be true. I don\u0027t understand how the tests could demonstrate it, either --- \"is limited to\" means that there is no other way to trigger the bug.\n\nI also don\u0027t see why that\u0027s an important thing to have in the commit message. It makes the patch more confusing. That\u0027s why I keep commenting on it --- it is because I don\u0027t understand it.\n\nMeanwhile I am very happy with the bugfix in this commit. Perhaps a good way forward would be to open a bug in bugzilla with that description and say \"This can be difficult to reproduce because of bug#\u003cnum\u003e\". Would that work?",
      "parentUuid": "27af2791_38f39797",
      "range": {
        "startLine": 45,
        "startChar": 23,
        "endLine": 47,
        "endChar": 9
      },
      "revId": "204b372af9972c9d9df6614a61fdd5320df68d00",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}