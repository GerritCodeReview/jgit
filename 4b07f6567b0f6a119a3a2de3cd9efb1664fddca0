{
  "comments": [
    {
      "key": {
        "uuid": "6cd4555f_11090019",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/WindowCacheGetTest.java",
        "patchSetId": 3
      },
      "lineNbr": 162,
      "author": {
        "id": 925
      },
      "writtenOn": "2020-01-09T05:49:16Z",
      "side": 1,
      "message": "Shouldn\u0027t this be \"\u003c\"?  Same for most of the others below, the message is different to what is being asserted.",
      "range": {
        "startLine": 162,
        "startChar": 42,
        "endLine": 162,
        "endChar": 43
      },
      "revId": "4b07f6567b0f6a119a3a2de3cd9efb1664fddca0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ff2c322_6185dae7",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/WindowCacheGetTest.java",
        "patchSetId": 3
      },
      "lineNbr": 162,
      "author": {
        "id": 5
      },
      "writtenOn": "2020-01-10T12:38:08Z",
      "side": 1,
      "message": "I think the message is similar to what is being asserted. It is asserted that the average load time is greater than 0, and thats also the statement of the message. Only the operands of the comparison are switched between assertion and message - that\u0027s why it looks odd and a \u0027\u003c\u0027 becomes a \u0027\u003e\u0027",
      "parentUuid": "6cd4555f_11090019",
      "range": {
        "startLine": 162,
        "startChar": 42,
        "endLine": 162,
        "endChar": 43
      },
      "revId": "4b07f6567b0f6a119a3a2de3cd9efb1664fddca0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa1321c_35c9fb9d",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/WindowCacheGetTest.java",
        "patchSetId": 3
      },
      "lineNbr": 162,
      "author": {
        "id": 925
      },
      "writtenOn": "2020-01-14T06:03:18Z",
      "side": 1,
      "message": "OK, but in that case the ones at L178 and L180 are inconsistent.",
      "parentUuid": "5ff2c322_6185dae7",
      "range": {
        "startLine": 162,
        "startChar": 42,
        "endLine": 162,
        "endChar": 43
      },
      "revId": "4b07f6567b0f6a119a3a2de3cd9efb1664fddca0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b07a19b_f6f69d46",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/WindowCacheGetTest.java",
        "patchSetId": 3
      },
      "lineNbr": 162,
      "author": {
        "id": 5
      },
      "writtenOn": "2020-01-17T15:50:09Z",
      "side": 1,
      "message": "I\u0027ll comment on that lines",
      "parentUuid": "baa1321c_35c9fb9d",
      "range": {
        "startLine": 162,
        "startChar": 42,
        "endLine": 162,
        "endChar": 43
      },
      "revId": "4b07f6567b0f6a119a3a2de3cd9efb1664fddca0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c509d14f_4679055f",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/WindowCacheGetTest.java",
        "patchSetId": 3
      },
      "lineNbr": 178,
      "author": {
        "id": 5
      },
      "writtenOn": "2020-01-17T15:50:09Z",
      "side": 1,
      "message": "I think the test is consistent.\nMessage says:\n  open byte count should be \u003c\u003d core.packedGitLimit\nCode says:\n  s.getOpenByteCount() \u003c\u003d cfg.getPackedGitLimit()\n\nThat fit\u0027s, or?",
      "revId": "4b07f6567b0f6a119a3a2de3cd9efb1664fddca0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a8284cf_d73affd8",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/WindowCacheGetTest.java",
        "patchSetId": 3
      },
      "lineNbr": 180,
      "author": {
        "id": 5
      },
      "writtenOn": "2020-01-17T15:50:09Z",
      "side": 1,
      "message": "Same as in L178. Message and test are in sync in my eyes",
      "revId": "4b07f6567b0f6a119a3a2de3cd9efb1664fddca0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c028aa90_1a396dd6",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/WindowCache.java",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 5
      },
      "writtenOn": "2020-01-20T09:49:01Z",
      "side": 1,
      "message": "sounds strange that a method \u0027is set to false. Maybe rephrase this to \"if WindowCacheConfig#setPackedGitUseStrongRefs(true) is called\"",
      "range": {
        "startLine": 89,
        "startChar": 63,
        "endLine": 90,
        "endChar": 63
      },
      "revId": "4b07f6567b0f6a119a3a2de3cd9efb1664fddca0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "040f6d69_040d9f29",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/WindowCache.java",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-01-20T16:57:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c028aa90_1a396dd6",
      "range": {
        "startLine": 89,
        "startChar": 63,
        "endLine": 90,
        "endChar": 63
      },
      "revId": "4b07f6567b0f6a119a3a2de3cd9efb1664fddca0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edfb288b_dc2d9ea0",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/WindowCache.java",
        "patchSetId": 3
      },
      "lineNbr": 772,
      "author": {
        "id": 5
      },
      "writtenOn": "2020-01-20T09:49:01Z",
      "side": 1,
      "message": "There is a prominent Interface org.eclipse.jgit.lib.Ref which you override here. When reading your change I was sometimes tricked by\nmisinterpreting which Ref was meant. Shouldn\u0027t we rename this private interface so it doesn\u0027t clash with the public one?  Maybe CacheRef\nor something like that.",
      "revId": "4b07f6567b0f6a119a3a2de3cd9efb1664fddca0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91fedb0f_67ad72b9",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/WindowCache.java",
        "patchSetId": 3
      },
      "lineNbr": 772,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-01-20T16:57:31Z",
      "side": 1,
      "message": "This class doesn\u0027t override the other Ref class but uses the same simple name. I thought that\u0027s not a problem since this is a private inner class of WindowCache which doesn\u0027t deal with the other type of Refs. Based on your feedback I will rename it anyway to avoid misunderstandings.",
      "parentUuid": "edfb288b_dc2d9ea0",
      "revId": "4b07f6567b0f6a119a3a2de3cd9efb1664fddca0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6c4b1ff_c224ca0f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/WindowCache.java",
        "patchSetId": 3
      },
      "lineNbr": 802,
      "author": {
        "id": 5
      },
      "writtenOn": "2020-01-20T09:49:01Z",
      "side": 1,
      "message": "I am a bit confused by the term \u0027cache page\u0027. I always thought \u0027pages\u0027 are fixed length [1], means all pages\ninside the cache would have the same size. And inside one page potentially multiple objects are stored. \nAm I wrong or does this method return the position of the referenced object inside the packfile. If I am\ndealing with a Ref to object X, will getPosition() return something pointing to X or to the cache page\nwhich among other objects contain X?\n\n[1] https://en.wikipedia.org/wiki/Page_(computer_memory)",
      "revId": "4b07f6567b0f6a119a3a2de3cd9efb1664fddca0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a909978f_c9ecde26",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/WindowCache.java",
        "patchSetId": 3
      },
      "lineNbr": 802,
      "author": {
        "id": 4
      },
      "writtenOn": "2020-01-20T16:57:31Z",
      "side": 1,
      "message": "AFAICS the position of a cache page (ByteWindow) is the offset of the byte[] it loads from the packfile relative to the the start of the packfile.\n\nSee methods\n\n static final ByteWindow get(PackFile pack, long offset)\n\nand\n\n private long toStart(long offset)\n\nI think the lookup works in the following way:\n- find packfile and offset in packfile containing object to be loaded in git pack indexes cached in memory\n- translate object offset in given packfile to start of the respective cache page which will contain the object we want to load, done by method toStart(long offset)\n- load this cache page from the packfile and return corresponding ByteWindow instance\n- parsing objects from the cache page (ByteWindow) is done after that",
      "parentUuid": "f6c4b1ff_c224ca0f",
      "revId": "4b07f6567b0f6a119a3a2de3cd9efb1664fddca0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58df05f2_3bc8695c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/WindowCache.java",
        "patchSetId": 3
      },
      "lineNbr": 802,
      "author": {
        "id": 5
      },
      "writtenOn": "2020-01-26T18:02:09Z",
      "side": 1,
      "message": "Ok, now I understand this. We really have fixed length cache pages. LGTM",
      "parentUuid": "a909978f_c9ecde26",
      "revId": "4b07f6567b0f6a119a3a2de3cd9efb1664fddca0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    }
  ]
}